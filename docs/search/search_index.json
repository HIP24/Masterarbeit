{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#thema-masterarbeit","title":"Thema Masterarbeit","text":"<p>Virtualisierung eines Echtzeit-Betriebssystems zur Steuerung eines Roboters mit Schwerpunkt auf die  Einhaltung der Echtzeit </p>"},{"location":"#kurze-umschreibung","title":"Kurze Umschreibung","text":"<p>Erstellung einer Echtzeit-Robotersteuerungsplattform unter Verwendung von Salamander OS, Xenomai, QEMU  und PCV-521 in der Yocto-Umgebung. Die Plattform basiert auf Salamander OS und nutzt Xenomai f\u00fcr Echtzeit- Funktionen. Dazu muss im ersten Schritt die Virtualisierungsplattform evaluiert werden. (QEMU, Hyper-V, Virtual  Box, etc.) Als weiterer Schritt folgt die Anbindung eines Roboters \u00fcber eine VARAN-Bus Schnittstelle. Das  gesamte System wird in der Yocto-Umgebung erstellt und konfiguriert.  Das Hauptziel der Arbeit ist es, herauszufinden, wie die Integration von Echtzeit-Funktionen und effizienten  Kommunikationssystemen in eine Robotersteuerungsplattform die Reaktionszeit und Zuverl\u00e4ssigkeit von  Roboteranwendungen verbessern kann. </p>"},{"location":"master/","title":"Master","text":""},{"location":"master/#overview","title":"Overview","text":"File Description BS Virtualisierungsprojekt.xlsx Masterthesis progress"},{"location":"master/#markdown-files","title":"Markdown files","text":""},{"location":"master/#general","title":"General","text":"File Description protocol.md Protocol of the process timeline.md Timeline view of the process components.md Components of the process useful.md Useful stuff in the process useful_notneeded.md Useful stuff that is not needed in the process most_popular_paths.md Most used paths in the process"},{"location":"master/#sigmatek","title":"Sigmatek","text":"File Description bash_commands.md How to set up for yocto build build_LRT.md How to build LRT - Salamander 3 Terminal build_with_yocto.md How to bitbake a yocto salamander-image"},{"location":"master/#yocto","title":"Yocto","text":"File Description fix.md Fix Yocto build 0001.patch after_bitbake.md Commands after bitbake"},{"location":"master/#xenomai","title":"Xenomai","text":"File Description xenomai-system-tools.md Xenomai System Tools latency.md Xenomai: latency tool clocktest.md Xenomai: clocktest tool switchtest.md Xenomai: switchtest tool"},{"location":"master/#trace-cmd-and-kernelshark","title":"trace-cmd and kernelshark","text":"File Description info.md Info about trace-cmd kernelshark.md Kernelshark commands for host and guest"},{"location":"master/#readme","title":"README","text":"File Description README.md README of the masterthesis README.md README of libtraceevent README.md README of libtracefs README.md README of libtracecmd README.md README of trace-cmd"},{"location":"master/#scripts","title":"Scripts","text":""},{"location":"master/#yocto_1","title":"Yocto","text":"File Description after_bitbake_1.sh Script after bitbake 1 after_bitbake_2.sh Script after bitbake 2"},{"location":"master/#qemu-config","title":"QEMU config","text":"File Description qemu_def_1default.sh default qemu_def.sh qemu_def_2nmbridge.sh qemu_def.sh with nm bridge qemu_def_3vsock.sh qemu_def.sh with vsock qemu_def_4schedstats.sh qemu_def.sh with schedstats qemu_def_5taskset.sh qemu_def.sh with taskset start_qemu.sh Script for starting QEMU"},{"location":"master/#resources","title":"Resources","text":"File Description startup_console.sh Startup script for console startup_konsole.sh Startup script for konsole"},{"location":"master/#trace-cmd-and-kernelshark_1","title":"trace-cmd and kernelshark","text":"File Description start_kernelshark.sh Script for starting kernelshark with host and guest trace.dat start_kernelshark_convert.sh Script for starting kernelshark with converted v6 host and guest trace.dat"},{"location":"master/#git","title":"GIT","text":""},{"location":"master/#sigmatek_1","title":"Sigmatek","text":"File Description LRT.git LRT.git SalamanderTools.git SalamanderTools.git u-boot.git u-boot.git ipipe.git ipipe.git xenomai xenomai salamander.git salamander.git"},{"location":"master/#trace-cmd-and-kernelshark_2","title":"trace-cmd and kernelshark","text":"File Description kernel-shark kernel-shark git libtraceevent libtraceevent git libtracefs libtracefs git trace-cmd trace-cmd git"},{"location":"QEMU/nmbridge/","title":"Nmbridge","text":"<ul> <li>Both Laptop and Docking connected</li> <li>Laptop connected, Docking not connected</li> <li>Enable bridge and disable both Laptop and Docking Station</li> <li>Connections</li> <li>Bridge Connections</li> </ul>"},{"location":"general/checklist/","title":"Checklist","text":""},{"location":"general/checklist/#done","title":"Done","text":"<ul> <li>[x] Install Ubuntu 22.04.3 LTS</li> <li>[x] Local Yocto Build: Salamander4 </li> <li>[x] Linux Kernel Configuration with Xenomai</li> <li>[x] Boot Salamander4 in QEMU under native Ubuntu </li> <li>[x] Configured bridge for QEMU</li> <li>[x] Connected LasalClass2 with [Salamander 4]</li> <li>[x] Enabled access to the vsocket for guest</li> <li>[x] trace-cmd and kernelshark worked for Ubuntu VM</li> <li>[x] trace-cmd and kernelshark with Salamander4 as guest </li> <li>[x] Used the Xenomai test suite: latency -T 60` </li> <li>[x] Isolated host CPU for guest</li> <li>[x] Latency got better after isolation</li> </ul>"},{"location":"general/checklist/#missing","title":"Missing","text":"<ul> <li>[ ] Salamander4 \u00fcber QEMU unter native Windows booten</li> <li>[ ] Salamander4 \u00fcber QEMU unter WSL in native Windows booten</li> <li>[ ] Compare Ubuntu, Windows and WSL</li> <li>[ ] Preempt_RT vs Xenomai</li> </ul>"},{"location":"general/components/","title":"Components","text":""},{"location":"general/components/#angabe","title":"Angabe","text":"<p>Virtualisierung eines Echtzeit-Betriebssystems zur Steuerung eines Roboters mit Schwerpunkt auf die Einhaltung der Echtzeit</p>"},{"location":"general/components/#setup","title":"Setup","text":"<p>Bash commands</p>"},{"location":"general/components/#yocto-umgebung","title":"Yocto-Umgebung","text":"<p>Build with Yocto</p>"},{"location":"general/components/#salamander-os","title":"Salamander OS","text":"<p>Skript Michi Build LRT</p>"},{"location":"general/components/#xenomai","title":"Xenomai","text":"<p>Preempt_rt.png Xenomai.png</p>"},{"location":"general/components/#lasal-class","title":"Lasal CLass","text":"<p>Lasal Class 2 english Lasal Class 2 deutsch</p>"},{"location":"general/components/#qemu","title":"QEMU","text":"<p>QEMU documentation</p>"},{"location":"general/components/#pcv-521","title":"PCV-521","text":"<p>PCI-Einsteckmodul, das als Schnittstelle zwischen einem PC und dem VARAN-Bus dient PCV 522.pdf </p> <p>Evaluierung Virtualisierungsplattform (QEMU, Hyper-V, Virtual Box, etc.) - QEMU</p> <ul> <li> <p>HYPER-V</p> </li> <li> <p>Virtual Box </p> </li> <li> <p>WSL</p> </li> </ul>"},{"location":"general/documentations/","title":"Documentations","text":"<ul> <li>Yocto Project</li> <li>QEMU</li> <li>Xenomai</li> <li>Trace-cmd</li> <li>KernelShark</li> <li>Kernelconfig</li> <li>Sigmatek <ul> <li>Build with Yocto</li> <li>Build LRT</li> </ul> </li> </ul>"},{"location":"general/protocol/","title":"Protocol","text":""},{"location":"general/protocol/#dual-boot","title":"Dual Boot","text":"<p>1) Flash SSD by installing etcher 2) Ubuntu and Windows on same machine</p>"},{"location":"general/protocol/#install-salamander4-os","title":"Install Salamander4 OS","text":"<p>1) Install Ubuntu 22.04.3 LTS 2) Do everything in build_with_yocto.md</p>"},{"location":"general/protocol/#configure-ip-addresses","title":"Configure ip addresses","text":"<p>Configure PC to <code>10.10.1.1</code>.  Salamander Gateway set to <code>10.10.1.229</code></p>"},{"location":"general/protocol/#ssh-to-device","title":"SSH to device","text":"<p>Connect to device with <code>ssh -oHostKeyAlgorithms=+ssh-rsa root@10.10.1.229</code> or <code>ssh -p 22 root@192.168.1.x</code> (changes often)</p>"},{"location":"general/protocol/#lasalclass2-to-device","title":"LasalClass2 to device","text":"<p>Connect LasalClass2 with Salamander 4, IP of Salamander4 device</p>"},{"location":"general/protocol/#configure-bridge-for-qemu","title":"Configure bridge for qemu","text":"<p>This setup allows the virtual machines to communicate with the outside network through the Ethernet connection provided by either the laptop or the docking station.</p> name device enp0s31f6 Laptop's Ethernet port enx4cd717733f80 Docking station's Ethernet port <ul> <li>Disable ipv4 and ipv6</li> <li>Enter nmtui</li> <li>Edit Connection and \\&lt;Add&gt;. Select Bridge.</li> <li>Edit and \\&lt;Add&gt; Ethernet.</li> <li>Copy name enx4cd717733f80 (4C:D7:17:73:3F:80) of Wired connection 2</li> <li>Edit Connection of Ethernet connection 1 so that it automatically connects.</li> <li>Activate Connection.</li> <li>Result should look like this and this.</li> <li>More info in nmbridge.md. </li> </ul>"},{"location":"general/protocol/#use-the-xenomai-test-suite","title":"Use the Xenomai test suite","text":"<ul> <li><code>latency -T 60</code> </li> <li><code>clocktest -D -T 60</code> </li> </ul>"},{"location":"general/protocol/#isolate-cpus-on-host-system-ubuntu","title":"Isolate CPUs on host system (Ubuntu)","text":"<p>To isolate CPUs on your host system (Ubuntu), you can add the <code>isolcpus</code> option to the kernel boot configuration. Here are the steps you can follow:</p> <ol> <li>Open the GRUB configuration file with a text editor. You can use the <code>nano</code> editor for this. Execute the following command in your terminal:     <code>bash     sudo nano /etc/default/grub</code></li> <li>Search for the entry <code>GRUB_CMDLINE_LINUX</code> and add <code>isolcpus=0,1,2,3,4</code> (or the corresponding CPU numbers you want to isolate). It should then look like this:     <code>bash     GRUB_CMDLINE_LINUX=\"isolcpus=0,1,2,3,4\"</code></li> <li> <p>Save the changes and close the editor. If you are using <code>nano</code>, you can do this by pressing <code>Ctrl+X</code>, then typing <code>Y</code> to save the changes, and finally pressing <code>Enter</code> to close the editor.</p> </li> <li> <p>Update GRUB with the following command:     <code>bash     sudo update-grub</code></p> </li> <li>Reboot your system for the changes to take effect.</li> </ol> <p>Check with: <code>cat /sys/devices/system/cpu/isolated</code></p> <pre><code>sigma_ibo@pamhal:~$ cat /sys/devices/system/cpu/online \n0-19\nsigma_ibo@pamhal:~$ cat /sys/devices/system/cpu/isolated\n0-4\n</code></pre> <p>Before taskset with <code>qemu_def_4schedstats.sh</code></p> <pre><code>sigma_ibo@pamhal:$ ps -eo pid,psr,comm | grep qemu\n   7295  10 start_qemu.sh\n   7298  17 qemu-system-x86\n</code></pre> <p><code>latency -s -T 60</code></p> <pre><code>root@sigmatek-core2:~# latency -s -T 60\n== Sampling period: 100 us\n== Test mode: periodic user-mode task\n== All results in microseconds\nwarming up...\nRTT|  00:00:01  (periodic user-mode task, 100 us period, priority 99)\nRTH|----lat min|----lat avg|----lat max|-overrun|---msw|---lat best|--lat worst\nRTD|      1.393|      2.908|     21.765|       0|     0|      1.393|     21.765\nRTD|      1.740|      2.933|     12.989|       0|     0|      1.393|     21.765\nRTD|      1.603|      2.954|     22.063|       0|     0|      1.393|     22.063\nRTD|      1.361|      2.988|     22.156|       0|     0|      1.361|     22.156\nRTD|      1.839|      3.059|    119.253|       2|     0|      1.361|    119.253\nRTD|      1.665|      2.955|     47.442|       2|     0|      1.361|    119.253\nRTD|      1.603|      2.869|     12.336|       2|     0|      1.361|    119.253\nRTD|      1.649|      2.953|     17.917|       2|     0|      1.361|    119.253\nRTD|      1.359|      2.990|     15.286|       2|     0|      1.359|    119.253\nRTD|      1.584|      2.959|     15.387|       2|     0|      1.359|    119.253\nRTD|      1.910|      2.997|     84.273|       2|     0|      1.359|    119.253\nRTD|      1.799|      4.133|    112.034|       3|     0|      1.359|    119.253\nRTD|      2.388|      4.397|     27.953|       3|     0|      1.359|    119.253\nRTD|      1.263|      3.331|    374.075|      12|     0|      1.263|    374.075\nRTD|      1.842|      2.900|    154.898|      14|     0|      1.263|    374.075\nRTD|      2.170|      2.876|     14.770|      14|     0|      1.263|    374.075\nRTD|      1.742|      2.952|     23.002|      14|     0|      1.263|    374.075\nRTD|      2.149|      2.903|    207.981|      17|     0|      1.263|    374.075\nRTD|      1.275|      2.884|    234.734|      21|     0|      1.263|    374.075\nRTD|      1.456|      3.018|    190.368|      25|     0|      1.263|    374.075\nRTD|      1.301|      2.855|    255.438|      27|     0|      1.263|    374.075\nRTT|  00:00:22  (periodic user-mode task, 100 us period, priority 99)\nRTH|----lat min|----lat avg|----lat max|-overrun|---msw|---lat best|--lat worst\nRTD|      1.442|      2.847|     16.121|      27|     0|      1.263|    374.075\nRTD|      1.609|      2.886|     54.156|      27|     0|      1.263|    374.075\nRTD|      1.193|      2.838|     13.409|      27|     0|      1.193|    374.075\nRTD|      1.175|      2.835|      9.749|      27|     0|      1.175|    374.075\nRTD|      2.120|      2.833|      9.886|      27|     0|      1.175|    374.075\nRTD|      1.205|      2.830|      9.281|      27|     0|      1.175|    374.075\nRTD|      1.288|      2.836|     15.243|      27|     0|      1.175|    374.075\nRTD|      1.358|      2.865|     24.674|      27|     0|      1.175|    374.075\nRTD|      1.369|      2.852|     95.134|      27|     0|      1.175|    374.075\nRTD|      1.198|      2.853|    122.350|      28|     0|      1.175|    374.075\nRTD|      1.883|      2.861|    119.295|      29|     0|      1.175|    374.075\nRTD|      1.479|      2.840|     16.134|      29|     0|      1.175|    374.075\nRTD|      1.389|      2.853|     13.289|      29|     0|      1.175|    374.075\nRTD|      1.779|      2.887|     22.949|      29|     0|      1.175|    374.075\nRTD|      1.592|      2.847|     82.516|    with\nRTD|      2.293|      2.843|     40.522|      29|     0|      1.175|    374.075\nRTD|      1.207|      2.888|    138.783|      30|     0|      1.175|    374.075\nRTD|      1.405|      2.862|     21.464|      30|     0|      1.175|    374.075\nRTD|      1.218|      2.853|     13.491|      30|     0|      1.175|    374.075\nRTT|  00:00:43  (periodic user-mode task, 100 us period, priority 99)\nRTH|----lat min|----lat avg|----lat max|-overrun|---msw|---lat best|--lat worst\nRTD|      1.269|      2.865|      9.891|      30|     0|      1.175|    374.075\nRTD|      1.343|      2.866|     52.299|      30|     0|      1.175|    374.075\nRTD|      1.303|      2.868|     27.312|      30|     0|      1.175|    374.075\nRTD|      1.544|      2.904|     30.962|      30|     0|      1.175|    374.075\nRTD|      1.310|      2.939|    193.024|      31|     0|      1.175|    374.075\nRTD|      1.416|      2.917|    206.245|      34|     0|      1.175|    374.075\nRTD|      1.384|      2.871|     10.043|      34|     0|      1.175|    374.075\nRTD|      1.462|      2.863|    150.257|      35|     0|      1.175|    374.075\nRTD|      1.570|      2.917|    152.735|      37|     0|&gt; lat worst reduced from 374.075 to 87.379\n      1.175|    374.075\nRTD|      1.626|      2.983|    149.424|      40|     0|      1.175|    374.075\nRTD|      1.247|      2.999|     24.876|      40|     0|      1.175|    374.075\nRTD|      1.637|      2.999|     13.527|      40|     0|      1.175|    374.075\nHSH|--param|--samples-|--average--|---stddev--\nHSS|    min|        59|      1.085|      0.281\nHSS|    avg|    599943|      2.200|      1.460\nHSS|    max|        59|     68.847|     77.257\n---|-----------|-----------|-----------|--------|------|-------------------------\nRTS|      1.175|      2.955|    374.075|      40|     0|    00:01:00/00:01:00\n</code></pre> <p>After taskset on CPU4 with <code>qemu_def_5taskset.sh</code></p> <pre><code>sigma_ibo@pamhal:$ ps -eo pid,psr,comm | grep qemu\n   8752   0 start_qemu.sh\n   8755   4 qemu-system-x86\n</code></pre> <pre><code>root@sigmatek-core2:~# latency -s -T 60\n== Sampling period: 100 us\n== Test mode: periodic user-mode task\n== All results in microseconds\nwarming up...\nRTT|  00:00:01  (periodic user-mode task, 100 us period, priority 99)\nRTH|----lat min|----lat avg|----lat max|-overrun|---msw|---lat best|--lat worst\nRTD|      1.518|      2.994|     60.423|       0|     0|      1.518|     60.423\nRTD|      1.245|      2.787|     50.589|       0|     0|      1.245|     60.423\nRTD|      1.925|      2.845|     82.861|       0|     0|      1.245|     82.861\nRTD|      1.237|      2.963|     83.906|       0|     0|      1.237|     83.906\nRTD|      1.167|      2.777|     19.388|       0|     0|      1.167|     83.906\nRTD|      1.333|      2.779|     33.484|       0|     0|      1.167|     83.906\nRTD|      1.330|      2.921|     31.062|       0|     0|      1.167|     83.906\nRTD|      1.567|      2.777|     15.960|       0|     0|      1.167|     83.906\nRTD|      1.900|      2.902|     17.630|       0|     0|      1.167|     83.906\nRTD|      1.230|      3.012|     55.056|       0|     0|      1.167|     83.906\nRTD|      1.480|      2.822|     50.378|       0|     0|      1.167|     83.906\nRTD|      1.197|      2.770|     16.093|       0|     0|      1.167|     83.906\nRTD|      1.525|      2.879|     79.003|       0|     0|      1.167|     83.906\nRTD|      1.417|      2.788|     39.852|       0|     0|      1.167|     83.906\nRTD|      1.468|      3.857|     60.830|       0|     0|      1.167|     83.906\nRTD|      2.305|      4.212|     55.658|       0|     0|      1.167|     83.906\nRTD|      1.882|      4.158|     43.550|       0|     0|      1.167|     83.906\nRTD|      2.059|      4.144|     49.666|       0|     0|      1.167|     83.906\nRTD|      2.439|      4.157|     87.379|       0|     0|      1.167|     87.379\nRTD|      2.067|      4.178|     73.607|       0|     0|      1.167|     87.379\nRTD|      1.772|      3.334|     54.281|       0|     0|      1.167|     87.379\nRTT|  00:00:22  (periodic user-mode task, 100 us period, priority 99)\nRTH|----lat min|----lat avg|----lat max|-overrun|---msw|---lat best|--lat worst\nRTD|      1.605|      2.794|     57.324|       0|     0|      1.167|     87.379\nRTD|      1.196|      2.763|      7.132|       0|     0|      1.167|     87.379\nRTD|      2.285|      3.849|     51.351|       0|     0|      1.167|     87.379\nRTD|      2.001|      4.221|     56.\n502|       0|     0|      1.167|     87.379\nRTD|      1.507|      2.787|     30.784|       0|     0|      1.167|     87.379\nRTD|      1.277|      2.782|     28.294|       0|     0|      1.167|     87.379\nRTD|      2.193|      2.797|     28.698|       0|     0|      1.167|     87.379\nRTD|      1.899|      2.772|     23.894|       0|     0|      1.167|     87.379\nRTD|      1.325|      2.831|     22.687|       0|     0|      1.167|     87.379\nRTD|      1.195|      2.928|     36.321|       0|     0|      1.167|     87.379\nRTD|      1.644|      2.812|     31.942|       0|     0|      1.167|     87.379\nRTD|      1.544|      2.780|     33.094|       0|     0|      1.167|     87.379\nRTD|      1.650|      2.889|     18.863|       0|     0|      1.167|     87.379\nRTD|      1.271|      2.792|     38.819|       0|     0|      1.167|     87.379\nRTD|      1.902|      2.981|     59.703|       0|     0|      1.167|     87.379\nRTD|      1.802|      3.091|     56.189|       0|     0|      1.167|     87.379\nRTD|      1.304|      2.818|     38.355|       0|     0|      1.167|     87.379\nRTD|      1.571|      2.827|     52.074|       0|     0|      1.167|     87.379\nRTT|  00:00:43  (periodic user-mode task, 100 us period, priority 99)\nRTH|----lat min|----lat avg|----lat max|-overrun|---msw|---lat best|--lat worst\nRTD|      1.465|      2.949|     49.229|       0|     0|      1.167|     87.379\nRTD|      1.765|      2.800|     42.433|       0|     0|      1.167|     87.379\nRTD|      1.220|      2.967|     45.561|       0|     0|      1.167|     87.379\nRTD|      1.874|      3.020|     74.500|       0|     0|      1.167|     87.379\nRTD|      1.304|      2.881|     43.092|       0|     0|      1.167|     87.379\nRTD|      1.231|      2.836|     10.778|       0|     0|      1.167|     87.379\nRTD|      1.901|      2.944|     59.756|       0|     0|      1.167|     87.379\nRTD|      1.316|      2.820|     32.074|       0|     0|      1.167|     87.379\nRTD|      1.235|      2.896|     55.582|       0|     0|      1.167|     87.379\nRTD|      1.171|      2.824|     68.296|       0|     0|      1.167|     87.379\nRTD|      1.384|      2.832|     49.778|       0|     0|      1.167|     87.379\nRTD|      1.935|      2.770|     47.123|       0|     0|      1.167|     87.379\nRTD|      1.154|      2.821|     41.895|       0|     0|      1.154|     87.379\nRTD|      1.315|      2.803|     36.721|       0|     0|      1.154|     87.379\nRTD|      1.881|      2.983|     76.927|       0|     0|      1.154|     87.379\nRTD|      1.619|      2.999|     68.384|       0|     0|      1.154|     87.379\nRTD|      1.388|      2.797|     58.660|       0|     0|      1.154|     87.379\nHSH|--param|--samples-|--average--|---stddev--\nHSS|    min|        59|      1.119|      0.326\nHSS|    avg|    599984|      2.428|      1.112\nHSS|    max|        59|     46.746|     19.462\n---|-----------|-----------|-----------|--------|------|-------------------------\nRTS|      1.154|      3.078|     87.379|       0|     0|    00:01:00/00:01:00\n</code></pre> <p>lat worst reduced from 374.075 to 87.379</p>"},{"location":"general/protocol/#trace-cmd-problems","title":"trace-cmd Problems","text":"<p>Rostedt Tutorial <code>sudo trace-cmd record -e kvm:kvm_entry -e kvm:kvm_exit -A @3:823 --name Salamander4 -e all</code></p>"},{"location":"general/protocol/#2-problems","title":"2 Problems","text":"<ol> <li> <p>\"Failed to negotiate timestamps synchronization with the host\" timestamp_error.png</p> </li> <li> <p>\"Cannot find host / guest tracing into the loaded streams\" kvm_combo_error.png</p> </li> </ol> <p>(These were solved in Ubuntu 22.04 VM)</p>"},{"location":"general/protocol/#what-i-did","title":"What I did","text":"<ol> <li> <ul> <li>enabled         - CONFIG_VSOCKETS=y         - CONFIG_VHOST_VSOCK=y         - CONFIG_VIRTIO_VSOCKETS=y         - CONFIG_VIRTIO_VSOCKETS_COMMON=y         - CONFIG_VSOCKETS_DIAG=y         - CONFIG_VSOCKETS_LOOPBACK=y         - CONFIG_TRACING=y         - CONFIG_FTRACE=y         - CONFIG_FUNCTION_TRACER=y         - CONFIG_FUNCTION_GRAPH_TRACER=y         - CONFIG_DYNAMIC_FTRACE=y         - CONFIG_DYNAMIC_FTRACE_WITH_REGS=y         - CONFIG_DYNAMIC_FTRACE_WITH_DIRECT_CALLS=y         - CONFIG_DYNAMIC_FTRACE_WITH_ARGS=y         - CONFIG_SCHED_TRACER=y         - CONFIG_FTRACE_SYSCALLS=y         - CONFIG_TRACER_SNAPSHOT=y         - CONFIG_KPROBE_EVENTS=y         - CONFIG_UPROBE_EVENTS=y         - CONFIG_BPF_EVENTS=y         - CONFIG_DYNAMIC_EVENTS=y         - CONFIG_PROBE_EVENTS=y         - CONFIG_SYNTH_EVENTS=y         - CONFIG_HIST_TRIGGERS=y  </li> </ul> </li> <li>checked via zcat /proc/config.gz if everything landed on the kernel</li> <li>changed clocksource in guest from kvm-clock to tsc in <code>/sys/devices/system/clocksource/clocksource0</code> </li> <li>Did not check Code yet </li> <li>Nothing yet, probably hand in hand with 1.</li> </ol>"},{"location":"general/protocol/#solution-to-trace-cmd-problems","title":"Solution to trace-cmd Problems","text":"<p>The problem was the trace-cmd version. Set both host and guest to v3.2.0 by copying the files from host to guest:</p> <pre><code>scp /usr/local/bin/trace-cmd root@\"$ip_address\":/usr/bin\nscp /usr/local/lib64/libtracefs.so.1 root@\"$ip_address\":/lib64\nscp /usr/local/lib64/libtraceevent.so.1 root@\"$ip_address\":/lib64\n</code></pre> <p>Now, trace-cmd version 3.2.0 is active and tracing the guest finally works with <code>trace-cmd agent</code> on the guest.</p> <p>Using kernelshark with <code>kernelshark trace.dat -a trace-Salamander4.dat</code> or simply <code>./start_kernelshark.sh</code>, we get the expected visualization. Events of the guest happen between kvm_entry and kvm_exit of the host.</p>"},{"location":"general/protocol/#ubuntu-vm-on-virtual-machine-manager","title":"Ubuntu VM on virtual machine manager","text":"<p>After giving the VM access to the vsocket, and installing trace-cmd along with dependancies, run <code>trace-cmd agent</code>. Now, the guest is able to negotiate with host about timestamp synchronization. After running <code>./start_kernelshark.sh</code>, we can view KVM Combo plots</p>   [Link to top](#)"},{"location":"general/timeline/","title":"Timeline","text":"Date Log 08.02.2024 Dual boot Windows and Ubuntu 09.02.2024 Booted Salamander 4 on Ubuntu 12.02.2024 Connected Salamander 4 with SSH 13.02.2024 Connected Salamander 4 with Lasal Class 2 (Christian) after configuring bridge 14.02.2024 Installed Windows VM on Ubuntu, installed Lasal Class 2 on Windows VM, connected with Salamander 4 15.02.2024 Run pumpcontrol example successfully 16.02.2024 Increased virtual CPU in Windows 19.02.2024 Xenomai-system-tools 20.02.2024 KernelShark 21.02.2024 Local Yocto Build finally done 22.02.2024 trace-cmd agent on guest communicates with host 23.02.2024 Teammeeting and Germany 26.02.2024 after_bitbake, kernelshark, paths 27.02.2024 Isolate CPUs on host system and let guest run on it 28.02.2024 Host-Guest timestamp sync works with VM, can view KVM Combo plots, does still not work with Salamander4 29.02.2024 useful_links and search_for_x.py 01.03.2024 checklist.md, nmbridge.md, understand nmbridge 04.03.2024 Finally: Negotiated kvm time sync protocol with guest Salamander4 05.03.2024 lat worst reduced from 374.075 to 87.379"},{"location":"sigmatek/bash_commands/","title":"Bash commands","text":""},{"location":"sigmatek/bash_commands/#essential-packages","title":"Essential packages","text":"<p>sudo apt install gcc g++ libelf-dev libssl-dev make pkg-config gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev python3-subunit mesa-common-dev zstd liblz4-tool file locales libacl1</p>"},{"location":"sigmatek/bash_commands/#fetch-script-for-yocto","title":"Fetch script for yocto","text":"<pre><code>chmod +x fetchsdk.sh  \n./fetchsdk.sh -h  \n./fetchsdk.sh Salamander4_sigmatek-core2  \nchmod +x sigmatek-salamander-glibc-x86_64-salamander-image-core2-64-toolchain-09.07.119_T1701.sh  \n./sigmatek-salamander-glibc-x86_64-salamander-image-core2-64-toolchain-09.07.119_T1701.sh  \n</code></pre> <p>Each time you wish to use the SDK in a new shell session, you need to source the environment setup script e.g. . /opt/salamander/sigmatek-core2/09.07.119_T1701/environment-setup-core2-64-sigmatek-linux . /opt/salamander/sigmatek-core2/09.07.119_T1701/environment-setup-x86-sigmatekmllib32-linux  </p>"},{"location":"sigmatek/bash_commands/#mount-storage","title":"Mount storage","text":"<pre><code>sudo blkid  \nsudo nano /etc/fstab  \nsudo mount -a  \nsudo chown -R sigma_ibo /home/sigma_ibo/Develop  \ndf -h ~/Develop  \n</code></pre>"},{"location":"sigmatek/bash_commands/#setup","title":"Setup","text":"<pre><code>mkdir ~/Develop  \nmkdir ~/Develop/docker  \nmkdir ~/Develop/jenkins  \nmkdir ~/Develop/jenkins/home  \ncd ~/Develop/jenkins/home  \nssh-keygen -t ed25519 -C \"halil.pamuk@sigmatek.at\"  \ncat ~/.ssh/id_ed25519.pub  \nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINJ1I5EULqfk9w3uyyWgkWZmrLur+0v6mOEWk2c6GblE halil.pamuk@sigmatek.at  \ngit clone git@git.sigmatek.at:SIG_SW_BS/salamander/LRT.git  \ngit clone git@git.sigmatek.at:SIG_SW_BS/salamander/SalamanderTools.git  \ngit clone git@git.sigmatek.at:SIG_SW_BS/salamander/u-boot.git  \nmkdir kernel  &amp;&amp; cd kernel\ngit clone git@git.sigmatek.at:SIG_SW_BS/salamander/ipipe.git  \ngit clone git@git.sigmatek.at:SIG_SW_BS/salamander/xenomai  \n</code></pre>"},{"location":"sigmatek/bash_commands/#yocto-example","title":"Yocto example","text":"<p>Minimal Yocto Linux image</p>"},{"location":"sigmatek/build_LRT/","title":"Build LRT - Salamander 3 Terminal","text":""},{"location":"sigmatek/build_LRT/#set-sdk","title":"Set SDK","text":"<pre><code>. /opt/poky/1.6.2/environment-setup-cortexa9-vfp-neon-poky-linux-gnueabi \n</code></pre>"},{"location":"sigmatek/build_LRT/#open-2-terminals","title":"Open 2 terminals","text":""},{"location":"sigmatek/build_LRT/#terminal-1-ssh-remote-connection","title":"Terminal 1: SSH Remote Connection","text":"<ol> <li>Connect to terminal device with <code>ssh -oHostKeyAlgorithms=+ssh-rsa root@10.10.116.13</code></li> <li>Stop init.d with <code>/etc/init.d/lrt stop</code> or <code>killall -9 LRT*</code></li> <li>Do Terminal 2</li> <li>Start init.d with <code>/etc/init.d/lrt start</code> or <code>./LRTConfig.exe</code></li> </ol>"},{"location":"sigmatek/build_LRT/#terminal-2-code-make-and-scp","title":"Terminal 2: Code, make and scp","text":"<ol> <li>Navigate to  <code>~/Develop/jenkins/home/LRT</code>.</li> <li>Open VS Code with  <code>. code</code> and edit LRT</li> <li>Run <code>make</code> when finished</li> <li>Copy contents to terminal device after stopping init.d with <code>scp -oHostKeyAlgorithms=+ssh-rsa build-Linux-arm-S3.meson/*/LRT*.exe root@10.10.116.13:</code></li> </ol>"},{"location":"sigmatek/build_LRT/#sigmatek-documentation","title":"Sigmatek Documentation","text":"<p>Build LRT</p>"},{"location":"sigmatek/build_with_yocto/","title":"Build with Yocto","text":""},{"location":"sigmatek/build_with_yocto/#clone-the-repo","title":"Clone the repo","text":"<p>The first step is to clone the yocto4/salamander git repo: NOTE: In order to clone all dependent repositories, clone the repo with \u2013recurse-submodules.</p> <pre><code>git clone --recurse-submodules git@git.sigmatek.at:SIG_SW_BS/salamander/yocto4/salamander.git\n</code></pre>"},{"location":"sigmatek/build_with_yocto/#initialize","title":"Initialize","text":"<p>Now you should be left with a subdirectory called salamander.</p> <p>Note: It is a good idea to do the actual build inside a subdirectory named after the specific architecture (e.g. aarch64). This way the directory structure can be used for multible builds without losing track of the overall picture.</p> <pre><code>cd salamander\nmkdir core2 &amp;&amp; cd core2\n</code></pre> <p>Next we need to initialize the build environment by calling the init.sh script. Example for Salamander:</p> <pre><code>../init.sh -b build -m sigmatek-core2 -d salamander\n</code></pre> <p>Call the init.sh script without parameters to get a full list of options, like how to build Salamander. You can get a full list of options by calling the script without any parameters. There is also stated what to put after -m option for building an arm version. The -b option defines the build output directory (which will be created by the script if it does not exist).</p>"},{"location":"sigmatek/build_with_yocto/#build-image","title":"Build image","text":"<p>Now you can run bitbake for building a gecko-image or salamander-image:</p> <p>To continue the build after an error, start bitbake with -k or \u2013continue.</p> <pre><code>bitbake salamander-image -k\n</code></pre> <p>This process can take up to several hours. So you better are not in a hurry.</p> <p>Afterwards you will find a .lbi-file in the deploy-subdir <code>~/Develop/jenkins/home/buildwithyocto/salamander/core2/build/tmp/deploy/resources/images/sigmatek-core2/</code></p> <p>Hopefully everything goes according to plan. If you encounter a build problem and you punch through it, please write some trouble shooting for this ;-)</p>"},{"location":"sigmatek/build_with_yocto/#tipps","title":"Tipps","text":""},{"location":"sigmatek/build_with_yocto/#using-less-cores","title":"Using less cores","text":"<p>If you build locally, you may run into the problem that you system is loaded heavily by the yocto build. In fact the load can be so heavy that working with your system on other task can become very slow due to lack of responsiveness.</p> <p>One solution is to tell yocto to use less threads for the build by adding the following line to ~/some/path/build/conf/local.conf</p> <pre><code>BB_NUMBER_THREADS = \"${@oe.utils.cpu_count()//2}\"\n</code></pre> <p>In this example we set the number of threads to half the number of cpu cores on the system. In addition one can also set the number of parallel compilations done by make:</p> <pre><code>PARALLEL_MAKE = \"-j${@oe.utils.cpu_count()//2}\"\n</code></pre>"},{"location":"sigmatek/build_with_yocto/#add-other-computers-to-the-mix","title":"Add other computers to the mix","text":"<p>In <code>buildconfs/default.conf</code></p> <pre><code>INHERIT += \"icecc\"\nICECC_PARALLEL_MAKE = \"-j 88\"\nICECC_CARET_WORKAROUND = \"1\"\nICECC_DISABLED ??= \"0\"\nICECC_RECIPE_DISABLE = \"\"\n</code></pre> <p>Patch</p> <pre><code>cat &lt;&lt;EOF &gt; meta-virtualization/recipes-core/meta/container-dummy-provides.bb\nDUMMYARCH = \"container-dummy-provides\"\nDUMMYPROVIDES = \"\\\n   /bin/sh \\\n   /usr/bin/env \\\n\"\nLICENSE = \"MIT\"\nEOF\n</code></pre>"},{"location":"sigmatek/build_with_yocto/#using-jenkins-as-download-mirror","title":"Using jenkins as download mirror","text":"<p>Sometimes it happens that servers that hold repos necessary for builds are down. In this case it is possible to use the jenkins as a download mirror.</p> <p>For this you simply add the following two lines to one of the config files, e.g. site.conf</p> <pre><code>SOURCE_MIRROR_URL ?= \"http://osjenkins.lhau.sigaut.org:8080/userContent/downloads/\"\nINHERIT += \"own-mirrors\"\n</code></pre>"},{"location":"sigmatek/build_with_yocto/#sigmatek-documentation","title":"Sigmatek Documentation","text":"<p>Build with Yocto</p>"},{"location":"trace-cmd/LTS/kernel-shark-kernelshark-v2.1.0/","title":"Index","text":"<p>KernelShark is a front-end reader of tracing data.</p> <p>The official repository is here:     https://git.kernel.org/pub/scm/utils/trace-cmd/kernel-shark.git</p>"},{"location":"trace-cmd/LTS/kernel-shark-kernelshark-v2.1.0/#third-party-software","title":"Third Party Software:","text":"<p>KernelShark has the following external dependencies:   Cmake, Json-C, OpenGL/Glut, Qt5Base, libtraceevent, libtracefs, trace-cmd   and FreeSans font.</p> <ol> <li>In order to install the packages on Ubuntu do the following:     sudo apt-get install build-essential git cmake libjson-c-dev -y     sudo apt-get install freeglut3-dev libxmu-dev libxi-dev -y     sudo apt-get install flex bison -y     sudo apt-get install fonts-freefont-ttf -y     sudo apt-get install qtbase5-dev -y</li> </ol> <p>1.1 If you want to be able to generate Doxygen documentation:     sudo apt-get install graphviz doxygen-gui -y</p> <ol> <li>In order to install the packages on Fedora, as root do the following:     sudo dnf install gcc gcc-c++ git cmake json-c-devel -y     sudo dnf install freeglut-devel redhat-rpm-config -y     sudo dnf install flex bison -y     sudo dnf install gnu-free-sans-fonts -y     sudo dnf install qt5-qtbase-devel -y</li> </ol> <p>2.1 If you want to be able to generate Doxygen documentation:     sudo dnf install graphviz doxygen -y</p> <ol> <li> <p>In order to install the final dependencies do the following:     git clone https://git.kernel.org/pub/scm/libs/libtrace/libtraceevent.git/     cd libtraceevent     make     sudo make install</p> <p>git clone https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git/ cd libtracefs make sudo make install</p> <p>git clone https://git.kernel.org/pub/scm/utils/trace-cmd/trace-cmd.git/ cd trace-cmd make make libs sudo make install sudo make install_libs</p> </li> </ol>"},{"location":"trace-cmd/LTS/kernel-shark-kernelshark-v2.1.0/#building","title":"Building:","text":"<ol> <li> <p>Building and install KernelShark GUI:</p> <p>cd kernel-shark/build cmake ../ make sudo ./install_gui.sh</p> </li> </ol> <p>1.1 In order to create a Doxygen documentation add -D_DOXYGEN_DOC=1 as a CMake Command-Line option (see the example below).</p> <p>1.2 KernelShark has multiple build types. By default, the build type is RelWithDebInfo, which will build a release candidate with debug information. To change the type, pass in the option CMAKE_BUILD_TYPE= (see the example below). <pre><code>cmake -DCMAKE_BUILD_TYPE=Debug           - for \"-g\" option\ncmake -DCMAKE_BUILD_TYPE=Release         - for \"-O3\" option\ncmake -DCMAKE_BUILD_TYPE=RelWithDebInfo  - for \"-g -O2\" option (default)\ncmake -DCMAKE_BUILD_TYPE=MinSizeRel      - for \"-Os\" option\n</code></pre> <p>1.3 In addition to the standard CMake build types (Debug, Release, RelWithDebInfo, MinSizeRel) KernelShark supports a \"Package\" build type. By default this build type adds the \"-O3\" compiler flag. Package maintainers can chose their own compiler flags by providing the corresponding CMAKE_XXXX_FLAGS_PACKAGE Command-Line options (see the example below).</p> <p>-- Note that when built as a \"Package\" the RPATH-s of the executables are set directly to _INSTALL_PREFIX/lib/kernelshark/</p> <p>1.4 After building the code \"kernel-shark/lib\" will contain all libraries and \"kernel-shark/bin\" will contain all executables.</p> <p>1.5 Use the script \"cmake_clean.sh\" if you want to delete all already compiled objects and all files generated by CMake.</p> <pre><code>cd kernel-shark/build\n./cmake_clean.sh\n</code></pre> <p>1.6 By default, installation prefix is \"/usr/local\". It can be changed using -D_INSTALL_PREFIX= as a CMake Command-Line option (see the example below).</p> <ol> <li> <p>To install libkshark-devel do:     sudo ./install_libkshark-devel.sh</p> <p>This will install all components needed in order to use \"libkshark\". Note that if you just use:</p> <p>sudo make install</p> <p>this will install both the GUI and libkshark-devel.</p> </li> <li> <p>In order to uninstall KernelShark (no matter what has been installed) do:     cd kernel-shark/build     ./cmake_uninstall.sh</p> </li> </ol> <p>CMake examples:</p> <pre><code>cmake -D_DOXYGEN_DOC=1 -D_INSTALL_PREFIX=/usr ../\n\ncmake -DCMAKE_BUILD_TYPE=Package -DCMAKE_C_FLAGS_PACKAGE=\"-O3 -pedantic\"  ../\n</code></pre>"},{"location":"trace-cmd/LTS/kernel-shark-kernelshark-v2.1.0/#contributions","title":"Contributions:","text":"<ol> <li>For questions about the use of the library, please send email to:    linux-trace-users@vger.kernel.org</li> </ol> <p>Subscribe: http://vger.kernel.org/vger-lists.html#linux-trace-users    Archives: https://lore.kernel.org/linux-trace-users/</p> <p>3.1 For contributions to development, please send patches to:     linux-trace-devel@vger.kernel.org</p> <p>Subscribe: http://vger.kernel.org/vger-lists.html#linux-trace-devel    Archives: https://lore.kernel.org/linux-trace-devel/</p> <p>3.2 Note, this project follows the style of submitting patches as described by the Linux kernel.</p> <pre><code>https://www.kernel.org/doc/html/v5.4/process/submitting-patches.html\n</code></pre>"},{"location":"trace-cmd/LTS/libtraceevent-1.8.2/","title":"Index","text":"<p>The official repository is here:</p> <p>https://git.kernel.org/pub/scm/libs/libtrace/libtraceevent.git/</p> <p>To build:</p> <pre><code>make;\nsudo make install;\n</code></pre> <p>To build in a specific directory outside of the source directory:</p> <pre><code>make O=/path/to/build; sudo make O=/path/to/build\n</code></pre> <p>Note that the path needs to exist before building.</p> <p>To set the install path (the expected final location):</p> <pre><code>make prefix=/usr; sudo make O=/path/to/build\n</code></pre> <p>To install in a directory not for the local system (for use to move to another machine):</p> <pre><code>make DESTDIR=/path/to/dest/ install\n</code></pre> <p>Note, if you have write permission to the DESTDIR, then there is   no reason to use sudo or switch to root.</p> <p>Note, DESTDIR must end with '/', otherwise the files will be appended   to the path, which will most likely have unwanted results.</p> <p>Contributions:</p> <p>For questions about the use of the library, please send email to:</p> <pre><code>linux-trace-users@vger.kernel.org\n\nSubscribe: http://vger.kernel.org/vger-lists.html#linux-trace-users\nArchives: https://lore.kernel.org/linux-trace-users/\n</code></pre> <p>For contributions to development, please send patches to:</p> <pre><code>linux-trace-devel@vger.kernel.org\n\nSubscribe: http://vger.kernel.org/vger-lists.html#linux-trace-devel\nArchives: https://lore.kernel.org/linux-trace-devel/\n</code></pre> <p>Note, this project follows the style of submitting patches as described   by the Linux kernel.</p> <pre><code> https://www.kernel.org/doc/html/v5.4/process/submitting-patches.html\n</code></pre>"},{"location":"trace-cmd/LTS/libtracefs-1.8.0/","title":"Index","text":"<p>The official repository is here:</p> <p>https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git/</p> <p>This repository requires libtraceevent to be installed:</p> <p>https://git.kernel.org/pub/scm/libs/libtrace/libtraceevent.git/</p> <p>To build:</p> <pre><code>make;\nsudo make install;\n</code></pre> <p>To build in a specific directory outside of the source directory:</p> <pre><code>make O=/path/to/build; sudo make O=/path/to/build\n</code></pre> <p>Note that the path needs to exist before building.</p> <p>To set the install path (the expected final location):</p> <pre><code>make prefix=/usr; sudo make O=/path/to/build\n</code></pre> <p>To install in a directory not for the local system (for use to move to another machine):</p> <pre><code>make DESTDIR=/path/to/dest/ install\n</code></pre> <p>Note, if you have write permission to the DESTDIR, then there is   no reason to use sudo or switch to root.</p> <p>Note, DESTDIR must end with '/', otherwise the files will be appended   to the path, which will most likely have unwanted results.</p> <p>Contributions:</p> <p>For questions about the use of the library, please send email to:</p> <pre><code>linux-trace-users@vger.kernel.org\n\nSubscribe: http://vger.kernel.org/vger-lists.html#linux-trace-users\nArchives: https://lore.kernel.org/linux-trace-users/\n</code></pre> <p>For contributions to development, please send patches to:</p> <pre><code>linux-trace-devel@vger.kernel.org\n\nSubscribe: http://vger.kernel.org/vger-lists.html#linux-trace-devel\nArchives: https://lore.kernel.org/linux-trace-devel/\n</code></pre> <p>Note, this project follows the style of submitting patches as described   by the Linux kernel.</p> <pre><code> https://www.kernel.org/doc/html/v5.4/process/submitting-patches.html\n</code></pre>"},{"location":"trace-cmd/LTS/trace-cmd-libtracecmd-1.5.1/","title":"Index","text":"<p>For more information on contributing please see: https://www.trace-cmd.org</p> <p>Note: The official repositiory for trace-cmd and KernelShark is here:</p> <p>git://git.kernel.org/pub/scm/utils/trace-cmd/trace-cmd.git</p> <p>For bug reports and issues, please file it here:</p> <p>https://bugzilla.kernel.org/buglist.cgi?component=Trace-cmd%2FKernelshark&amp;product=Tools&amp;resolution=---</p> <p>These files make up the code that create the trace-cmd programs. This includes the GUI interface application kernelshark as well as trace-graph and trace-view.</p> <p>These files also make up the code to create the libtracecmd library.</p> <p>The applications are licensed under the GNU General Public License 2.0 (see COPYING) and the libraries are licensed under the GNU Lesser General Public License 2.1 (See COPYING.LIB).</p> <p>BUILDING:</p> <p>In order to install build dependencies on Debian / Ubuntu do the following:     sudo apt-get install build-essential git pkg-config -y     sudo apt-get install libtracefs-dev libtraceevent-dev -y</p> <p>In order to install build dependencies on Fedora, as root do the following:     dnf install gcc make git pkg-config -y     dnf install libtracefs-devel libtraceevent-devel -y</p> <p>In case your distribution does not have the required libtracefs and libtraceevent libraries, build and install them manually:</p> <pre><code>git clone https://git.kernel.org/pub/scm/libs/libtrace/libtraceevent.git/\ncd libtraceevent\nmake\nsudo make install\n\ngit clone https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git/\ncd libtracefs\nmake\nsudo make install\n</code></pre> <p>To make trace-cmd     make</p> <p>To make the gui     make gui</p> <p>INSTALL:</p> <p>To install trace-cmd     make install</p> <p>To install the gui     make install_gui</p> <p>To install libtracecmd libraries     make install_libs</p> <p>Note: The default install is relative to /usr/local     The default install directory is /usr/local/bin     The default plugin directory is /usr/local/lib/trace-cmd/plugins</p> <p>To change the default, you can set 'prefix', eg mkdir $HOME/test-trace make prefix=$HOME/test-trace make prefix=$HOME/test-trace install</p>"},{"location":"trace-cmd/LTS/trace-cmd-v3.2/","title":"Index","text":"<p>For more information on contributing please see: https://www.trace-cmd.org</p> <p>Note: The official repositiory for trace-cmd and KernelShark is here:</p> <p>git://git.kernel.org/pub/scm/utils/trace-cmd/trace-cmd.git</p> <p>For bug reports and issues, please file it here:</p> <p>https://bugzilla.kernel.org/buglist.cgi?component=Trace-cmd%2FKernelshark&amp;product=Tools&amp;resolution=---</p> <p>These files make up the code that create the trace-cmd programs. This includes the GUI interface application kernelshark as well as trace-graph and trace-view.</p> <p>These files also make up the code to create the libtracecmd library.</p> <p>The applications are licensed under the GNU General Public License 2.0 (see COPYING) and the libraries are licensed under the GNU Lesser General Public License 2.1 (See COPYING.LIB).</p> <p>BUILDING:</p> <p>In order to install build dependencies on Debian / Ubuntu do the following:     sudo apt-get install build-essential git pkg-config -y     sudo apt-get install libtracefs-dev libtraceevent-dev -y</p> <p>In order to install build dependencies on Fedora, as root do the following:     dnf install gcc make git pkg-config -y     dnf install libtracefs-devel libtraceevent-devel -y</p> <p>In case your distribution does not have the required libtracefs and libtraceevent libraries, build and install them manually:</p> <pre><code>git clone https://git.kernel.org/pub/scm/libs/libtrace/libtraceevent.git/\ncd libtraceevent\nmake\nsudo make install\n\ngit clone https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git/\ncd libtracefs\nmake\nsudo make install\n</code></pre> <p>To make trace-cmd     make</p> <p>To make the gui     make gui</p> <p>INSTALL:</p> <p>To install trace-cmd     make install</p> <p>To install the gui     make install_gui</p> <p>To install libtracecmd libraries     make install_libs</p> <p>Note: The default install is relative to /usr/local     The default install directory is /usr/local/bin     The default plugin directory is /usr/local/lib/trace-cmd/plugins</p> <p>To change the default, you can set 'prefix', eg mkdir $HOME/test-trace make prefix=$HOME/test-trace make prefix=$HOME/test-trace install</p>"},{"location":"trace-cmd/analysis/info/","title":"Info","text":""},{"location":"trace-cmd/analysis/info/#tools","title":"Tools","text":"<p>trace-cmd.org kernelshark.org </p>"},{"location":"trace-cmd/analysis/info/#documentation","title":"Documentation","text":"<p>trace-cmd/documentation kernelshark/documentation</p>"},{"location":"trace-cmd/analysis/info/#all-information-from-lts-readme","title":"All information from LTS README","text":"<ul> <li>trace-cmd</li> <li>kernel-shark</li> <li>libtracefs</li> <li>libtraceevent</li> <li>libtracecmd</li> </ul>"},{"location":"trace-cmd/analysis/info/#usage-trace-cmd","title":"Usage trace-cmd","text":"<p>trace-cmd [COMMAND] ...</p> Command Description record Record a trace into a trace.dat file set Set a ftrace configuration parameter start Start tracing without recording into a file extract Extract a trace from the kernel stop Stop the kernel from recording trace data restart Restart the kernel trace data recording show Show the contents of the kernel tracing buffer reset Disable all kernel tracing and clear the trace buffers clear Clear the trace buffers report Read out the trace stored in a trace.dat file stream Start tracing and read the output directly profile Start profiling and read the output directly hist Show a histogram of the trace.dat information stat Show the status of the running tracing (ftrace) system split Parse a trace.dat file into smaller file(s) options List the plugin options available for trace-cmd report listen Listen on a network socket for trace clients agent Listen on a vsocket for trace clients setup-guest Create FIFOs for tracing guest VMs list List the available events, plugins, or options restore Restore a crashed record snapshot Take a snapshot of the running trace stack Output, enable, or disable kernel stack tracing check-events Parse trace event formats dump Read out the metadata from a trace file attach Attach a host and guest trace.dat file convert Convert a trace file to a different version"},{"location":"trace-cmd/analysis/info/#usage-kernelshark","title":"Usage kernelshark","text":"<pre><code>kernelshark # host only  \nkernelshark trace.dat -a trace-Salamander4.dat #host with guest\n</code></pre>"},{"location":"trace-cmd/analysis/kernelshark/","title":"Kernelshark","text":""},{"location":"trace-cmd/analysis/kernelshark/#use-kernelshark","title":"Use kernelshark","text":"<p>File trace.dat contains no data</p> <p>Host only</p> <pre><code>sudo trace-cmd record -e kvm:kvm_entry -e kvm:kvm_exit\n</code></pre> <p>Host and Guest track kvm, sched, irq, irq_vectors</p> <pre><code>sudo trace-cmd record -e kvm -e sched -e irq -e irq_vectors -A @3:823 --name Salamander4 -e all ssh root@192.168.51 'ls -lR . &gt; /dev/null'\n</code></pre> <p>Host and Guest track kvm_entry and kvm_exit with ssh to guest</p> <pre><code>sudo trace-cmd record -e kvm:kvm_entry -e kvm:kvm_exit -A @3:823 --name Salamander4 -e all ssh root@192.168.1.7851 'ls -lR . &gt; /dev/null'\n</code></pre> <p>Host and Guest track kvm_entry and kvm_exit</p> <pre><code>sudo trace-cmd record -e kvm:kvm_entry -e kvm:kvm_exit -A @3:823 --name Salamander4 -e all\n</code></pre> <p>After trace-cmd raw</p> <pre><code>trace-cmd report\n</code></pre> <p>After trace-cmd kernelshark</p> <pre><code>sudo trace-cmd convert -i trace.dat -o trace_v6.dat --file-version 6 --compression none\nsudo rm trace.dat\nmv trace_v6.dat trace.dat\nsudo trace-cmd convert -i trace-Salamander4.dat -o trace_v6.dat --file-version 6 --compression none\nsudo rm trace-Salamander4.dat\nmv trace_v6.dat trace-Salamander4.dat\nkernelshark\n</code></pre>"},{"location":"workflow/most_popular_paths/","title":"Most popular paths","text":""},{"location":"workflow/most_popular_paths/#qemu_defsh","title":"qemu_def.sh","text":"<pre><code>cd /home/sigma_ibo/Develop/Yocto_local/salamander/salamander-core2/build/tmp/deploy/qemu/sigmatek-core2/salamander-image\n</code></pre>"},{"location":"workflow/most_popular_paths/#bitbake","title":"bitbake","text":"<pre><code>cd /home/sigma_ibo/Develop/Yocto_local/salamander/salamander-core2\n../init.sh -b build -m sigmatek-core2 -d salamander\nbitbake salamander-image -k\n</code></pre>"},{"location":"workflow/most_popular_paths/#trace-cmd-analysis","title":"trace-cmd analysis","text":"<pre><code>cd /home/sigma_ibo/Desktop/Masterarbeit/documentation/trace-cmd/analysis/\n</code></pre>"},{"location":"workflow/useful/","title":"Useful","text":""},{"location":"workflow/useful/#symbolic-link-to-windows-folder","title":"Symbolic Link to Windows Folder","text":"<p><code>ln -s /media/sigma_ibo/Windows/Dokumente\\ und\\ Einstellungen/Pamibr/Desktop/Masterarbeit/ /home/sigma_ibo/Desktop/</code> Symbolic Link to Windows Folder</p>"},{"location":"workflow/useful/#mount-windows-partition-desktop","title":"Mount Windows partition Desktop","text":"<ul> <li><code>sudo nano /etc/fstab</code> </li> <li>At the end of the file, add: UUID=0E58A36658A34B73 /home/sigma_ibo/Desktop ntfs defaults 0 0, it looks like  this </li> <li>reboot</li> </ul>"},{"location":"workflow/useful/#how-to-extract-unzip-tarxz-file","title":"How to Extract (Unzip) tar.xz File","text":"<p>How to Extract (Unzip) tar.xz File</p>"},{"location":"workflow/useful/#launch-programs-after-startup","title":"Launch programs after startup","text":"<ul> <li><code>nano /home/sigma_ibo/startup.sh</code></li> <li><code>chmod +x /home/sigma_ibo/startup.sh</code></li> <li>File: startup.sh </li> <li>Configure Startup Apps</li> </ul>"},{"location":"workflow/useful/#install-gnome","title":"Install gnome","text":"<p><code>sudo apt install gnome-shell-extension-ubuntu-dock</code></p>"},{"location":"workflow/useful/#desktop-folders-not-visible","title":"Desktop folders not visible","text":"<p><code>sudo apt install ubuntu-desktop</code></p>"},{"location":"workflow/useful/#windows-11-on-qemu-and-display-settings","title":"Windows 11 on QEMU and display settings","text":"<p>Install Windows 11 in KVM on Ubuntu 22.04 Execute virtio-win-guest-tools in VM Windows 10 VM shows 100% CPU QEMU settings: QEMU, XML win11 Windows 10 VM Settings</p>"},{"location":"workflow/useful/#remove-keyring-from-edge","title":"Remove keyring from Edge","text":"<p>To stop being prompted to unlock the \u2018default\u2019 keyring on boot, set a blank password for the keyring. - Open the utility \u201cPasswords &amp; Keys\u201d. If not installed: <code>sudo apt-get install seahorse</code> - Right-click the \u201cLogin\u201d folder and select \u201cChange Password\u201d. - Enter your old password and leave the new password blank.</p>"},{"location":"workflow/useful/#see-how-many-cores-you-have","title":"See how many cores you have","text":"<p><code>nproc</code> or <code>cat /proc/cpuinfo | grep processor | wc -l</code> or <code>cat /proc/cpuinfo | grep 'core id'</code> or <code>lscpu</code></p>"},{"location":"workflow/useful/#untrack-files-to-be-ignored-named-documentationtest-in-git","title":"Untrack files to be ignored named \u201cdocumentation/test\u201d in git:","text":"<p><code>git rm --cached documentation/test</code> How To Fix Gitignore Not Working</p>"},{"location":"workflow/useful/#start_qemush-from-everytwhere","title":"start_qemu.sh from everytwhere","text":"<p>Script start_qemu.sh needs to be in <code>/home/sigma_ibo/Desktop/Masterarbeit/masterthesis-documentation/QEMU/</code>. </p> <pre><code>sudo nano ~/.bashrc\nexport PATH=$PATH:/home/sigma_ibo/Desktop/Masterarbeit/documentation/resources/QEMU/\n</code></pre>"},{"location":"workflow/useful/#add-konsole-to-replace-console","title":"Add konsole to replace console","text":"<p>nautilus-open-any-terminal</p>"},{"location":"workflow/useful/#ssh-ohne-passwort","title":"ssh ohne Passwort","text":"<p>Um eine SSH-Verbindung von Ihrem Host-Computer zu Ihrem Gast-Computer (oder Server) herzustellen, k\u00f6nnen Sie die folgenden Schritte ausf\u00fchren:</p> <ol> <li>Generieren Sie ein SSH-Schl\u00fcsselpaar auf Ihrem Host-Computer. Sie k\u00f6nnen dies mit dem Befehl <code>ssh-keygen</code> tun. Sie werden aufgefordert, ein Passwort einzugeben, aber Sie k\u00f6nnen einfach Enter dr\u00fccken, um kein Passwort zu setzen (obwohl dies aus Sicherheitsgr\u00fcnden nicht empfohlen wird).</li> </ol> <pre><code>ssh-keygen\n</code></pre> <ol> <li>Kopieren Sie Ihren \u00f6ffentlichen Schl\u00fcssel auf den Gast-Computer. Sie k\u00f6nnen dies mit dem Befehl <code>ssh-copy-id</code> tun. Ersetzen Sie <code>benutzername</code> durch Ihren Benutzernamen auf dem Gast-Computer und <code>ip_address</code> durch die IP-Adresse des Gast-Computers.</li> </ol> <pre><code>ssh-copy-id root@192.168.1.51\n</code></pre> <ol> <li>Stellen Sie eine SSH-Verbindung zum Gast-Computer her. Sie k\u00f6nnen dies mit dem Befehl <code>ssh</code> tun. Ersetzen Sie wieder <code>benutzername</code> und <code>ip_address</code> durch Ihren Benutzernamen und die IP-Adresse des Gast-Computers.</li> </ol> <pre><code>ssh root@192.168.1.51\n</code></pre> <p>Nachdem Sie diese Schritte ausgef\u00fchrt haben, sollten Sie in der Lage sein, sich ohne Passwort bei Ihrem Gast-Computer anzumelden. </p> <p>Wenn Sie den ssh-copy-id Befehl verwenden, wird Ihr \u00f6ffentlicher SSH-Schl\u00fcssel in der Datei <code>~/.ssh/authorized_keys</code> auf dem Gast-Computer (dem Computer, zu dem Sie eine SSH-Verbindung herstellen) gespeichert.</p> <p>Jede Zeile in dieser Datei repr\u00e4sentiert einen \u00f6ffentlichen Schl\u00fcssel, der f\u00fcr die Authentifizierung zugelassen ist. Wenn Sie also mehrere Schl\u00fcssel haben, die Sie verwenden, um sich bei diesem Computer anzumelden, wird jeder Schl\u00fcssel als separate Zeile in dieser Datei angezeigt</p>"},{"location":"workflow/useful/#check-on-which-cpu-a-task-is-running","title":"Check on which CPU a task is running","text":"<p><code>ps -eo pid,psr,comm | grep &lt;name&gt;</code></p>"},{"location":"workflow/useful/#limit-wsl2-resources","title":"Limit WSL2 resources","text":"<p>Edit the WSL config to limit the memory usage as mentioned here.</p> <pre><code>#turn off all wsl instances such as docker-desktop\nwsl --shutdown\nnotepad \"$env:USERPROFILE/.wslconfig\"\n</code></pre> <p>Set the values you want for CPU core and Memory:</p> <pre><code>[wsl2]\nmemory=3GB   # Limits VM memory in WSL 2 up to 3GB\nprocessors=2 # Makes the WSL 2 VM use two virtual processors\n</code></pre>"},{"location":"workflow/useful_links/","title":"Useful links","text":""},{"location":"workflow/useful_links/#ftrace","title":"ftrace","text":"<p>Analyze the Linux kernel with ftrace ftrace - Function Tracer ftrace: trace your kernel functions! </p>"},{"location":"workflow/useful_links/#trace-cmd","title":"trace-cmd","text":"<p>Tracing VMs Seeing How Host and Guest Interact - Steven Rostedt, Google trace-cmd Tutorial trace-cmd Presentation trace-cmd Documentation trace-cmd: A front-end for Ftrace Kernel tracing with trace-cmd Git repo trace-cmd </p>"},{"location":"workflow/useful_links/#yocto","title":"Yocto","text":"<p>Yocto Project Documentation</p>"},{"location":"workflow/useful_links/#sigmatek","title":"Sigmatek","text":"<p>Sigmatek Documentation Sigmatek Git</p>"},{"location":"workflow/useful_links/#qemu","title":"QEMU","text":"<p>QEMU Documentation</p>"},{"location":"workflow/useful_links/#kernel-config","title":"Kernel config","text":"<p>kernelconfig Documentation</p>"},{"location":"workflow/useful_links/#ai","title":"AI","text":"<p>Copilot ChatGPT ChatGPT prompt splitter</p>"},{"location":"workflow/useful_notneeded/","title":"Useful notneeded","text":""},{"location":"workflow/useful_notneeded/#add-more-cpus-to-qemu-virtual-machine-with-smp-option","title":"Add more CPUs to QEMU virtual machine with -smp option","text":"<p>The -smp option specifies the number of CPUs</p> <p>Replace n with the number of CPUs you want to add. For example, if you want to add 4 CPUs, you would use -smp cpus=4.</p> <p>After making these changes, the specified number of CPUs will be available when you boot your Yocto image with this script. </p> <pre><code>exec qemu-system-x86_64 -M pc,accel=kvm -kernel ./bzImage \\\n-m 2048 -drive file=salamander-image-sigmatek-core2.ext4,format=raw,media=disk \\\n-append \"console=ttyS0 console=tty1 root=/dev/sda rw panic=1 sigmatek_lrt.QEMU=1 ip=dhcp rootfstype=ext4 \\\n-net nic,model=e1000,netdev=e1000 -netdev bridge,id=e1000,br=nm-bridge \\\n-fsdev local,security_model=none,id=fsdev0,path=drive-c -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_&gt;\n-drive if=pflash,format=qcow2,file=ovmf.code.qcow2 \\\n-smp cpus=n \\\n-no-reboot -nographic\n</code></pre> <p>Check with: <code>cat /sys/devices/system/cpu/online</code></p> <pre><code>root@sigmatek-core2:~# cat /sys/devices/system/cpu/online\n0-9\n</code></pre>"},{"location":"workflow/useful_notneeded/#isolate-cpus-with-isolcpus","title":"Isolate CPUs with isolcpus","text":"<p>To use isolcpus in a Yocto image, you need to add it to the kernel command line parameters. In your case, these parameters are specified in the -append option in your QEMU command. Add isolcpus=x,y,z. Replace x,y,z with the CPU cores you want to isolate. For example, if you want to isolate cores 0, 1 and 2, you would use isolcpus=0,1,2.</p> <pre><code>exec qemu-system-x86_64 -M pc,accel=kvm -kernel ./bzImage \\\n-m 2048 -drive file=salamander-image-sigmatek-core2.ext4,format=raw,media=disk \\\n-append \"console=ttyS0 console=tty1 root=/dev/sda rw panic=1 sigmatek_lrt.QEMU=1 ip=dhcp rootfstype=ext4 isolcpus=0,1,2\" \\\n-net nic,model=e1000,netdev=e1000 -netdev bridge,id=e1000,br=nm-bridge \\\n-fsdev local,security_model=none,id=fsdev0,path=drive-c -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_&gt;\n-drive if=pflash,format=qcow2,file=ovmf.code.qcow2 \\\n-smp cpus=n \\\n-no-reboot -nographic\n</code></pre> <p>Check with: <code>cat /sys/devices/system/cpu/isolated</code></p> <pre><code>root@sigmatek-core2:~# cat /sys/devices/system/cpu/isolated\n0-2\n</code></pre>"},{"location":"workflow/useful_notneeded/#gid-pid-of-processes","title":"Gid PID Of processes","text":"<p>Start latency and write output to latency_output.txt: <code>latency -T 60 &gt; latency_output.txt 2&gt;&amp;1 &amp;</code> Get ID of xenomai task: <code>ps aux | grep latency</code></p> <pre><code>root@sigmatek-core2:~# latency -T 60 &gt; latency_output.txt 2&gt;&amp;1 &amp;\n[1] 557\nroot@sigmatek-core2:~# ps aux | grep latency\nroot       557  0.0  0.6  14040 12852 ttyS0    SLl  11:34   0:00 latency -T 60\nroot       563  0.0  0.0   3256  1148 ttyS0    S+   11:34   0:00 grep latency\n</code></pre>"},{"location":"workflow/useful_notneeded/#assign-tasks-to-the-isolated-cpus","title":"Assign tasks to the isolated CPUs","text":"<p>To assign these latency tasks to the isolated CPUs, you can use the taskset command with the process ID (PID) of each latency task. For example, if you want to assign the latency task with PID 536 to CPU 1, you would use:</p> <p><code>taskset -pc x abc</code></p> <p>Remember to replace abc with the actual PID of the latency task. You can repeat this process for each latency task and each isolated CPU.</p>"},{"location":"workflow/useful_notneeded/#kill-processes","title":"Kill processes","text":"<p>Kill processes with <code>kill x</code></p>"},{"location":"workflow/useful_notneeded/#m-error-message","title":"^M error message","text":"<p>The error message you're seeing is typically caused by a mismatch in line endings. Scripts that have been edited or created on Windows use a different line ending (<code>\\r\\n</code>) than Unix/Linux (<code>\\n</code>). The <code>^M</code> in the error message is a visual representation of <code>\\r</code> (carriage return), which is not expected or understood by the Linux shell.</p> <p>You can convert the line endings of your script to the Unix format using a tool like <code>dos2unix</code>. Here's how you can do it:</p> <pre><code>sudo apt-get install dos2unix  # Install dos2unix tool\ndos2unix &lt;file&gt;\n</code></pre>"},{"location":"workflow/useful_notneeded/#split-too-long-prompt","title":"Split too long Prompt","text":"<p>ChatGPT PROMPTs Splitter</p>"},{"location":"xenomai/clocktest/","title":"clocktest","text":""},{"location":"xenomai/clocktest/#name","title":"Name","text":"<p>clocktest - Xenomai Clock Test</p>"},{"location":"xenomai/clocktest/#synopsis","title":"Synopsis","text":"<p>clocktest [OPTIONS]</p>"},{"location":"xenomai/clocktest/#description","title":"Description","text":"<p>clocktest is part of the Xenomai test suite and tests the Clock. For each CPU, it repeatedly prints a time offset (compared to the reference gettimeofday()), a drift value, the number of warps and the maximum warp in microseconds.</p> <p>For this program to work, you need to run a suitable Xenomai enabled kernel with the respective module (xeno_posix).</p>"},{"location":"xenomai/clocktest/#options","title":"Options","text":"Option Description -C  Clock to be tested, default=0 (CLOCK_REALTIME=0, CLOCK_MONOTONIC=1, CLOCK_HOST_REALTIME=42) -T  Default=0 (Never stop, ^C to end) -D Print extra diagnostics for CLOCK_HOST_REALTIME <p>clocktest was written by Jan Kiszka. This man page was written by Roland Stigge.</p>"},{"location":"xenomai/clocktest/#documentation","title":"Documentation","text":"<p>clocktest - Xenomai Clock Test </p>"},{"location":"xenomai/clocktest/#map","title":"Map","text":"Output Description CPU The CPU on which the test was run ToD offset [us] The offset of the Time of Day (ToD) clock in microseconds (us) ToD drift [us/s] The drift of the ToD clock in microseconds per second (us/s) warps The number of \"warps\" or significant jumps in system time max delta [us] The maximum observed difference (delta) in the time, in microseconds (us)"},{"location":"xenomai/clocktest/#output-clocktest-d-t-60","title":"Output: <code>clocktest -D -T 60</code>","text":"<p>root@sigmatek-core2:/usr/sbin# clocktest -D -T 60 == Testing built-in CLOCK_REALTIME (0) | CPU | ToD offset [us] | ToD drift [us/s] | Warps | Max Delta [us] | |-----|------------------|-------------------|-------|-----------------| |   0 |              0.7 |            -0.005 |     0 |             0.0 |</p>"},{"location":"xenomai/clocktest/#explanation","title":"Explanation","text":"<p>The test was run on CPU 0, the ToD offset was 0.7 microseconds, the ToD drift was -0.005 microseconds per second, there were no warps, and the maximum delta was 0.0 microseconds.</p>"},{"location":"xenomai/latency/","title":"latency","text":""},{"location":"xenomai/latency/#name","title":"Name","text":"<p>latency - Xenomai timer latency benchmark</p>"},{"location":"xenomai/latency/#synopsis","title":"Synopsis","text":"<p>latency [ options ]</p>"},{"location":"xenomai/latency/#description","title":"Description","text":"<p>latency is part of the Xenomai test suite. It is a timer latency benchmark program. The system must run a suitable Xenomai enabled kernel with the respective module (xeno_timerbench).</p>"},{"location":"xenomai/latency/#documentation","title":"Documentation","text":"<p>latency - Xenomai timer latency benchmark </p>"},{"location":"xenomai/latency/#options","title":"Options","text":"Option Description -h Print histograms of min, avg, max latencies -g  Dump histogram to  in a format easily readable with gnuplot. -s Print statistics of min, avg, max latencies -H  Default = 200, increase if your last bucket is full -B  Default = 1000ns, decrease for more resolution -p  Sampling period -l  Default=21, 0 to suppress headers -T  Default=0, so ^C to end -q Suppresses RTD, RTH lines if -T is used -D  Number of testing device, default=0 -t  0=user task (default), 1=kernel task, 2=timer IRQ -f Freeze trace for each new max latency -c  Pin measuring task down to given CPU -P  Task priority (test mode 0 and 1 only) -b Break upon mode switch <p>latency was written by Philippe Gerum. This man page was written by Roland Stigge.</p>"},{"location":"xenomai/latency/#map","title":"Map","text":"Output Description RTT Real-Time Tick, shows the time at which the measurement was taken. RTH Real-Time Histogram, shows the distribution of latency values. RTD Real-Time Data, shows the actual latency measurements. RTS Real-Time Statistics, shows the overall statistics after the test is complete. Output Description lat min The minimum latency measured. lat avg The average latency measured. lat max The maximum latency measured. overrun The number of timer overruns (situations where the next period has already arrived before the current period is done). msw The number of mode switches (switches between primary and secondary mode). lat best The best (lowest) latency measured so far. lat worst The worst (highest) latency measured so far."},{"location":"xenomai/latency/#output-latency-t-60","title":"Output: <code>latency -T 60</code>","text":"<p>root@sigmatek-core2:/usr/sbin# latency -T 60 == Sampling period: 100 us == Test mode: periodic user-mode task == All results in microseconds warming up... |RTT|  00:00:01  (periodic user-mode task, 100 us period, priority 99)||||||| |RTH|----lat min|----lat avg|----lat max|-overrun|---msw|---lat best|--lat worst| |---|-----------|-----------|-----------|--------|------|-----------|-----------| |RTD|      1.681|      3.422|     90.929|       0|     0|      1.681|     90.929| |RTD|      2.223|      3.203|     20.304|       0|     0|      1.681|     90.929| |RTD|      2.317|      3.364|     23.173|       0|     0|      1.681|     90.929| |RTD|      1.821|      3.333|    169.908|       1|     0|      1.681|    169.908| |RTD|      1.644|      3.092|     23.484|       1|     0|      1.644|    169.908| |RTD|      1.770|      3.182|    169.126|       2|     0|      1.644|    169.908| |RTD|      1.807|      3.241|    158.419|       4|     0|      1.644|    169.908| |RTD|      1.908|      3.248|    229.944|      11|     0|      1.644|    229.944| |RTD|      2.196|      3.239|    135.810|      11|     0|      1.644|    229.944| |RTD|      1.782|      3.222|    186.953|      13|     0|      1.644|    229.944| |RTD|      2.107|      3.147|    146.794|      14|     0|      1.644|    229.944| |RTD|      1.702|      3.136|     21.972|      14|     0|      1.644|    229.944| |RTD|      1.663|      3.237|    107.455|      15|     0|      1.644|    229.944| |RTD|      1.579|      3.248|    171.420|      17|     0|      1.579|    229.944| |RTD|      1.973|      3.278|     32.868|      17|     0|      1.579|    229.944| |RTD|      2.494|      3.394|    375.502|      26|     0|      1.579|    375.502| |RTD|      2.009|      3.287|     82.024|      26|     0|      1.579|    375.502| |RTD|      2.066|      3.250|    260.630|      28|     0|      1.579|    375.502| |RTD|      2.155|      3.211|    234.989|      31|     0|      1.579|    375.502| |RTD|      1.850|      3.938|    220.307|      36|     0|      1.579|    375.502| |RTD|      1.807|      3.236|    221.417|      39|     0|      1.579|    375.502| |RTT|  00:00:22  (periodic user-mode task, 100 us period, priority 99)||||||| |RTH|----lat min|----lat avg|----lat max|-overrun|---msw|---lat best|--lat worst| |RTD|      2.542|      3.196|     26.265|      39|     0|      1.579|    375.502| |RTD|      1.865|      3.158|    194.683|      40|     0|      1.579|    375.502| |RTD|      1.641|      3.137|     23.661|      40|     0|      1.579|    375.502| |RTD|      1.574|      3.260|     23.995|      40|     0|      1.574|    375.502| |RTD|      2.029|      3.185|     87.024|      40|     0|      1.574|    375.502| |RTD|      2.534|      3.130|    106.408|      41|     0|      1.574|    375.502| |RTD|      1.960|      3.149|     28.831|      41|     0|      1.574|    375.502| |RTD|      1.755|      3.435|     30.206|      41|     0|      1.574|    375.502| |RTD|      2.683|      4.089|    197.988|      42|     0|      1.574|    375.502| |RTD|      1.747|      3.323|    179.669|      44|     0|      1.574|    375.502| |RTD|      2.077|      3.183|     69.423|      44|     0|      1.574|    375.502| |RTD|      1.803|      3.114|     62.567|      44|     0|      1.574|    375.502| |RTD|      1.799|      3.278|     76.858|      44|     0|      1.574|    375.502| |RTD|      1.928|      3.124|     21.726|      44|     0|      1.574|    375.502| |RTD|      2.025|      3.159|     48.561|      44|     0|      1.574|    375.502| |RTD|      2.037|      3.153|     23.673|      44|     0|      1.574|    375.502| |RTD|      1.593|      3.140|     25.701|      44|     0|      1.574|    375.502| |RTD|      1.846|      3.340|    110.855|      45|     0|      1.574|    375.502| |RTD|      2.818|      4.665|    223.871|      50|     0|      1.574|    375.502| |RTD|      2.209|      3.514|    110.917|      51|     0|      1.574|    375.502| |RTD|      1.848|      3.599|    127.239|      52|     0|      1.574|    375.502| |RTT|  00:00:43  (periodic user-mode task, 100 us period, priority 99)||||||| |RTH|----lat min|----lat avg|----lat max|-overrun|---msw|---lat best|--lat worst| |RTD|      2.443|      3.525|     84.411|      52|     0|      1.574|    375.502| |RTD|      2.028|      3.201|    257.087|      55|     0|      1.574|    375.502| |RTD|      1.861|      3.137|    240.561|      58|     0|      1.574|    375.502| |RTD|      1.755|      3.186|    167.924|      59|     0|      1.574|    375.502| |RTD|      1.731|      3.264|    180.382|      62|     0|      1.574|    375.502| |RTD|      1.706|      3.206|    107.250|      63|     0|      1.574|    375.502| |RTD|      1.722|      3.171|     24.803|      63|     0|      1.574|    375.502| |RTD|      1.719|      3.191|    135.390|      65|     0|      1.574|    375.502| |RTD|      1.913|      3.203|    166.808|      66|     0|      1.574|    375.502| |RTD|      1.630|      3.146|     19.869|      66|     0|      1.574|    375.502| |RTD|      2.341|      3.145|     19.776|      66|     0|      1.574|    375.502| |RTD|      2.023|      3.176|     86.029|      66|     0|      1.574|    375.502| |RTD|      1.830|      3.167|     22.296|      66|     0|      1.574|    375.502| |RTD|      1.732|      3.308|    174.504|      70|     0|      1.574|    375.502| |RTD|      1.973|      3.482|    204.055|      79|     0|      1.574|    375.502| |RTD|      1.888|      3.256|    207.476|      80|     0|      1.574|    375.502| |RTD|      1.838|      3.142|    160.382|      81|     0|      1.574|    375.502| |---|-----------|-----------|-----------|--------|------|------------------------- |RTS|      1.574|      3.290|    375.502|      81|     0|    00:01:00/00:01:00||</p>"},{"location":"xenomai/latency/#explanation","title":"Explanation","text":"<p>The test ran for 60 seconds (-T 60). The minimum latency (lat min) was 1.574 microseconds, the average latency (lat avg) was 3.290 microseconds, and the maximum latency (lat max) was 375.502 microseconds. There were 81 overruns and 0 mode switches.</p>"},{"location":"xenomai/switchtest/","title":"switchtest","text":""},{"location":"xenomai/switchtest/#name","title":"Name","text":"<p>switchtest - Xenomai context switch test</p>"},{"location":"xenomai/switchtest/#synopsis","title":"Synopsis","text":"<p>switchtest [options] threadspec threadspec...</p>"},{"location":"xenomai/switchtest/#description","title":"Description","text":"<p>switchtest is part of Xenomai. It can be used to test thread context switches. switchtest creates threads of various types and attempts to switch context between these threads, printing the count of context switches every second. A suitable Xenomai enabled kernel with the respective module (xeno_posix) must be installed.</p>"},{"location":"xenomai/switchtest/#documentation","title":"Documentation","text":"<p>switchtest - Xenomai context switch test </p>"},{"location":"xenomai/switchtest/#options","title":"Options","text":"<p>Each threadspec specifies the characteristics of a thread to be created:</p> <p>threadspec = (rtk|rtup|rtus|rtuo)(_fp|_ufpp|_ufps)*[0-9]*</p> Thread Specification Description rtk Kernel-space real-time thread rtup User-space real-time thread running in primary mode rtus User-space real-time thread running in secondary mode rtuo User-space real-time thread oscillating between modes _fp Thread with XNFPU bit armed (valid for rtk only) _ufpp Thread using FPU in primary mode (invalid for rtus) _ufps Thread using FPU in secondary mode (invalid for rtk, rtup) [0-9] CPU ID where the thread will run (0 if unspecified) <p>Passing no threadspec is equivalent to running:</p> <p>switchtest rtkN rtkN rtk_fpN rtk_fpN rtk_fp_ufppN rtk_fp_ufppN rtupN rtupN rtup_ufppN rtup_ufppN rtusN rtusN rtus_ufpsN rtus_ufpsN rtuoN rtuoN rtuo_ufppN rtuo_ufppN rtuo_ufpsN rtuo_ufpsN rtuo_ufpp_ufpsN rtuo_ufpp_ufpsN</p> <p>with N=1,...,nr_cpus, i.e. occurrences of all the arguments for each CPU</p> <p>Passing only the --nofpu or -n argument is equivalent to running:</p> <p>switchtest rtkN rtkN rtupN rtupN rtusN rtusN rtuoN rtuoN</p> <p>similar to the above.</p> <p>switchtest accepts the following options:</p> Option Description --help, -h Print usage information and exit --lines , -l  Print headers every  lines --quiet, -q Prevent the program from printing context switch count every second --timeout , -T  Limit the test duration to  seconds --nofpu, -n Disable any use of FPU instructions <p>switchtest was written by Philippe Gerum and Gilles Chanteperdrix. This man page was written by Roland Stigge.</p>"},{"location":"xenomai/switchtest/#map","title":"Map","text":"Output Description RTT Real-Time Tick, shows the time at which the measurement was taken. RTH Real-Time Histogram, shows the distribution of latency values. RTD Real-Time Data, shows the actual latency measurements. RTS Real-Time Statistics, shows the overall statistics after the test is complete."},{"location":"xenomai/switchtest/#output-switchtest-t-60","title":"Output: <code>switchtest -T 60</code>","text":""},{"location":"xenomai/xenomai-system-tools/","title":"Xenomai system tools","text":""},{"location":"xenomai/xenomai-system-tools/#xenomai-system-tools","title":"Xenomai System Tools","text":"<p>In traditional IRQ handling, the processor suspends its current activities to service an interrupt, whereas Xenomai's IRQ handling uses an interrupt pipeline mechanism, allowing for simultaneous fetching and preparation of another interrupt while one is being processed, improving performance and reducing latency.  </p> <p>What sets Xenomai4 apart from its predecessor, Xenomai3, is the complete redesign of the high-priority execution stage. This was done for portability and maintainability: I-pipe\u2014the second iteration of the initial Adeos interrupt pipeline\u2014has been fully replaced by Dovetail.  </p> <p>Xenomai System Tools </p> <p>\u2705 Supported by Salamander4</p> Command Description latency Xenomai timer latency benchmark clocktest Xenomai Clock Test switchtest Xenomai context switch test dohell Generate load, in parallel of the latency test rtcanconfig Xenomai tool for configuring the CAN controller rtcansend Xenomai tool for sending CAN messages rtcanrecv Xenomai tool for receiving CAN messages xeno Wrapper for Xenomai executables xeno-config Display Xenomai libraries configuration xeno-test Run latency test under load <p>\u274c Not supported by Salamander4</p> Command Description cyclictest Xenomai high resolution timer test switchbench Xenomai latency test for task switches irqbench Xenomai IRQ benchmark, host control irqloop Xenomai IRQ benchmark, target program klatency Xenomai kernel latency test"},{"location":"xenomai/xenomai-system-tools/#helping-videos","title":"Helping videos","text":"<p>Minimize Jitter: Linux vs. Xenomai </p>"},{"location":"yocto/after_bitbake/","title":"After bitbake","text":""},{"location":"yocto/after_bitbake/#enable-kernel-modules","title":"Enable kernel modules","text":"<p>Host-Guest Tutorial To have trace-cmd trace guests from the host, it is required that the guest is set up with vsocks. These are a virtual socket that lets the guest connect directly with the host. To do this, make sure that your guest kernel has the following configurations:</p> <p>CONFIG_VSOCKETS=m CONFIG_VHOST_VSOCK=m CONFIG_VIRTIO_VSOCKETS=m CONFIG_VIRTIO_VSOCKETS_COMMON=m CONFIG_VSOCKETS_DIAG=m CONFIG_VSOCKETS_LOOPBACK=m And obviously have tracing enabled as well:</p> <p>CONFIG_TRACING=y CONFIG_FTRACE=y CONFIG_FUNCTION_TRACER=y CONFIG_FUNCTION_GRAPH_TRACER=y CONFIG_DYNAMIC_FTRACE=y CONFIG_DYNAMIC_FTRACE_WITH_REGS=y CONFIG_DYNAMIC_FTRACE_WITH_DIRECT_CALLS=y CONFIG_DYNAMIC_FTRACE_WITH_ARGS=y CONFIG_SCHED_TRACER=y CONFIG_FTRACE_SYSCALLS=y CONFIG_TRACER_SNAPSHOT=y CONFIG_KPROBE_EVENTS=y CONFIG_UPROBE_EVENTS=y CONFIG_BPF_EVENTS=y CONFIG_DYNAMIC_EVENTS=y CONFIG_PROBE_EVENTS=y CONFIG_SYNTH_EVENTS=y CONFIG_HIST_TRIGGERS=y  </p> <p>VirtioVsock</p>"},{"location":"yocto/after_bitbake/#bitbake","title":"bitbake","text":"<pre><code>../init.sh -b build -m sigmatek-core2 -d salamander\nbitbake salamander-image -k\n</code></pre>"},{"location":"yocto/after_bitbake/#qemu","title":"QEMU","text":"<p>Add <code>-append \"console=ttyS0 console=tty1 root=/dev/sda rw panic=1 sigmatek_lrt.QEMU=1 ip=dhcp rootfstype=ext4 schedstats=enable\" \\</code> <code>-net nic,model=e1000,netdev=e1000 -netdev bridge,id=e1000,br=nm-bridge \\</code> <code>-device vhost-vsock-pci,guest-cid=3,id=vsock0 \\</code></p> <pre><code>#!/bin/sh\n\nif  [ ! -d drive-c/ ]; then\n        echo \"Filling drive-c/\"\n        mkdir drive-c/\n        tar -C drive-c/ -xf stek-drive-c-image-sigmatek-core2.tar.gz\nfi\n\nexec qemu-system-x86_64 -M pc,accel=kvm -kernel ./bzImage \\\n-m 2048 -drive file=salamander-image-sigmatek-core2.ext4,format=raw,media=disk \\\n-append \"console=ttyS0 console=tty1 root=/dev/sda rw panic=1 sigmatek_lrt.QEMU=1 ip=dhcp rootfstype=ext4 schedstats=enable\" \\\n-net nic,model=e1000,netdev=e1000 -netdev bridge,id=e1000,br=nm-bridge \\\n-fsdev local,security_model=none,id=fsdev0,path=drive-c -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=/mnt/drive-C \\\n-device vhost-vsock-pci,guest-cid=3,id=vsock0 \\\n-drive if=pflash,format=qcow2,file=ovmf.code.qcow2 \\\n-no-reboot -nographic\n</code></pre>"},{"location":"yocto/after_bitbake/#scp-ipk-to-salamander4-and-install","title":"scp .ipk to Salamander4 and install","text":"<p>When you run bitbake xxx, the output of the build process, including any generated .ipk files, is typically stored in the tmp/deploy/ipk/ directory within your build directory1. The exact location can depend on your configuration and the specific recipe you\u2019re building.</p> <p>The .ipk files are package files used by opkg, a lightweight package management system. These files are created when you build a recipe that includes packaging steps.</p> <pre><code>cd ~/Develop/Yocto_local/salamander/salamander-core2/build/tmp/deploy/ipk/core2-64$ scp trace-cmd_2.9.1-r0_core2-64.ipk root@10.30.248.137:/home/root/bb\nopkg install trace-cmd_2.9.1-r0_core2-64.ipk\n</code></pre>"},{"location":"yocto/after_bitbake/#warning-remote-host-identification-has-changed","title":"WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!","text":"<pre><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the ED25519 key sent by the remote host is\nSHA256:R1FIDyOY4bzLdNIJ3CUgwFRRzZPiq4dHL/DA5YY3Bw8.\nPlease contact your system administrator.\nAdd correct host key in /home/sigma_ibo/.ssh/known_hosts to get rid of this message.\nOffending ED25519 key in /home/sigma_ibo/.ssh/known_hosts:12\n  remove with:\n  ssh-keygen -f \"/home/sigma_ibo/.ssh/known_hosts\" -R \"10.30.248.137\"\nHost key for 10.30.248.137 has changed and you have requested strict checking.\nHost key verification failed.\n</code></pre> <p>It seems like the SSH host key for the server at 10.30.248.137 has changed, which is causing the connection to fail due to strict checking. This could happen for a few reasons, such as the server being reinstalled or the SSH service being reconfigured.</p> <p>You can resolve this issue by removing the old host key from your known_hosts file. The offending key is on line 12 of the file. You can remove it with the following command:</p> <pre><code>ssh-keygen -f \"/home/sigma_ibo/.ssh/known_hosts\" -R \"10.30.248.137\" # Salzburg\nssh-keygen -f \"/home/sigma_ibo/.ssh/known_hosts\" -R \"192.168.1.78\" # Wien\"\n\n</code></pre> <p>This will remove the old key for 10.30.248.137 from your known_hosts file. The next time you connect, you should be prompted to accept the new host key.</p>"},{"location":"yocto/fix/","title":"Fix","text":""},{"location":"yocto/fix/#file0001patch-error","title":"File://0001.patch error","text":"<p>Unable to find file file://0001-Fix.patch</p> <pre><code>cd meta-sigmatek/\ngit branch\ncode ../meta-sigmatek/\ngitk\ngit rebase origin/master\ngit checkout master\ngit reset --hard\ngit checkout master\ngit pull\ngit fetch\ngit branch\ngit branch -D pamhal/virtualization\ngit branch\ngit pull\ngit fetch\ngit branch pamhal/virtual_master\ngit checkout pamhal/virtual_master\ngit branch\ngit status\ngit add recipes-kernel/stek-common/files/x86-64/defconfig\ngit commit\ngit push\ngit push --set-upstream origin pamhal/virtual_master\ngit branch\ngit pull\ncode .\ncd salamander/salamander-core2\n../init.sh -b build -m sigmatek-core2 -d salamander\nbitbake salamander-image -k\n</code></pre>"}]}