{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#thema-masterarbeit","title":"Thema Masterarbeit","text":"<p>Virtualisierung eines Echtzeit-Betriebssystems zur Steuerung eines Roboters mit Schwerpunkt auf die  Einhaltung der Echtzeit </p>"},{"location":"#kurze-umschreibung","title":"Kurze Umschreibung","text":"<p>Erstellung einer Echtzeit-Robotersteuerungsplattform unter Verwendung von Salamander OS, Xenomai, QEMU  und PCV-521 in der Yocto-Umgebung. Die Plattform basiert auf Salamander OS und nutzt Xenomai f\u00fcr Echtzeit- Funktionen. Dazu muss im ersten Schritt die Virtualisierungsplattform evaluiert werden. (QEMU, Hyper-V, Virtual  Box, etc.) Als weiterer Schritt folgt die Anbindung eines Roboters \u00fcber eine VARAN-Bus Schnittstelle. Das  gesamte System wird in der Yocto-Umgebung erstellt und konfiguriert.  Das Hauptziel der Arbeit ist es, herauszufinden, wie die Integration von Echtzeit-Funktionen und effizienten  Kommunikationssystemen in eine Robotersteuerungsplattform die Reaktionszeit und Zuverl\u00e4ssigkeit von  Roboteranwendungen verbessern kann. </p>"},{"location":"#masterarbeit","title":"Masterarbeit","text":"<p>Hier ist die Masterarbeit.</p> <p>Info</p> <p>Diese Masterarbeit wird t\u00e4glich aktualisiert. Zu einem sp\u00e4teren Zeitpunkt kann mehr Inhalt vorhanden sein.</p> Fortschritt  der Masterarbeit:"},{"location":"general/checklist/","title":"Checklist","text":""},{"location":"general/checklist/#done","title":"Done","text":"<ul> <li> Install Ubuntu 22.04.3 LTS</li> <li> Local Yocto Build: Salamander4 </li> <li> Linux Kernel Configuration with Xenomai</li> <li> Boot Salamander4 in QEMU under native Ubuntu </li> <li> Configured bridge for QEMU</li> <li> Connected LasalClass2 with [Salamander 4]</li> <li> Enabled access to the vsocket for guest</li> <li> trace-cmd and kernelshark with Salamander4 as guest </li> <li> Used the Xenomai test suite: latency -T 60` </li> <li> Isolated host CPU for guest</li> <li> Latency got better after isolation</li> <li> Analyze Host and Guest Processes</li> <li> Latency got much better after rt-patch</li> <li> Latency got even better after Intels RT_Performance_Tuning_Best_Practice_KVM_VM.pdf: xenomai_compare.md</li> </ul>"},{"location":"general/checklist/#missing","title":"Missing","text":"<ul> <li> Inspect kvm_exit reasons</li> <li> Adapt QEMU script to work with chrt</li> <li> </li> <li> </li> <li> </li> </ul>"},{"location":"general/checklist/#appendix-hardware-and-os-configuration-checklist","title":"Appendix: Hardware and OS configuration checklist","text":"<p>Real-time programming with Linux This serves as a non-exhaustive starting point on the things to check for the hardware and OS. The list is constructed based on my survey of the literature (mostly conference talks, with some internet articles). Remember to always validate the final scheduling latency with something like cyclictest!</p> <ul> <li> Disable SMT</li> <li> Disable dynamic frequency scaling</li> <li> Check for the presence of system management interrupts; if possible, consult with the hardware vendor (remember to always verify their claims)</li> <li> Understand the NUMA of the computer and minimize cross-node memory access within the RT process</li> <li> Disable RT throttling</li> <li> Disable any unneeded RT services/daemons already running on the OS</li> <li> Possibly setup isolcpu (or use cgroups to accomplish the same thing)</li> <li>[] Look into kernel configurations that may affect RT performance such as CONFIG_LOCKUP_DETECTOR, CONFIG_DETECT_HUNG_TASK, CONFIG_NO_HZ, CONFIG_HZ_*, CONFIG_NO_HZ_FULL, and possibly more.</li> <li>[] Configure the memory lock and rtprio permissions in /etc/security/limits.d.</li> <li> Do the latency_reduction_steps.md</li> <li>[]</li> </ul>"},{"location":"general/components/","title":"Components","text":""},{"location":"general/components/#angabe","title":"Angabe","text":"<p>Virtualisierung eines Echtzeit-Betriebssystems zur Steuerung eines Roboters mit Schwerpunkt auf die Einhaltung der Echtzeit</p>"},{"location":"general/components/#yocto-umgebung","title":"Yocto-Umgebung","text":"<p>Build with Yocto</p>"},{"location":"general/components/#salamander-os","title":"Salamander OS","text":"<p>Build LRT</p>"},{"location":"general/components/#xenomai","title":"Xenomai","text":"<p>Preempt_rt.png Xenomai.png</p>"},{"location":"general/components/#lasal-class","title":"Lasal CLass","text":"<p>Lasal Class 2 english Lasal Class 2 deutsch</p>"},{"location":"general/components/#qemu","title":"QEMU","text":"<p>QEMU documentation</p>"},{"location":"general/components/#pcv-521","title":"PCV-521","text":"<p>PCI-Einsteckmodul, das als Schnittstelle zwischen einem PC und dem VARAN-Bus dient PCV 522.pdf </p>"},{"location":"general/documentations_and_links/","title":"Documentations","text":"<ul> <li>Yocto Project</li> <li>QEMU</li> <li>Paravirtualized KVM features</li> <li>QEMU options</li> <li>Kernel Parameters</li> <li>Xenomai</li> <li>Trace-cmd</li> <li>KernelShark</li> <li>Kernelconfig</li> <li>Sigmatek <ul> <li>Build with Yocto</li> <li>Build LRT</li> </ul> </li> </ul>"},{"location":"general/documentations_and_links/#links","title":"Links","text":""},{"location":"general/documentations_and_links/#ftrace","title":"ftrace","text":"<p>Analyze the Linux kernel with ftrace ftrace - Function Tracer ftrace: trace your kernel functions! </p>"},{"location":"general/documentations_and_links/#trace-cmd","title":"trace-cmd","text":"<p>Youtube: Tracing VMs Seeing How Host and Guest Interact - Steven Rostedt, Google trace-cmd Tutorial trace-cmd Presentation trace-cmd Documentation trace-cmd: A front-end for Ftrace Kernel tracing with trace-cmd Git repo trace-cmd </p>"},{"location":"general/documentations_and_links/#sigmatek","title":"Sigmatek","text":"<p>Sigmatek Git Branches</p>"},{"location":"general/documentations_and_links/#ai","title":"AI","text":"<p>ChatGPT prompt splitter</p>"},{"location":"general/draft/","title":"Draft","text":""},{"location":"general/draft/#from-paper-virt-mixed","title":"from Paper Virt. mixed...","text":"<p>Instead, the PREEMPT RT patch provides several mechanisms like high-resolution timers, threaded interrupt handlers, priority inheritance implementation, Preemptible Read-Copy-Update (RCU), real-time schedulers, and a memory allocator.</p>"},{"location":"general/draft/#numa","title":"NUMA","text":"<pre><code>sigma_ibo@sigma-ibo:~$ numactl --hardware\navailable: 1 nodes (0)\nnode 0 cpus: 0 1 2 3 4 5 6 7 8 9 10 11 12 13\nnode 0 size: 31772 MB\nnode 0 free: 10107 MB\nnode distances:\nnode   0 \n  0:  10\n</code></pre> <p>The output of the numactl --hardware command shows the Non-Uniform Memory Access (NUMA) configuration of your system.</p> <p>Here\u2019s what each line means:</p> <p>available: 1 nodes (0): This means that your system has 1 NUMA node available, and it is identified as node 0. node 0 cpus: 0 1 2 3 4 5 6 7 8 9 10 11 12 13: This line lists the CPUs that are part of node 0. In this case, CPUs 0 through 13 are part of this node. node 0 size: 31772 MB: This indicates that node 0 has a total of 31772 MB of memory. node 0 free: 10107 MB: This shows that out of the total memory, 10107 MB is currently free and available for use. node distances:: This section provides the relative distances between different NUMA nodes. Since you only have one node, there is only one entry here. 0: 10: This indicates that the distance from node 0 to itself is 10. The distance is a relative measure of the latency of memory access between nodes. A lower number means lower latency. Since your system has only one NUMA node, all memory access is local, and you don\u2019t need to worry about cross-node memory access. However, if you add more nodes in the future, you\u2019ll need to consider the placement of processes and memory to minimize cross-node memory access. This can be done by setting CPU and memory affinity for your processes or threads, partitioning data across the NUMA nodes, and using NUMA-aware allocators. Always remember to measure and profile the NUMA characteristics of your application to identify areas where cross-node access is high. If you\u2019re not comfortable making these changes yourself, it might be a good idea to seek help from someone who is.</p> <p>The \u201cdistance\u201d in NUMA architecture doesn\u2019t refer to a physical distance, but rather to a measure of memory access latency. In this context, the distance from a node to itself is the baseline latency for accessing its own local memory.</p> <p>The value \u201c10\u201d is a relative measure. It doesn\u2019t represent an absolute time or delay, but serves as a reference point for comparing memory access latencies within the system. When comparing this to the latency of accessing memory on other nodes (in a multi-node system), a lower value would indicate lower latency.</p> <p>So, when it says the distance from node 0 to itself is 10, it means that the latency for accessing local memory is set as the baseline reference value of 10. If there were other nodes, their distances would be compared to this baseline to determine whether accessing memory on those nodes would be faster or slower.</p> <p>In a single-node system like yours, this value doesn\u2019t have much practical impact since all memory access is local. But in a multi-node system, understanding these distances can be crucial for optimizing performance and minimizing latency.</p>"},{"location":"general/protocol/","title":"Protocol","text":""},{"location":"general/protocol/#dual-boot","title":"Dual Boot","text":"<p>1) Flash SSD by installing etcher 2) Ubuntu and Windows on same machine</p>"},{"location":"general/protocol/#install-salamander4-os","title":"Install Salamander4 OS","text":"<p>1) Install Ubuntu 22.04.3 LTS 2) Do everything in build_with_yocto.md</p>"},{"location":"general/protocol/#ssh-to-device","title":"SSH to device","text":"<p>Connect to device with <code>ssh -oHostKeyAlgorithms=+ssh-rsa root@10.10.1.229</code> or <code>ssh -p 22 root@192.168.1.x</code> (changes often)</p>"},{"location":"general/protocol/#lasalclass2-to-device","title":"LasalClass2 to device","text":"<p>Connect LasalClass2 with Salamander 4, IP of Salamander4 device</p>"},{"location":"general/protocol/#configure-bridge-for-qemu","title":"Configure bridge for QEMU","text":"<p>This setup allows the virtual machines to communicate with the outside network through the Ethernet connection provided by either the laptop or the docking station.</p> name device enp0s31f6 Laptop's Ethernet port enx4cd717733f80 Docking station's Ethernet port <ul> <li>Disable ipv4 and ipv6</li> <li>Enter nmtui</li> <li>Edit Connection and \\&lt;Add&gt;. Select Bridge.</li> <li>Edit and \\&lt;Add&gt; Ethernet.</li> <li>Copy name enx4cd717733f80 (4C:D7:17:73:3F:80) of Wired connection 2</li> <li>Edit Connection of Ethernet connection 1 so that it automatically connects.</li> <li>Activate Connection.</li> <li>Result should look like this and this.</li> <li>More info in nmbridge.md. </li> </ul>"},{"location":"general/protocol/#reduce-latency","title":"Reduce latency","text":"<p>We test the system using the Xenomai test suite - <code>latency</code> - <code>clocktest</code> </p>"},{"location":"general/protocol/#max-latency-default","title":"Max Latency default","text":"<p>Default latency  <pre><code>sigma_ibo@pamhal:$ ps -eo pid,psr,comm | grep qemu\n   7295  10 start_qemu.sh\n   7298  17 qemu-system-x86\n</code></pre></p> <p>latency -h -s -T 600 -g max_latency_default_10min.txt</p> <p>lat worst is 4070.018</p>"},{"location":"general/protocol/#max-latency-with-taskset","title":"Max Latency with taskset","text":"<p>To isolate CPUs on your host system (Ubuntu), you can add the <code>isolcpus</code> option to the kernel boot configuration. Here are the steps you can follow:</p> <ol> <li>Open the GRUB configuration file with a text editor. You can use the <code>nano</code> editor for this. Execute the following command in your terminal:     <pre><code>sudo nano /etc/default/grub\n</code></pre></li> <li>Search for the entry <code>GRUB_CMDLINE_LINUX</code> and add <code>isolcpus=0,1,2,3,4</code> (or the corresponding CPU numbers you want to isolate). It should then look like this:     <pre><code>GRUB_CMDLINE_LINUX=\"isolcpus=0,1,2,3,4\"\n</code></pre></li> <li> <p>Save the changes and close the editor. If you are using <code>nano</code>, you can do this by pressing <code>Ctrl+X</code>, then typing <code>Y</code> to save the changes, and finally pressing <code>Enter</code> to close the editor.</p> </li> <li> <p>Update GRUB with the following command:     <pre><code>sudo update-grub\n</code></pre></p> </li> <li>Reboot your system for the changes to take effect.</li> </ol> <p>Check with: <code>cat /sys/devices/system/cpu/isolated</code></p> <pre><code>sigma_ibo@pamhal:~$ cat /sys/devices/system/cpu/online \n0-19\nsigma_ibo@pamhal:~$ cat /sys/devices/system/cpu/isolated\n0-4\n</code></pre> <p>After taskset on CPU4 with <code>qemu_def_2taskset_vsock_nmbridge.sh</code> <pre><code>sigma_ibo@pamhal:$ ps -eo pid,psr,comm | grep qemu\n   8752   0 start_qemu.sh\n   8755   4 qemu-system-x86\n</code></pre> latency -h -s -T 600 -g max_latency_with_taskset_10min.txt</p> <p>lat worst reduced from 4070.018 to 457.545 with stats</p>"},{"location":"general/protocol/#max-latency-with-rt","title":"Max Latency with rt","text":"<p>Technical details of the real-time preemption RT-Tests HOWTO: Build an RT-application Tuning a real-time kernel Paravirtualized KVM features </p>"},{"location":"general/protocol/#enable-preempt_rt-kernel","title":"Enable Preempt_RT Kernel","text":"<p>Either do everything in kernel-patch.md to patch the kernel and enable Fully Preemptible Kernel (RT), or simply enable Ubuntu Pro's real-time kernel, here.</p> <p>Info</p> <p>Before the isolation of CPU x, both kernel threads and user processes were running on this CPU. The user processes included various applications such as msedge, code, bash and qemu-system-x86.</p> <p>After isolating CPU x, only kernel threads and the qemu-system-x86 process appear to be running on this CPU. There do not appear to be any other user processes running on this CPU.</p> <p>The isolcpus option prevents the kernel from scheduling normal (non-real-time) processes on the isolated CPUs. However, there are some exceptions:</p> <ul> <li>If a process is explicitly set to run on an isolated CPU (for example with taskset), it will run on that CPU even if it is isolated.</li> <li>Some kernel threads can run on isolated CPUs because they are not controlled by the normal scheduler. These include the threads you see in your output, such as kthreadd, migration/4, ksoftirqd/4, kworker/4:0-events and others.</li> <li>Interrupts can be handled on isolated CPUs unless they are explicitly redirected with the irqaffinity option.</li> </ul> <p>latency -T 600</p> <p>lat worst reduced from 457.545 to 32.216 with stats</p>"},{"location":"general/protocol/#realtime-priority","title":"Realtime priority","text":"<p>Danger</p> <p>Setting a real-time priority of 99 for a process means that this process has the highest priority in the system and is executed before all other processes. This can result in other processes, including important system processes, not receiving the CPU time they need to function properly. This can lead to system instability and, in the worst case, to the system becoming unresponsive or \"crashing\".</p> <p>It is important to be careful when using real-time priorities and ensure that other important processes still get the CPU time they need. It might be helpful to gradually increase the real-time priority and observe the effects on the system instead of jumping straight to the highest priority.</p> <p>To see the real-time priorities of all running processes, have a look at thread priorities.</p>"},{"location":"general/protocol/#configuring-the-system-for-real-time","title":"Configuring the system for real-time","text":"<p>For now, PREEMPT_RT is a set of patches that is supposed to be applied on top of mainline Linux. Most Linux distributions do not build it by default, and you will most likely have to do it yourself [3]. How this can be done falls outside the scope of this post, but there are plenty of guides out there. Hopefully in the near future, all of PREEMPT_RT's functionality will be merged in to mainline, and Linux distributions will provide RT-enabled kernels out-of-the-box.</p> <p>Once you successfully compiled the RT kernel, the default hardware and OS configurations are usually not tuned correctly for RT. The following hardware and OS configurations should likely always be checked and tuned: latency_reduction_steps.md</p>"},{"location":"general/protocol/#third-process-is-for-latency-minimization","title":"Third process is for latency minimization","text":"<pre><code>13    2972    2972 qemu-system-x86_64 -M pc,ac FF    -     98\n13    2972    2976 qemu-system-x86_64 -M pc,ac FF    -     98\n13    2972    3292 qemu-system-x86_64 -M pc,ac FF    -     90\n13    2972    8699 qemu-system-x86_64 -M pc,ac FF    -     95\n</code></pre> <p>Salamander 4 latency comparison </p>"},{"location":"general/timeline/","title":"Timeline","text":"Date Log Thursday, 08.02.2024 Dual boot Windows and Ubuntu Friday, 09.02.2024 Booted Salamander 4 on Ubuntu Monday, 12.02.2024 Connected Salamander 4 with SSH Tuesday, 13.02.2024 Connected Salamander 4 with Lasal Class 2 (Christian) after configuring bridge Wednesday, 14.02.2024 Installed Windows VM on Ubuntu, installed Lasal Class 2 on Windows VM, connected with Salamander 4 Thursday, 15.02.2024 Run pumpcontrol example successfully Friday, 16.02.2024 Increased virtual CPU in Windows Monday, 19.02.2024 Xenomai-system-tools Tuesday, 20.02.2024 KernelShark Wednesday, 21.02.2024 Local Yocto Build finally done Thursday, 22.02.2024 trace-cmd agent on guest communicates with host Friday, 23.02.2024 Teammeeting and Germany Monday, 26.02.2024 after_bitbake, kernelshark, paths Tuesday, 27.02.2024 Isolate CPUs on host system and let guest run on it Wednesday, 28.02.2024 Host-Guest timestamp sync works with VM, can view KVM Combo plots, does still not work with Salamander4 Thursday, 29.02.2024 useful_links and search_for_x.py Friday, 01.03.2024 checklist.md, nmbridge.md, understand nmbridge Monday, 04.03.2024 Finally: Negotiated kvm time sync protocol with guest Salamander4 Tuesday, 05.03.2024 lat worst reduced from 374.075 to 87.379 Wednesday, 06.03.2024 Add documentation local server Thursday, 07.03.2024 Start Salamander4 CPU with icecc Friday, 08.03.2024 Merge master and readme Monday, 11.03.2024 Kernel patch, richard meeting and settings.json Tuesday, 12.03.2024 real time priorities with chrt -f 50, no success Wednesday, 13.03.2024 Preventing kernel tasks from being scheduled on CPU4 Thursday, 14.03.2024 irq.md Friday, 15.03.2024 Timer 1000Hz Monday, 18.03.2024 kernel_processes.md, kernelshark, start thesis Tuesday, 19.03.2024 Added Zotero, Ubuntu Pro and Ubuntu PREEMPT_RT Wednesday, 20.03.2024 kvm_exit reasons plot Thursday, 21.03.2024 gitlfs and settings.json, plot with and without taskset, write more thesis Friday, 22.03.2024 Literature paper search Monday, 25.03.2024 Start masterthesis Tuesday, 26.03.2024 Write masterthesis Wednesday, 27.03.2024 Write masterthesis Thursday, 28.03.2024 Write masterthesis Friday, 29.03.2024 Write masterthesis Monday, 01.04.2024 Ostern Tuesday, 02.04.2024 bcc tool Wednesday, 03.04.2024 Write masterthesis APIC_WRITE Thursday, 04.04.2024 defconfig, vapic Friday, 05.04.2024 check_smp_affinity and check_CPU_IRQ_usage Monday, 08.04.2024 kvm_exit_vapic_results Tuesday, 09.04.2024 trace-cmd report analysis Wednesday, 10.04.2024 getconf _NPROCESSORS_CONF Thursday, 11.04.2024 Richard Meeting Friday, 12.04.2024 Spec Monday, 15.04.2024 report.sh Tuesday, 16.04.2024 Updated analyze_trace.py, include in thesis Wednesday, 17.04.2024 Describe host and guest tasks Thursday, 18.04.2024 Read 4 papers Friday, 19.04.2024 Read 5 papers Monday, 22.04.2024 Boot ubuntu anew Tuesday, 23.04.2024 Rebuild workspace Wednesday, 24.04.2024 Rebuild workspace, problem_solution Thursday, 25.04.2024 Rebuild workspace, table IRQ CPU Friday, 26.04.2024 compare.md, ps.sh Monday, 29.04.2024 powersave, balanced, performance Tuesday, 30.04.2024 merge and failed_reason Wednesday, 01.05.2024 Feiertag Thursday, 02.05.2024 Ubuntu real-time kernel Friday, 03.05.2024 Steven yt, analyze_events and analyze_tasks Monday, 06.05.2024 report_hardware Tuesday, 07.05.2024 Richard prios, show_all_threads.py Wednesday, 08.05.2024 failed_reason include CPU, reorganize Thursday, 09.05.2024 Feiertag Friday, 10.05.2024 compare kernels Monday, 13.05.2024 compare config, qemu test with 2 cpus Tuesday, 14.05.2024 Hardware and OS configuration checklist Wednesday, 15.05.2024 FINALLY LATENCY REDUCED WITH STATS and PLOT Thursday, 16.05.2024 reorganize, papers and configs Friday, 17.05.2024 real-time-kernel-tuning websites Monday, 20.05.2024 Feiertag Tuesday, 21.05.2024 read 3 papers, compare_2_files.py Wednesday, 22.05.2024 Configure like Intels RT_Performance_Tuning_Best_Practice_KVM_VM.pdf, results in xenomai_compare.md Thursday, 23.05.2024 reorganize, test Salamander 4 Friday, 24.05.2024 QEMU with 2 CPUs Monday, 27.05.2024 Write thesis Tuesday, 28.05.2024 Write thesis Wednesday, 29.05.2024 Write thesis Thursday, 30.05.2024 Feiertag Friday, 31.05.2024"},{"location":"tools/NONkernel_threads/","title":"NONkernel threads","text":""},{"location":"tools/NONkernel_threads/#cpu-dependant-kernel-threads","title":"CPU dependant kernel threads","text":"Thread Count ksoftirqd 20 rcuc 20 migration 20 irq_work 20 idle_inject 20 cpuhp 20"},{"location":"tools/tools/","title":"Tools","text":""},{"location":"tools/tools/#kvm_stat","title":"kvm_stat","text":"<pre><code>sudo kvm_stat -s 1 -c -L test.csv\n</code></pre>"},{"location":"tools/tools/#bcc","title":"bcc","text":"<p>Clone bcc <pre><code>git clone https://github.com/iovisor/bcc\n</code></pre> Execute bcc <pre><code>cd /usr/share/bcc/tools &amp;&amp; sudo ./kvmexit 1\nsudo kvmexit 2 &gt; kvmexit.log\n</code></pre></p>"},{"location":"tools/tools/#rt-tester","title":"rt-tester","text":"<p>Clone rt-tester <pre><code>git clone https://github.com/AgileDevArt/rt-tester\n</code></pre> Execute rt-tester <pre><code>g++ rt-tester -o rt-tester \n./rt-tester\n</code></pre></p>"},{"location":"tools/bcc/install_bcc/","title":"Install bcc","text":"<p>Installing BCC from source:</p> <ol> <li> <p>Install the necessary dependencies: <pre><code>sudo apt-get install -y bpfcc-tools libbpfcc libbpfcc-dev linux-headers-$(uname -r)\n</code></pre> <pre><code>sudo apt install -y zip bison build-essential cmake flex git libedit-dev \\\n  libllvm14 llvm-14-dev libclang-14-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools \\\n  liblzma-dev libdebuginfod-dev arping netperf iperf\n</code></pre></p> </li> <li> <p>Clone the BCC repository: <pre><code>git clone https://github.com/iovisor/bcc.git\n</code></pre></p> </li> <li> <p>Build BCC: <pre><code>mkdir bcc/build &amp;&amp; cd bcc/build\ncmake ..\nmake\n</code></pre></p> </li> <li> <p>Install BCC: <pre><code>sudo make install\n</code></pre></p> </li> <li> <p>Update the shared library cache: <pre><code>sudo ldconfig\n</code></pre></p> </li> <li> <p>Run kvmexit <pre><code>cd /usr/share/bcc/tools &amp;&amp; sudo ./kvmexit\n</code></pre></p> </li> </ol>"},{"location":"workflow/git/","title":"Git","text":""},{"location":"workflow/git/#git-lfs","title":"Git LFS","text":""},{"location":"workflow/git/#step-1-install-git-lfs","title":"Step 1: Install Git LFS","text":"<p>For Debian/Ubuntu systems, use the following commands:</p> <pre><code>curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nsudo apt-get install git-lfs\n</code></pre>"},{"location":"workflow/git/#step-2-initialize-git-lfs","title":"Step 2: Initialize Git LFS","text":"<p>After installation, set up Git LFS for your user account by running: <pre><code>git lfs install\n</code></pre></p>"},{"location":"workflow/git/#step-optional-untrack-the-file-from-git","title":"Step optional: Untrack the file from Git:","text":"<p>Use the git rm --cached command to untrack the file1. For example, if your file is named largefile.zip, you would use: <pre><code>git rm --cached largefile.zip\n</code></pre></p>"},{"location":"workflow/git/#step-3-track-the-large-file-with-git-lfs","title":"Step 3: Track the Large File with Git LFS","text":"<p>Before adding and committing the file, you need to tell Git LFS to track it. You can do this with the git lfs track command. For example, if your large file is a .zip file, you would use: <pre><code>git lfs track \"*.zip\"\n</code></pre></p> <p>Replace *.zip with the type of your large file. If you want to track a specific file, you can replace *.zip with the path to your file.</p>"},{"location":"workflow/git/#step-4-add-and-commit-the-file","title":"Step 4: Add and Commit the File","text":"<p>After tracking the file with Git LFS, you can add it to your Git repository and commit it as usual: <pre><code>git add your_large_file.zip\ngit commit -m \"Add large file\"\n</code></pre></p> <p>Replace your_large_file.zip with the path to your large file.</p>"},{"location":"workflow/git/#step-5-push-the-file-to-your-remote-repository","title":"Step 5: Push the File to Your Remote Repository","text":"<p>Finally, you can push your changes to your remote repository: <pre><code>git push origin main\n</code></pre> Replace main with the name of your branch if it\u2019s not main.</p> <p>By following these steps, Git LFS will handle your large files, and you should be able to push them to your remote repository without any issues.</p> <p>Please replace <code>your_large_file.zip</code> and <code>main</code> with your actual file name and branch name respectively.</p>"},{"location":"workflow/git/#git-useful","title":"Git Useful","text":""},{"location":"workflow/git/#untrack-files-to-be-ignored-named-documentationtest-in-git","title":"Untrack files to be ignored named \u201cdocumentation/test\u201d in git:","text":"<p><code>git rm --cached &lt;path&gt;</code> How To Fix Gitignore Not Working</p>"},{"location":"workflow/git/#remove-a-commit-but-keep-the-changes-in-your-working-directory","title":"Remove a commit but keep the changes in your working directory","text":"<p>git reset --soft HEAD~1</p>"},{"location":"workflow/problem_solution/","title":"Problem solution","text":""},{"location":"workflow/problem_solution/#microsoft-edge","title":"Microsoft Edge","text":""},{"location":"workflow/problem_solution/#problem","title":"Problem","text":"<pre><code>sigma_ibo@sigma-ibo:~$ microsoft-edge\n[9283:9283:0402/093408.731168:ERROR:process_singleton_posix.cc(359)] This profile appears to be in use by another Microsoft Edge process (2953) on another computer (localhost.localdomain). Microsoft Edge has locked this profile to prevent corruption. If you're sure no other processes are using this profile, you can unlock it and relaunch Microsoft Edge.\n[9283:9283:0402/093408.731251:ERROR:message_box_dialog.cc(147)] Unable to show a dialog outside the UI thread message loop: Microsoft Edge - This profile appears to be in use by another Microsoft Edge process (2953) on another computer (localhost.localdomain). Microsoft Edge has locked this profile to prevent corruption. If you're sure no other processes are using this profile, you can unlock it and relaunch Microsoft Edge.\n</code></pre>"},{"location":"workflow/problem_solution/#solution","title":"Solution","text":"<p>Delete SingletonLock in <code>/home/sigma_ibo/.config/microsoft-edge</code></p>"},{"location":"workflow/problem_solution/#yocto","title":"Yocto","text":""},{"location":"workflow/problem_solution/#problem-1","title":"Problem 1","text":"<p>File://0001.patch error</p> <p>Unable to find file file://0001-Fix.patch</p>"},{"location":"workflow/problem_solution/#solution-1","title":"Solution 1","text":"<pre><code>cd meta-sigmatek/\ngit branch\ncode ../meta-sigmatek/\ngitk\ngit rebase origin/master\ngit checkout master\ngit reset --hard\ngit checkout master\ngit pull\ngit fetch\ngit branch\ngit branch -D pamhal/virtualization\ngit branch\ngit pull\ngit fetch\ngit branch pamhal/virtual_master\ngit checkout pamhal/virtual_master\ngit branch\ngit status\ngit add recipes-kernel/stek-common/files/x86-64/defconfig\ngit commit\ngit push\ngit push --set-upstream origin pamhal/virtual_master\ngit branch\ngit pull\ncode .\ncd salamander/salamander-core2\n../init.sh -b build -m sigmatek-core2 -d salamander\nbitbake salamander-image -k\n</code></pre>"},{"location":"workflow/problem_solution/#problem-2","title":"Problem 2","text":"<pre><code>ERROR: salamander-image-1.0-r0 do_rootfs: Unable to install packages. Command '/home/sigma_ibo/Develop/Yocto_local/salamander/salamander-core2/build/tmp/work/sigmatek_core2-sigmatek-linux/salamander-image/1.0-r0/recipe-sysroot-native/usr/bin/opkg --volatile-cache -f /home/sigma_ibo/Develop/Yocto_local/salamander/salamander-core2/build/tmp/work/sigmatek_core2-sigmatek-linux/salamander-image/1.0-r0/opkg.conf -t /home/sigma_ibo/Develop/Yocto_local/salamander/salamander-core2/build/tmp/work/sigmatek_core2-sigmatek-linux/salamander-image/1.0-r0/temp/ipktemp/ -o /home/sigma_ibo/Develop/Yocto_local/salamander/salamander-core2/build/tmp/work/sigmatek_core2-sigmatek-linux/salamander-image/1.0-r0/rootfs  --force_postinstall --prefer-arch-to-version --no-install-recommends  --force-maintainer --force-overwrite install cups-locale-en lib32-cups-locale-en' returned 255:\n * opkg_prepare_url_for_install: Couldn't find anything to satisfy 'lib32-cups-locale-en'.\n\nERROR: Logfile of failure stored in: /home/sigma_ibo/Develop/Yocto_local/salamander/salamander-core2/build/tmp/work/sigmatek_core2-sigmatek-linux/salamander-image/1.0-r0/temp/log.do_rootfs.76045\nERROR: Task (/home/sigma_ibo/Develop/Yocto_local/salamander/meta-sigmatek/recipes-sigmatek/images/salamander-image.bb:do_rootfs) failed with exit code '1'\n</code></pre>"},{"location":"workflow/problem_solution/#solution-2","title":"Solution 2","text":"<p>bitbake -c do_cleanall lib32-cups</p>"},{"location":"workflow/problem_solution/#trace-cmd","title":"Trace-cmd","text":"<p>After following Rostedt Tutorial, I had following problems when using:  <pre><code>sudo trace-cmd record -e kvm:kvm_entry -e kvm:kvm_exit -A @3:823 --name Salamander4 -e all\n</code></pre></p>"},{"location":"workflow/problem_solution/#problem-1_1","title":"Problem 1","text":"<p>\"Failed to negotiate timestamps synchronization with the host\" timestamp_error.png</p>"},{"location":"workflow/problem_solution/#problem-2_1","title":"Problem 2","text":"<p>\"Cannot find host / guest tracing into the loaded streams\" kvm_combo_error.png</p>"},{"location":"workflow/problem_solution/#solution_1","title":"Solution","text":"<p>The problem was the trace-cmd version. Set both host and guest to v3.2.0 by copying the files from host to guest: <pre><code>scp /usr/local/bin/trace-cmd root@\"$ip_address\":/usr/bin\nscp /usr/local/lib64/libtracefs.so.1 root@\"$ip_address\":/lib64\nscp /usr/local/lib64/libtraceevent.so.1 root@\"$ip_address\":/lib64\n</code></pre> Now, trace-cmd version 3.2.0 is active and tracing the guest finally works with <code>trace-cmd agent</code> on the guest.</p> <p>Using kernelshark with <code>kernelshark trace.dat -a trace-Salamander4.dat</code> or simply <code>./start_kernelshark.sh</code>, we get the expected visualization. Events of the guest happen between kvm_entry and kvm_exit of the host.</p>"},{"location":"workflow/problem_solution/#bcc","title":"bcc","text":""},{"location":"workflow/problem_solution/#problem-1_2","title":"Problem 1","text":"<p>Unable to find clang libraries <pre><code>sigma_ibo@sigma-ibo:~/Desktop/latency/bcc/build$ cmake ..\n-- Latest recognized Git tag is v0.30.0\n-- Git HEAD is 6a5602cef2ebd97c351554d53a4f95532db6a568\n-- Revision is 0.30.0+6a5602ce (major 0, minor 30, patch 0)\n-- Kernel release: 6.5.0-26-generic\n-- Kernel headers: /usr/src/linux-headers-6.5.0-26-generic\n-- Found LLVM: /usr/lib/llvm-14/include 14.0.0 (Use LLVM_ROOT envronment variable for another version of LLVM)\nCMake Error at CMakeLists.txt:173 (message):\n  Unable to find clang libraries\n\n\n-- Configuring incomplete, errors occurred!\nSee also \"/home/sigma_ibo/Desktop/latency/bcc/CMakeFiles/CMakeOutput.log\".\n</code></pre></p>"},{"location":"workflow/problem_solution/#solution-1_1","title":"Solution 1","text":"<p><pre><code>sudo apt install libclang-dev\n</code></pre> Source</p>"},{"location":"workflow/problem_solution/#problem-2_2","title":"Problem 2","text":"<p>It seems that the library is trying to access the symbol bpf_module_create_b in the shared library libbcc.so.0, but it can\u2019t find it. <pre><code>root@sigma-ibo:/usr/share/bcc/tools# sudo ./kvmexit\nTraceback (most recent call last):\n  File \"/usr/share/bcc/tools/./kvmexit\", line 32, in &lt;module&gt;\n    from bcc import BPF\n  File \"/usr/lib/python3/dist-packages/bcc/__init__.py\", line 27, in &lt;module&gt;\n    from .libbcc import lib, bcc_symbol, bcc_symbol_option, bcc_stacktrace_build_id, _SYM_CB_TYPE\n  File \"/usr/lib/python3/dist-packages/bcc/libbcc.py\", line 20, in &lt;module&gt;\n    lib.bpf_module_create_b.restype = ct.c_void_p\n  File \"/usr/lib/python3.10/ctypes/__init__.py\", line 387, in __getattr__\n    func = self.__getitem__(name)\n  File \"/usr/lib/python3.10/ctypes/__init__.py\", line 392, in __getitem__\n    func = self._FuncPtr((name_or_ordinal, self))\nAttributeError: /lib/x86_64-linux-gnu/libbcc.so.0: undefined symbol: bpf_module_create_b\n</code></pre></p>"},{"location":"workflow/problem_solution/#solution-2_1","title":"Solution 2","text":"<p><pre><code>sudo rm -fr /usr/lib/python3/dist-packages/bcc\ncd /usr/share/bcc/tools &amp;&amp; sudo ./kvmexit\n</code></pre> Source</p>"},{"location":"workflow/problem_solution/#qemu","title":"QEMU","text":""},{"location":"workflow/problem_solution/#problem_1","title":"Problem","text":"<pre><code>$ sudo ./qemu_def.sh \nfailed to parse default acl file `/etc/qemu/bridge.conf'\nqemu-system-x86_64: -netdev bridge,id=e1000,br=nm-bridge: bridge helper failed\n</code></pre>"},{"location":"workflow/problem_solution/#solution_2","title":"Solution","text":"<pre><code>sudo mkdir /etc/qemu &amp;&amp; cd /etc/qemu \necho \"allow nm-bridge\" | sudo tee bridge.conf &gt; /dev/null\n</code></pre>"},{"location":"workflow/problem_solution/#kernel-patch","title":"Kernel Patch","text":""},{"location":"workflow/problem_solution/#problem-1_3","title":"Problem 1","text":"<p>Fully Preemptible Kernel (RT) not showing up in menuconfig </p>"},{"location":"workflow/problem_solution/#solution-1_2","title":"Solution 1","text":"<p>1) Run <code>make mrproper</code> 2) Then run <code>make menuconfig</code> </p> <p>This is the output Source</p> <p>OR </p> <p>In <code>arch/Kconfig</code>, search for the entry: <code>ARCH_SUPPORTS_RT</code>. </p> <p>Change the entry from</p> <p><pre><code>config ARCH_SUPPORTS_RT\n    bool\n</code></pre> to <pre><code>config ARCH_SUPPORTS_RT\n    def_bool y\n</code></pre> When you now also have the <code>EXPERT</code> (General Setup -&gt; Embedded System) flag enabled you should see the option <code>Fully Preemptible Kernel (Real-Time)</code> under General Setup -&gt; Preemption Model.</p> <p>Source</p>"},{"location":"workflow/problem_solution/#problem-2_3","title":"Problem 2","text":"<p>No rule to make target 'debian/canonical-certs.pem'</p>"},{"location":"workflow/problem_solution/#solution-2_2","title":"Solution 2","text":"<p>If you get the certificate error, execute the following in the root of the kernel source <pre><code>scripts/config --disable SYSTEM_TRUSTED_KEYS\nscripts/config --disable SYSTEM_REVOCATION_KEYS\n</code></pre> Then run make again and it should work! Source</p>"},{"location":"workflow/problem_solution/#_1","title":"Problem solution","text":""},{"location":"workflow/useful/","title":"Useful Stuff","text":""},{"location":"workflow/useful/#symbolic-link-to-windows-folder","title":"Symbolic Link to Windows Folder","text":"<p><code>ln -s /media/sigma_ibo/Windows/Dokumente\\ und\\ Einstellungen/Pamibr/Desktop/Masterarbeit/ /home/sigma_ibo/Desktop/</code> Symbolic Link to Windows Folder</p>"},{"location":"workflow/useful/#mount-windows-partition-desktop","title":"Mount Windows partition Desktop","text":"<ul> <li><code>sudo nano /etc/fstab</code> </li> <li>At the end of the file, add: UUID=0E58A36658A34B73 /home/sigma_ibo/Desktop ntfs defaults 0 0, it looks like  this </li> <li>reboot</li> </ul>"},{"location":"workflow/useful/#how-to-extract-unzip-tarxz-file","title":"How to Extract (Unzip) tar.xz File","text":"<p>How to Extract (Unzip) tar.xz File</p>"},{"location":"workflow/useful/#launch-programs-after-startup","title":"Launch programs after startup","text":"<ul> <li><code>nano /home/sigma_ibo/startup.sh</code></li> <li><code>chmod +x /home/sigma_ibo/startup.sh</code></li> <li>File: startup.sh </li> <li>Configure Startup Apps</li> </ul>"},{"location":"workflow/useful/#install-gnome","title":"Install gnome","text":"<p><code>sudo apt install gnome-shell-extension-ubuntu-dock</code></p>"},{"location":"workflow/useful/#desktop-folders-not-visible","title":"Desktop folders not visible","text":"<p><code>sudo apt install ubuntu-desktop</code></p>"},{"location":"workflow/useful/#windows-11-on-qemu-and-display-settings","title":"Windows 11 on QEMU and display settings","text":"<p>Install Windows 11 in KVM on Ubuntu 22.04 Execute virtio-win-guest-tools in VM Windows 10 VM shows 100% CPU QEMU settings: QEMU, XML win11 Windows 10 VM Settings</p>"},{"location":"workflow/useful/#remove-keyring-from-edge","title":"Remove keyring from Edge","text":"<p>To stop being prompted to unlock the \u2018default\u2019 keyring on boot, set a blank password for the keyring. - Open the utility \u201cPasswords &amp; Keys\u201d. If not installed: <code>sudo apt-get install seahorse</code> - Right-click the \u201cLogin\u201d folder and select \u201cChange Password\u201d. - Enter your old password and leave the new password blank.</p>"},{"location":"workflow/useful/#see-how-many-cores-you-have","title":"See how many cores you have","text":"<p><code>nproc</code> or <code>cat /proc/cpuinfo | grep processor | wc -l</code> or <code>cat /proc/cpuinfo | grep 'core id'</code> or <code>lscpu</code></p>"},{"location":"workflow/useful/#start_qemush-from-everywhere","title":"start_qemu.sh from everywhere","text":"<p>Script start_qemu.sh needs to be in <code>/home/sigma_ibo/Desktop/Masterarbeit/masterthesis-documentation/QEMU/</code>.  <pre><code>sudo nano ~/.bashrc\nexport PATH=$PATH:/home/sigma_ibo/Desktop/Masterarbeit/documentation/resources/QEMU/\n</code></pre></p>"},{"location":"workflow/useful/#add-konsole-to-replace-console","title":"Add konsole to replace console","text":"<p>nautilus-open-any-terminal Change default terminal with right-click option \"Open in Terminal\" in file manager</p>"},{"location":"workflow/useful/#ssh-ohne-passwort","title":"SSH ohne Passwort","text":"<p>Um eine SSH-Verbindung von Ihrem Host-Computer zu Ihrem Gast-Computer (oder Server) herzustellen, k\u00f6nnen Sie die folgenden Schritte ausf\u00fchren:</p> <ol> <li>Generieren Sie ein SSH-Schl\u00fcsselpaar auf Ihrem Host-Computer. Sie k\u00f6nnen dies mit dem Befehl <code>ssh-keygen</code> tun. Sie werden aufgefordert, ein Passwort einzugeben, aber Sie k\u00f6nnen einfach Enter dr\u00fccken, um kein Passwort zu setzen (obwohl dies aus Sicherheitsgr\u00fcnden nicht empfohlen wird).</li> </ol> <pre><code>ssh-keygen\n</code></pre> <ol> <li>Kopieren Sie Ihren \u00f6ffentlichen Schl\u00fcssel auf den Gast-Computer. Sie k\u00f6nnen dies mit dem Befehl <code>ssh-copy-id</code> tun. Ersetzen Sie <code>benutzername</code> durch Ihren Benutzernamen auf dem Gast-Computer und <code>ip_address</code> durch die IP-Adresse des Gast-Computers.</li> </ol> <pre><code>ssh-copy-id root@192.168.1.51\n</code></pre> <ol> <li>Stellen Sie eine SSH-Verbindung zum Gast-Computer her. Sie k\u00f6nnen dies mit dem Befehl <code>ssh</code> tun. Ersetzen Sie wieder <code>benutzername</code> und <code>ip_address</code> durch Ihren Benutzernamen und die IP-Adresse des Gast-Computers.</li> </ol> <pre><code>ssh root@192.168.1.51\n</code></pre> <p>Nachdem Sie diese Schritte ausgef\u00fchrt haben, sollten Sie in der Lage sein, sich ohne Passwort bei Ihrem Gast-Computer anzumelden. </p> <p>Wenn Sie den ssh-copy-id Befehl verwenden, wird Ihr \u00f6ffentlicher SSH-Schl\u00fcssel in der Datei <code>~/.ssh/authorized_keys</code> auf dem Gast-Computer (dem Computer, zu dem Sie eine SSH-Verbindung herstellen) gespeichert.</p> <p>Jede Zeile in dieser Datei repr\u00e4sentiert einen \u00f6ffentlichen Schl\u00fcssel, der f\u00fcr die Authentifizierung zugelassen ist. Wenn Sie also mehrere Schl\u00fcssel haben, die Sie verwenden, um sich bei diesem Computer anzumelden, wird jeder Schl\u00fcssel als separate Zeile in dieser Datei angezeigt</p>"},{"location":"workflow/useful/#check-on-which-cpu-a-task-is-running","title":"Check on which CPU a task is running","text":"<p><code>ps -eo pid,psr,comm | grep &lt;name&gt;</code></p>"},{"location":"workflow/useful/#limit-wsl2-resources","title":"Limit WSL2 resources","text":"<p>Edit the WSL config to limit the memory usage as mentioned here. <pre><code>#turn off all wsl instances such as docker-desktop\nwsl --shutdown\nnotepad \"$env:USERPROFILE/.wslconfig\"\n</code></pre> Set the values you want for CPU core and Memory:</p> <pre><code>[wsl2]\nmemory=3GB   # Limits VM memory in WSL 2 up to 3GB\nprocessors=2 # Makes the WSL 2 VM use two virtual processors\n</code></pre>"},{"location":"workflow/useful/#connect-to-hardware-salamander-4","title":"Connect to hardware Salamander 4","text":"<p>ssh root@192.168.1.244</p>"},{"location":"workflow/useful/#boot-parameters","title":"Boot parameters","text":"<p>cat /proc/cmdline</p>"},{"location":"workflow/useful/#stress-the-cpus","title":"Stress the CPUs","text":"<p>stress -c $(nproc)</p>"},{"location":"workflow/useful/#check-cpu-maxmhz-minmhz-current-mhz","title":"Check cpu MAXMHZ, MINMHZ, CURRENT MHZ","text":"<pre><code>$ lscpu --all --extended\nCPU NODE SOCKET CORE L1d:L1i:L2:L3 ONLINE    MAXMHZ   MINMHZ      MHZ\n  0    0      0    0 0:0:0:0          yes 5000,0000 400,0000 2900.000\n  1    0      0    1 4:4:1:0          yes 5000,0000 400,0000 2900.000\n  2    0      0    2 8:8:2:0          yes 5200,0000 400,0000 2900.000\n  3    0      0    3 12:12:3:0        yes 5200,0000 400,0000 4174.117\n  4    0      0    4 16:16:4:0        yes 5000,0000 400,0000 2900.000\n  5    0      0    5 20:20:5:0        yes 5000,0000 400,0000 2900.000\n  6    0      0    6 24:24:6:0        yes 4000,0000 400,0000 2926.742\n  7    0      0    7 25:25:6:0        yes 4000,0000 400,0000 2900.000\n  8    0      0    8 26:26:6:0        yes 4000,0000 400,0000 2900.000\n  9    0      0    9 27:27:6:0        yes 4000,0000 400,0000 2900.000\n 10    0      0   10 28:28:7:0        yes 4000,0000 400,0000 3332.776\n 11    0      0   11 29:29:7:0        yes 4000,0000 400,0000 2900.000\n 12    0      0   12 30:30:7:0        yes 4000,0000 400,0000 2900.000\n 13    0      0   13 31:31:7:0        yes 4000,0000 400,0000 3218.336\n</code></pre>"},{"location":"workflow/useful/#see-threads-of-a-task","title":"See threads of a task","text":"<pre><code>sigma_ibo@sigma-ibo:~$ ls /proc/464458/task | wc -l\n6\nsigma_ibo@sigma-ibo:~$ htop -H -p 464458\n</code></pre>"},{"location":"workflow/useful/#thread-priorities","title":"Thread priorities","text":"<p>Set / Manipulate Real Time Attributes of a Linux Process Full list of all threads on the system with process id, thread id, short name, scheduling policy, nice value and realtime-priority. ps reports SCHED_DEADLINE as DLN, SCHED_OTHER as TS, SCHED_BATCH as B, SCHED_IDLE as IDL, SCHED_FIFO as FF and SCHED_RR as RR. <pre><code>ps axHo psr,pid,lwp,args,policy,nice,rtprio\n</code></pre> All the tasks on CPU 13 <pre><code>ps axHo psr,pid,lwp,args,policy,nice,rtprio | awk '$1 == 13'\n</code></pre> All rt processes <pre><code>ps axHo psr,pid,lwp,args,policy,nice,rtprio | grep -P '\\s[0-9]+\\s*$'\nps axHo psr,pid,lwp,args,policy,nice,rtprio | awk '$NF ~ /^[0-9]+$/' | sort -k4,4 -V &gt; rt_processes.txt\n</code></pre> Set all threads of a process to a real-time priority <pre><code>ps -T -p $(pgrep -f \"qemu-system-x86_64 -M pc,ac\") | awk '{print $2}' | tail -n +2 | xargs -I {} sudo chrt -f -p 10 {}\n</code></pre> Watch it <pre><code>watch -d -c -n 1 \"ps axHo psr,pid,lwp,args,policy,nice,rtprio | awk '\\$1 == 4'\"\n</code></pre></p>"},{"location":"workflow/useful/#test-suite-rt-tests","title":"Test suite: rt-tests","text":"<p>An Analysis of the Real-Time Performance of Linux Kernels The rt-tests test suite contains programs to test various real-time Linux features; more details are available here. The step-by-step procedure to install the rt-tests suite from the source is given below.</p> <p>First, you need to install the libraries: <pre><code>sudo apt-get install build-essential libnuma-dev\n</code></pre></p> <p>Next, clone the code and build from the source: <pre><code>git clone git://git.kernel.org/pub/scm/utils/rt-tests/rt-tests.git\ncd rt-tests\ngit checkout stable/v1.0\nmake all\nmake install\n</code></pre></p>"},{"location":"workflow/useful/#useful-not-needed","title":"Useful Not needed","text":""},{"location":"workflow/useful/#add-more-cpus-to-qemu-virtual-machine-with-smp-option","title":"Add more CPUs to QEMU virtual machine with -smp option","text":"<p>The -smp option specifies the number of CPUs</p> <p>Replace n with the number of CPUs you want to add. For example, if you want to add 4 CPUs, you would use -smp cpus=4.</p> <p>After making these changes, the specified number of CPUs will be available when you boot your Yocto image with this script.  <pre><code>exec qemu-system-x86_64 -M pc,accel=kvm -kernel ./bzImage \\\n-m 2048 -drive file=salamander-image-sigmatek-core2.ext4,format=raw,media=disk \\\n-append \"console=ttyS0 console=tty1 root=/dev/sda rw panic=1 sigmatek_lrt.QEMU=1 ip=dhcp rootfstype=ext4 \\\n-net nic,model=e1000,netdev=e1000 -netdev bridge,id=e1000,br=nm-bridge \\\n-fsdev local,security_model=none,id=fsdev0,path=drive-c -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_&gt;\n-drive if=pflash,format=qcow2,file=ovmf.code.qcow2 \\\n-smp cpus=n \\\n-no-reboot -nographic\n</code></pre> Check with: <code>cat /sys/devices/system/cpu/online</code> <pre><code>root@sigmatek-core2:~# cat /sys/devices/system/cpu/online\n0-9\n</code></pre></p>"},{"location":"workflow/useful/#isolate-cpus-in-qemu-with-isolcpus","title":"Isolate CPUs in QEMU with isolcpus","text":"<p>To use isolcpus in a Yocto image, you need to add it to the kernel command line parameters. In your case, these parameters are specified in the -append option in your QEMU command. Add isolcpus=x,y,z. Replace x,y,z with the CPU cores you want to isolate. For example, if you want to isolate cores 0, 1 and 2, you would use isolcpus=0,1,2. <pre><code>exec qemu-system-x86_64 -M pc,accel=kvm -kernel ./bzImage \\\n-m 2048 -drive file=salamander-image-sigmatek-core2.ext4,format=raw,media=disk \\\n-append \"console=ttyS0 console=tty1 root=/dev/sda rw panic=1 sigmatek_lrt.QEMU=1 ip=dhcp rootfstype=ext4 isolcpus=0,1,2\" \\\n-net nic,model=e1000,netdev=e1000 -netdev bridge,id=e1000,br=nm-bridge \\\n-fsdev local,security_model=none,id=fsdev0,path=drive-c -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_&gt;\n-drive if=pflash,format=qcow2,file=ovmf.code.qcow2 \\\n-smp cpus=n \\\n-no-reboot -nographic\n</code></pre> Check with: <code>cat /sys/devices/system/cpu/isolated</code> <pre><code>root@sigmatek-core2:~# cat /sys/devices/system/cpu/isolated\n0-2\n</code></pre></p>"},{"location":"workflow/useful/#gid-pid-of-processes","title":"Gid PID Of processes","text":"<p>Start latency and write output to latency_output.txt: <code>latency -T 60 &gt; latency_output.txt 2&gt;&amp;1 &amp;</code> Get ID of xenomai task: <code>ps aux | grep latency</code> <pre><code>root@sigmatek-core2:~# latency -T 60 &gt; latency_output.txt 2&gt;&amp;1 &amp;\n[1] 557\nroot@sigmatek-core2:~# ps aux | grep latency\nroot       557  0.0  0.6  14040 12852 ttyS0    SLl  11:34   0:00 latency -T 60\nroot       563  0.0  0.0   3256  1148 ttyS0    S+   11:34   0:00 grep latency\n</code></pre></p>"},{"location":"workflow/useful/#assign-tasks-to-the-isolated-cpus","title":"Assign tasks to the isolated CPUs","text":"<p>To assign these latency tasks to the isolated CPUs, you can use the taskset command with the process ID (PID) of each latency task. For example, if you want to assign the latency task with PID 536 to CPU 1, you would use:</p> <p><code>taskset -pc x abc</code></p> <p>Remember to replace abc with the actual PID of the latency task. You can repeat this process for each latency task and each isolated CPU.</p>"},{"location":"workflow/useful/#kill-processes","title":"Kill processes","text":"<p>Kill processes with <code>kill x</code></p>"},{"location":"workflow/useful/#m-error-message","title":"^M error message","text":"<p>The error message you're seeing is typically caused by a mismatch in line endings. Scripts that have been edited or created on Windows use a different line ending (<code>\\r\\n</code>) than Unix/Linux (<code>\\n</code>). The <code>^M</code> in the error message is a visual representation of <code>\\r</code> (carriage return), which is not expected or understood by the Linux shell.</p> <p>You can convert the line endings of your script to the Unix format using a tool like <code>dos2unix</code>. Here's how you can do it:</p> <pre><code>sudo apt-get install dos2unix  # Install dos2unix tool\ndos2unix &lt;file&gt;\n</code></pre>"},{"location":"workflow/useful/#split-too-long-prompt","title":"Split too long Prompt","text":"<p>ChatGPT PROMPTs Splitter</p>"},{"location":"workflow/useful/#configure-ip-addresses","title":"Configure ip addresses","text":"<p>Configure PC to <code>10.10.1.1</code>.  Salamander Gateway set to <code>10.10.1.229</code></p>"},{"location":"workflow/useful/#ubuntu-vm-on-virtual-machine-manager","title":"Ubuntu VM on virtual machine manager","text":"<p>After giving the VM access to the vsocket, and installing trace-cmd along with dependancies, run <code>trace-cmd agent</code>. Now, the guest is able to negotiate with host about timestamp synchronization. After running <code>./start_kernelshark.sh</code>, we can view KVM Combo plots</p>"},{"location":"workflow/vscode/","title":"VSCode","text":"command Description ^.word.$ Delete lines containing word ^(\\s)*$\\n Delete blank lines"},{"location":"workflow/meetings/rauh/","title":"Rauh Fragen","text":"<ul> <li>Code / Gro\u00df oder klein?</li> <li>This script will be adjusted </li> </ul>"},{"location":"workflow/meetings/richard/","title":"Richard","text":""},{"location":"workflow/meetings/richard/#am-dienstag-20-februar-2024-1120","title":"Am Dienstag, 20. Februar 2024, 11:20","text":"<p>Hallo Halil,</p> <p>375us ist halt weit weg von dem was Salamander sonst an Latenz hat. Damit kann man nur wenig anfangen. Aber ich w\u00fcrde erstmal schauen die Latenz besser in Griff zu bekommen. \u2705</p> <p>Wie k\u00f6nnte ich das am besten besser in Griff bekommen? Hast du da einen Weg f\u00fcr mich? Oder generell wie ich vorgehen soll?</p> <p>Wie letztens erw\u00e4hnt, im ersten Schritt daf\u00fcr sorgen, dass die VM immer die CPU hat und m\u00f6glichst wenig unterbrochen wird. \u2705</p> <p>Ich wei\u00df jetzt nicht genau was deine Aufgabe ist.</p> <p>So lautet der Titel meiner Masterarbeit: Virtualisierung eines Echtzeit-Betriebssystems zur Steuerung eines Roboters mit Schwerpunkt auf die Einhaltung der Echtzeit</p> <p>Das klingt eh gut. Du kannst am Host auch mal messen wann die VM immer die CPU hat und mit dem Gast vergleichen. Da solltest dann eine sch\u00f6ne Korrelation zu den Ausrei\u00dfern sehen. Mit den VMEnter/Exit Tracpoints solltest das gut sehen. Siehe: https://www.youtube.com/watch?v=v0ocveEsvNU \u274c</p> <p>So kannst Schritt f\u00fcr Schritt die Latenz verbessern und jeweils nachweisen was nun wie viel gebracht hat. \u274c</p> <p>LG, //richard</p>"},{"location":"workflow/meetings/richard/#am-dienstag-20-februar-2024-1241","title":"Am Dienstag, 20. Februar 2024, 12:41","text":"<p>Hallo Halil,</p> <p>Ich habe bis jetzt folgendes getan, um die Latenz zu reduzieren</p> <p>1) Die Option -smp cpus=10 im QEMU-Befehl hinzugef\u00fcgt um die Anzahl der CPUs zu erh\u00f6hen auf 10</p> <p>Was war die Idee dahinter? Mehr CPUs im Gast bringt nur was wenn gleich viele am Host hast. Und die Latenz an sich wird immer pro CPU gemessen. D.h. der Test pinnt einen Thread auf eine CPU. \u2705</p> <p>2) isolcpus=0,1,2 zur -append Option in QEMU hinzugef\u00fcgt, um 3 CPUs zu isolieren</p> <p>Naja, du musst das am Host machen. Der Gast ist ja schon echtzeitf\u00e4hig, jetzt gilt es daf\u00fcr zu sorgen, dass der Host ihm nicht in die Suppe spuckt. \u2705</p> <p>3) Jetzt benutze ich taskset um diese cpus zu xenomai zuzuweisen und dann werde ich nochmal testen</p> <p>Bin ich am richtigen Weg?</p> <p>Nicht wirklich. Du wirst am Host viel drehen m\u00fcssen. \u2705</p> <p>LG, //richard</p>"},{"location":"workflow/meetings/richard/#richard-meeting-11032024","title":"Richard Meeting 11.03.2024","text":"<p>CPU isolierung l\u00e4uft auf User space, nicht kernel space QEMU mit echtzeit prio chrt einschalten aber niedrige prio 1-99</p> <p>1) out-of-of-the-box 2) cpi isolated auf user space 3) realtime priority experimentieren 4) cpu soll keine interrupts behandeln -&gt; welche cpu soll ich w\u00e4hlen? 5) HYprerthreading ausschalten damit cpu cores nicht geteilt werden 6) kernelshark</p> <p>https://www.suse.com/c/cpu-isolation-nohz_full-part-3/ https://sigma-star.at/blog/2022/02/linux-proc-prios/ https://www.osadl.org/Create-a-latency-plot-from-cyclictest-hi.bash-script-for-latency-plot.0.html</p>"},{"location":"workflow/meetings/richard/#richard-meeting-19032024","title":"Richard Meeting 19.03.2024","text":"<p>[  235.780378][  T336] X-LRT-Timer: Sigmatek LRT Driver: time-keeper: detected overrun when waiting on period, ovr=2, res=-110</p> <p>QEMU, VirtualBox, KVM, and Hyper-V? \u2192 Salamander4</p> <p>kernel patch kernel-tasks chrt kvm_exit warum? kernel tasks auf andere cpu pinnen oder h\u00f6here prio als andere kernel tasks haben -&gt; zb netzwerkkarte</p>"},{"location":"workflow/meetings/richard/#richard-meeting-09042024","title":"Richard Meeting 09.04.2024","text":""},{"location":"workflow/meetings/richard/#isolate-cpu","title":"isolate CPU","text":"<p>taskset</p>"},{"location":"workflow/meetings/richard/#defconfig","title":"defconfig","text":"<p>CONFIG_PARAVIRT=y CONFIG_KVM_GUEST=y CONFIG_X86_IOAT_VAPIC_BROKEN_CTL=y CONFIG_MTRR_SANITIZER=y CONFIG_ARCH_CPUIDLE_HALTPOLL=y CONFIG_HUGETLBFS=y</p>"},{"location":"workflow/meetings/richard/#smp_affinity","title":"smp_affinity","text":"<p>cat /proc/irq//smp_affinity sudo chmod 777 /proc/irq//smp_affinity sudo echo dffff &gt; /proc/irq/*/smp_affinity  </p>"},{"location":"workflow/meetings/richard/#enable-apicv","title":"Enable APICV","text":"<p>/sys/module/kvm_intel/parameters/enable_apicv</p>"},{"location":"workflow/meetings/richard/#qemu_vapic","title":"QEMU_vapic","text":"<p>-cpu host,hv-passthrough</p>"},{"location":"workflow/meetings/richard/#trace-cmd-report-host-and-guest","title":"trace-cmd report host and guest","text":"<p>results_guest_report.txt results_host_report.txt</p> <p>https://www.sigma-star.at/blog/2022/02/linux-proc-prios/</p>"},{"location":"workflow/meetings/richard/#richard-meeting-15052024","title":"Richard Meeting 15.05.2024","text":"<p>Richard Weinberger 13:12 lstopo aus paket hwloc Richard Weinberger 13:34 https://docs.kernel.org/trace/ftrace.html#latency-tracing-and-events Richard Weinberger 13:37 https://access.redhat.com/documentation/de-de/red_hat_enterprise_linux_for_real_time/7/html/tuning_guide/latency_tracing_using_trace-cmd Richard Weinberger 13:38 \"trace-cmd latency tracer\" Richard Weinberger 13:49 CONFIG_RCU_CPU_STALL_TIMEOUT Richard Weinberger 13:52 https://wiki.linuxfoundation.org/realtime/documentation/technical_details/rcu</p>"},{"location":"workflow/meetings/richard/#richard-meeting-28052024","title":"Richard Meeting 28.05.2024","text":"<ul> <li>QEMU different threads</li> <li>cat /proc/interrupts</li> <li>Kernel parameters<ul> <li>CONFIG_RCU_CPU_STALL_TIMEOUT</li> <li>CONFIG_PREEMPT_RCU=y</li> <li>CONFIG_LOCKUP_DETECTOR</li> <li>CONFIG_DETECT_HUNG_TASK</li> <li>CONFIG_NO_HZ</li> <li>CONFIG_HZ_*</li> <li>CONFIG_NO_HZ_FULL</li> </ul> </li> <li>2 CPUs? smp</li> </ul> <p>RT_Performance_Tuning_Best_Practice_KVM_VM.pdf results in xenomai_compare.md QEMU with 2 CPUs</p> <p>\u274c\u2705</p>"},{"location":"workflow/meetings/wober/","title":"Wober","text":""},{"location":"workflow/meetings/wober/#thema","title":"Thema","text":"<ul> <li> <p>Erstellung einer Echtzeit-Robotersteuerungsplattform:  Ich plane, eine Plattform zu erstellen, die auf Salamander OS basiert und Xenomai f\u00fcr Echtzeitfunktionen nutzt. Diese Plattform wird die Grundlage f\u00fcr meine Robotersteuerungsanwendungen sein.</p> </li> <li> <p>Evaluation der Virtualisierungsplattform:  Ich werde verschiedene Virtualisierungsplattformen wie QEMU, Hyper-V, Virtual Box usw. evaluieren. Dies ist ein wichtiger Schritt, um die beste Plattform f\u00fcr meine Anforderungen zu finden.</p> </li> <li> <p>Anbindung eines Roboters \u00fcber eine VARAN-Bus Schnittstelle: Ich plane, einen Roboter in mein System zu integrieren. Ich werde eine VARAN-Bus Schnittstelle verwenden, um eine schnelle und zuverl\u00e4ssige Kommunikation zwischen dem Roboter und dem Steuerungssystem zu gew\u00e4hrleisten.</p> </li> <li> <p>Erstellung und Konfiguration des Systems in der Yocto-Umgebung:  Ich werde das Yocto-Framework verwenden, um mein Embedded Linux System zu erstellen und zu konfigurieren. Yocto bietet viele Tools und Funktionen, die mir bei der Erstellung und Konfiguration meines Systems helfen k\u00f6nnen.</p> </li> <li> <p>Verbesserung der Reaktionszeit und Zuverl\u00e4ssigkeit von Roboteranwendungen:  Mein Hauptziel ist es, herauszufinden, wie die Integration von Echtzeitfunktionen und effizienten Kommunikationssystemen die Reaktionszeit und Zuverl\u00e4ssigkeit von Roboteranwendungen verbessern kann. Ich strebe an, die Leistung und Zuverl\u00e4ssigkeit meiner Roboteranwendungen zu verbessern, indem ich ihre F\u00e4higkeit verbessere, in Echtzeit auf Ereignisse zu reagieren.</p> </li> </ul>"},{"location":"workflow/meetings/wober/#vorteile","title":"Vorteile","text":"<ul> <li> <p>Fehlerbehebung und Optimierung: Durch die Virtualisierung k\u00f6nnen Entwickler Probleme in Echtzeitsystemen identifizieren und beheben, ohne die tats\u00e4chlichen Systeme zu beeintr\u00e4chtigen. Sie k\u00f6nnen verschiedene Szenarien simulieren und die Leistung des Systems unter diesen Bedingungen analysieren.</p> </li> <li> <p>Sicherheit und Zuverl\u00e4ssigkeit: Die Virtualisierung erm\u00f6glicht es, das Verhalten von Echtzeitsystemen in Ausnahmesituationen zu testen, ohne tats\u00e4chliche Risiken einzugehen. Dies kann dazu beitragen, die Sicherheit und Zuverl\u00e4ssigkeit dieser Systeme zu verbessern.</p> </li> <li> <p>Kostenersparnis: Die Verwendung von virtuellen Modellen anstelle von physischen Prototypen kann zu erheblichen Kosteneinsparungen f\u00fchren, insbesondere in den fr\u00fchen Phasen der Entwicklung.</p> </li> <li> <p>Flexibilit\u00e4t: Mit der Virtualisierung k\u00f6nnen verschiedene Konfigurationen und Anpassungen von Echtzeitsystemen getestet werden, ohne dass \u00c4nderungen an der Hardware vorgenommen werden m\u00fcssen.</p> </li> </ul>"},{"location":"workflow/meetings/wober/#zu-beachten","title":"Zu beachten","text":"<p>Kapitel 1: Ich muss begr\u00fcnden warum ich das mache weil es gibt schon bestehende materialien, warum neu? Nicht wegen Firma! Welche Requirements? basieren auf normen? physik? begr\u00fcnden.  Problem: Integration von Echtzeit-Funktionen (Harter Echtzeit) in eine virtualisierte Robotersteuerungsplattform</p>"}]}