{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#topic-of-masters-thesis","title":"Topic of Master's Thesis","text":"<p>Virtualisation of a real-time operating system to control a robot with a focus on real-time compliance </p>"},{"location":"#abstract","title":"Abstract","text":"<p>Virtualization of real-time operating systems systems for robotic control has many advantages in comparison to traditional hardware-based approaches. Solutions based on pure hardware are often built for a distinct purpose and are hence limited in flexibility. It is difficult to adapt the hardware topology to new requirements and can be costly, especially when scaling operations. Physical access for updates and maintenance is challenging, leading to downtime and lost productivity. While virtualization addresses these issues, it introduces increased overhead and latency. This thesis investigates the virtualization of the proprietary Salamander 4 operating system, using QEMU/KVM. Salamander 4 is built with Yocto and employs hard real-time with Xenomai 3. The primary objective is to bridge the latency gap between the virtualized and bare metal versions in order to ensure deterministic and reliable behavior, which is crucial for real-time robotic applications. Initial latency measurements revealed a significant performance gap between the bare metal and virtualized setup. Thus, an extensive tuning process is carried out to achieve real-time performance and determinism. These modifications involve configurations spanning the BIOS, kernel, host operating system, QEMU/KVM virtualization layer, and the Salamander 4 operating system (guest) itself. The worst-case latency was brought down from 707.622\u03bcs to 17.134\u03bcs, closely aligning with the bare metal performance of 10.709\u03bcs. In addition, the improvement in real-time performance and determinism is validated using a robotic application, where the tuned virtualization is compared with the untuned and the hardware version. Altogether, this thesis provides a comprehensive blueprint for making a virtualized guest system real-time capable in a host system with deterministic behavior.  </p> <p>Keywords{Virtualization, Real-Time Systems, Latency Reduction, Robotic Control}</p>"},{"location":"#masterarbeit","title":"Masterarbeit","text":"<p>Hier ist die Masterarbeit.</p> <p>Info</p> <p>Diese Masterarbeit wird laufend aktualisiert. Zu einem sp\u00e4teren Zeitpunkt kann mehr Inhalt vorhanden sein.</p> Status  der Masterarbeit: Final fine-tunings"},{"location":"#paper","title":"Paper","text":"<p>Hier ist das Paper.</p> <p>Info</p> <p>Dieses Paper wird laufend aktualisiert. Zu einem sp\u00e4teren Zeitpunkt kann mehr Inhalt vorhanden sein.</p> Status  des Papers: Final fine-tunings"},{"location":"general/checklist/","title":"Checklist","text":""},{"location":"general/checklist/#done","title":"Done","text":"<ul> <li> Install Ubuntu 22.04.3 LTS</li> <li> Local Yocto Build: Salamander4 </li> <li> Linux Kernel Configuration with Xenomai</li> <li> Boot Salamander4 in QEMU under native Ubuntu </li> <li> Configured bridge for QEMU</li> <li> Connected LasalClass2 with [Salamander 4]</li> <li> Enabled access to the vsocket for guest</li> <li> trace-cmd and kernelshark with Salamander4 as guest </li> <li> Used the Xenomai test suite: latency -T 60` </li> <li> Isolated host CPU for guest</li> <li> Latency got better after isolation</li> <li> Analyze Host and Guest Processes</li> <li> Latency got much better after rt-patch</li> <li> Latency got even better after Intels RT_Performance_Tuning_Best_Practice_KVM_VM.pdf: xenomai_compare_latmax.md</li> <li> Move robot motors with salamander hardware</li> <li> Robotic application </li> <li> Test latency with hardware and virtualization </li> </ul>"},{"location":"general/checklist/#appendix-hardware-and-os-configuration-checklist","title":"Appendix: Hardware and OS configuration checklist","text":"<p>Real-time programming with Linux This serves as a non-exhaustive starting point on the things to check for the hardware and OS. The list is constructed based on my survey of the literature (mostly conference talks, with some internet articles). Remember to always validate the final scheduling latency with something like cyclictest!</p> <ul> <li> Disable SMT</li> <li> Disable dynamic frequency scaling</li> <li> Check for the presence of system management interrupts; if possible, consult with the hardware vendor (remember to always verify their claims)</li> <li> Understand the NUMA of the computer and minimize cross-node memory access within the RT process</li> <li> Disable RT throttling</li> <li> Disable any unneeded RT services/daemons already running on the OS</li> <li> Possibly setup isolcpu (or use cgroups to accomplish the same thing)</li> <li>[] Look into kernel configurations that may affect RT performance such as CONFIG_LOCKUP_DETECTOR, CONFIG_DETECT_HUNG_TASK, CONFIG_NO_HZ, CONFIG_HZ_*, CONFIG_NO_HZ_FULL, and possibly more.</li> <li>[] Configure the memory lock and rtprio permissions in /etc/security/limits.d.</li> <li> Do the latency_reduction_steps.md</li> <li>[]</li> </ul>"},{"location":"general/components/","title":"Components","text":""},{"location":"general/components/#angabe","title":"Angabe","text":"<p>Virtualisierung eines Echtzeit-Betriebssystems zur Steuerung eines Roboters mit Schwerpunkt auf die Einhaltung der Echtzeit</p>"},{"location":"general/components/#yocto-umgebung","title":"Yocto-Umgebung","text":"<p>Build with Yocto</p>"},{"location":"general/components/#salamander-os","title":"Salamander OS","text":"<p>Build LRT</p>"},{"location":"general/components/#xenomai","title":"Xenomai","text":"<p>Preempt_rt.png Xenomai.png</p>"},{"location":"general/components/#lasal-class","title":"Lasal CLass","text":"<p>Lasal Class 2 english </p>"},{"location":"general/components/#qemu","title":"QEMU","text":"<p>QEMU documentation</p>"},{"location":"general/components/#pcv-522","title":"PCV-522","text":"<p>PCI-Einsteckmodul, das als Schnittstelle zwischen einem PC und dem VARAN-Bus dient PCV 522.pdf </p>"},{"location":"general/components/#pw-022","title":"PW 022","text":"<p>PWM-Modul PW 022.pdf Sigmatek: PW 022</p>"},{"location":"general/components/#robot","title":"Robot","text":"<p>Robot assembly Robot program with LCD Display mg996r-servo-motor-datasheet Tinkercad </p>"},{"location":"general/protocol/","title":"Protocol","text":""},{"location":"general/protocol/#dual-boot","title":"Dual Boot","text":"<p>1) Flash SSD by installing etcher 2) Ubuntu and Windows on same machine</p>"},{"location":"general/protocol/#install-salamander4-os","title":"Install Salamander4 OS","text":"<p>1) Install Ubuntu 22.04.3 LTS 2) Do everything in build_with_yocto.md</p>"},{"location":"general/protocol/#ssh-to-device","title":"SSH to device","text":"<p>Connect to device with <code>ssh -oHostKeyAlgorithms=+ssh-rsa root@10.10.1.229</code> or <code>ssh -p 22 root@192.168.1.x</code> (changes often)</p>"},{"location":"general/protocol/#lasalclass2-to-device","title":"LasalClass2 to device","text":"<p>Connect LasalClass2 with Salamander 4, IP of Salamander4 device</p>"},{"location":"general/protocol/#configure-bridge-for-qemu","title":"Configure bridge for QEMU","text":"<p>This setup allows the virtual machines to communicate with the outside network through the Ethernet connection provided by either the laptop or the docking station.</p> name device enp0s31f6 Laptop's Ethernet port enx4cd717733f80 Docking station's Ethernet port <ul> <li>Disable ipv4 and ipv6</li> <li>Enter nmtui</li> <li>Edit Connection and \\&lt;Add&gt;. Select Bridge.</li> <li>Edit and \\&lt;Add&gt; Ethernet.</li> <li>Copy name enx4cd717733f80 (4C:D7:17:73:3F:80) of Wired connection 2</li> <li>Edit Connection of Ethernet connection 1 so that it automatically connects.</li> <li>Activate Connection.</li> <li>Result should look like this and this.</li> <li>More info in nmbridge.md. </li> </ul>"},{"location":"general/protocol/#reduce-latency","title":"Reduce latency","text":"<p>We test the system using the Xenomai test suite - <code>latency</code> - <code>clocktest</code> </p>"},{"location":"general/protocol/#max-latency-default","title":"Max Latency default","text":"<p>Default latency  <pre><code>sigma_ibo@pamhal:$ ps -eo pid,psr,comm | grep qemu\n   7295  10 start_qemu.sh\n   7298  17 qemu-system-x86\n</code></pre></p> <p>latency -h -s -T 600 -g max_latency_default_10min.txt</p> <p>lat worst is 4070.018</p>"},{"location":"general/protocol/#max-latency-with-taskset","title":"Max Latency with taskset","text":"<p>To isolate CPUs on your host system (Ubuntu), you can add the <code>isolcpus</code> option to the kernel boot configuration. Here are the steps you can follow:</p> <ol> <li>Open the GRUB configuration file with a text editor. You can use the <code>nano</code> editor for this. Execute the following command in your terminal:     <pre><code>sudo nano /etc/default/grub\n</code></pre></li> <li>Search for the entry <code>GRUB_CMDLINE_LINUX</code> and add <code>isolcpus=0,1,2,3,4</code> (or the corresponding CPU numbers you want to isolate). It should then look like this:     <pre><code>GRUB_CMDLINE_LINUX=\"isolcpus=0,1,2,3,4\"\n</code></pre></li> <li> <p>Save the changes and close the editor. If you are using <code>nano</code>, you can do this by pressing <code>Ctrl+X</code>, then typing <code>Y</code> to save the changes, and finally pressing <code>Enter</code> to close the editor.</p> </li> <li> <p>Update GRUB with the following command:     <pre><code>sudo update-grub\n</code></pre></p> </li> <li>Reboot your system for the changes to take effect.</li> </ol> <p>Check with: <code>cat /sys/devices/system/cpu/isolated</code></p> <pre><code>sigma_ibo@pamhal:~$ cat /sys/devices/system/cpu/online \n0-19\nsigma_ibo@pamhal:~$ cat /sys/devices/system/cpu/isolated\n0-4\n</code></pre> <p>After taskset on CPU4 with <code>qemu_def_2taskset_vsock_nmbridge.sh</code> <pre><code>sigma_ibo@pamhal:$ ps -eo pid,psr,comm | grep qemu\n   8752   0 start_qemu.sh\n   8755   4 qemu-system-x86\n</code></pre> latency -h -s -T 600 -g max_latency_with_taskset_10min.txt</p> <p>lat worst reduced from 4070.018 to 457.545 with stats</p>"},{"location":"general/protocol/#enable-preempt_rt-kernel","title":"Enable Preempt_RT Kernel","text":"<p>Either do everything in kernel-patch.md to patch the kernel and enable Fully Preemptible Kernel (RT), or simply enable Ubuntu Pro's real-time kernel, here.</p> <p>Info</p> <p>Before the isolation of CPU x, both kernel threads and user processes were running on this CPU. The user processes included various applications such as msedge, code, bash and qemu-system-x86.</p> <p>After isolating CPU x, only kernel threads and the qemu-system-x86 process appear to be running on this CPU. There do not appear to be any other user processes running on this CPU.</p> <p>The isolcpus option prevents the kernel from scheduling normal (non-real-time) processes on the isolated CPUs. However, there are some exceptions:</p> <ul> <li>If a process is explicitly set to run on an isolated CPU (for example with taskset), it will run on that CPU even if it is isolated.</li> <li>Some kernel threads can run on isolated CPUs because they are not controlled by the normal scheduler. These include the threads you see in your output, such as kthreadd, migration/4, ksoftirqd/4, kworker/4:0-events and others.</li> <li>Interrupts can be handled on isolated CPUs unless they are explicitly redirected with the irqaffinity option.</li> </ul> <p>latency -T 600</p> <p>lat worst reduced from 457.545 to 32.216 with stats</p>"},{"location":"general/protocol/#realtime-priority","title":"Realtime priority","text":"<p>Danger</p> <p>Setting a real-time priority of 99 for a process means that this process has the highest priority in the system and is executed before all other processes. This can result in other processes, including important system processes, not receiving the CPU time they need to function properly. This can lead to system instability and, in the worst case, to the system becoming unresponsive or \"crashing\".</p> <p>It is important to be careful when using real-time priorities and ensure that other important processes still get the CPU time they need. It might be helpful to gradually increase the real-time priority and observe the effects on the system instead of jumping straight to the highest priority.</p> <p>To see the real-time priorities of all running processes, have a look at thread priorities.</p>"},{"location":"general/protocol/#configuring-the-system-for-real-time","title":"Configuring the system for real-time","text":"<p>For now, PREEMPT_RT is a set of patches that is supposed to be applied on top of mainline Linux. Most Linux distributions do not build it by default, and you will most likely have to do it yourself [3]. How this can be done falls outside the scope of this post, but there are plenty of guides out there. Hopefully in the near future, all of PREEMPT_RT's functionality will be merged in to mainline, and Linux distributions will provide RT-enabled kernels out-of-the-box.</p> <p>Once you successfully compiled the RT kernel, the default hardware and OS configurations are usually not tuned correctly for RT. The following hardware and OS configurations should likely always be checked and tuned: latency_reduction_steps.md</p>"},{"location":"general/protocol/#third-process-is-for-latency-minimization","title":"Third process is for latency minimization","text":"<pre><code>13    2972    2972 qemu-system-x86_64 -M pc,ac FF    -     98\n13    2972    2976 qemu-system-x86_64 -M pc,ac FF    -     98\n13    2972    3292 qemu-system-x86_64 -M pc,ac FF    -     90\n13    2972    8699 qemu-system-x86_64 -M pc,ac FF    -     95\n</code></pre> <p>Salamander 4 latency comparison </p>"},{"location":"general/protocol/#pci-initalization","title":"PCI initalization","text":"<p>sudo modprobe vfio-pci lspci -v lspci -nn sudo sh -c 'echo \"5112 2200\" &gt; /sys/bus/pci/drivers/vfio-pci/new_id' lspci -v</p>"},{"location":"general/timeline/","title":"Timeline","text":"Date Log Thursday, 08.02.2024 Dual boot Windows and Ubuntu Friday, 09.02.2024 Booted Salamander 4 on Ubuntu Monday, 12.02.2024 Connected Salamander 4 with SSH Tuesday, 13.02.2024 Connected Salamander 4 with Lasal Class 2 (Christian) after configuring bridge Wednesday, 14.02.2024 Installed Windows VM on Ubuntu, installed Lasal Class 2 on Windows VM, connected with Salamander 4 Thursday, 15.02.2024 Run pumpcontrol example successfully Friday, 16.02.2024 Increased virtual CPU in Windows Monday, 19.02.2024 Xenomai-system-tools Tuesday, 20.02.2024 KernelShark Wednesday, 21.02.2024 Local Yocto Build finally done Thursday, 22.02.2024 trace-cmd agent on guest communicates with host Friday, 23.02.2024 Teammeeting and Germany Monday, 26.02.2024 after_bitbake, kernelshark, paths Tuesday, 27.02.2024 Isolate CPUs on host system and let guest run on it Wednesday, 28.02.2024 Host-Guest timestamp sync works with VM, can view KVM Combo plots, does still not work with Salamander4 Thursday, 29.02.2024 useful_links and search_for_x.py Friday, 01.03.2024 checklist.md, nmbridge.md, understand nmbridge Monday, 04.03.2024 Finally: Negotiated kvm time sync protocol with guest Salamander4 Tuesday, 05.03.2024 lat worst reduced from 374.075 to 87.379 Wednesday, 06.03.2024 Add documentation local server Thursday, 07.03.2024 Start Salamander4 CPU with icecc Friday, 08.03.2024 Merge master and readme Monday, 11.03.2024 Kernel patch, richard meeting and settings.json Tuesday, 12.03.2024 real time priorities with chrt -f 50, no success Wednesday, 13.03.2024 Preventing kernel tasks from being scheduled on CPU4 Thursday, 14.03.2024 irq.md Friday, 15.03.2024 Timer 1000Hz Monday, 18.03.2024 kernel_processes.md, kernelshark, start thesis Tuesday, 19.03.2024 Added Zotero, Ubuntu Pro and Ubuntu PREEMPT_RT Wednesday, 20.03.2024 kvm_exit reasons plot Thursday, 21.03.2024 gitlfs and settings.json, plot with and without taskset, write more thesis Friday, 22.03.2024 Literature paper search Monday, 25.03.2024 Start masterthesis Tuesday, 26.03.2024 Write masterthesis Wednesday, 27.03.2024 Write masterthesis Thursday, 28.03.2024 Write masterthesis Friday, 29.03.2024 Write masterthesis Monday, 01.04.2024 Ostern Tuesday, 02.04.2024 bcc tool Wednesday, 03.04.2024 Write masterthesis APIC_WRITE Thursday, 04.04.2024 defconfig, vapic Friday, 05.04.2024 check_smp_affinity and check_CPU_IRQ_usage Monday, 08.04.2024 kvm_exit_vapic_results Tuesday, 09.04.2024 trace-cmd report analysis Wednesday, 10.04.2024 getconf _NPROCESSORS_CONF Thursday, 11.04.2024 Richard Meeting Friday, 12.04.2024 Spec Monday, 15.04.2024 report.sh Tuesday, 16.04.2024 Updated analyze_trace.py, include in thesis Wednesday, 17.04.2024 Describe host and guest tasks Thursday, 18.04.2024 Read 4 papers Friday, 19.04.2024 Read 5 papers Monday, 22.04.2024 Boot ubuntu anew Tuesday, 23.04.2024 Rebuild workspace Wednesday, 24.04.2024 Rebuild workspace, problem_solution Thursday, 25.04.2024 Rebuild workspace, table IRQ CPU Friday, 26.04.2024 compare.md, ps.sh Monday, 29.04.2024 powersave, balanced, performance Tuesday, 30.04.2024 merge and failed_reason Wednesday, 01.05.2024 Feiertag Thursday, 02.05.2024 Ubuntu real-time kernel Friday, 03.05.2024 Steven yt, analyze_events and analyze_tasks Monday, 06.05.2024 report_hardware Tuesday, 07.05.2024 Richard prios, show_all_threads.py Wednesday, 08.05.2024 failed_reason include CPU, reorganize Thursday, 09.05.2024 Feiertag Friday, 10.05.2024 compare kernels Monday, 13.05.2024 compare config, qemu test with 2 cpus Tuesday, 14.05.2024 Hardware and OS configuration checklist Wednesday, 15.05.2024 FINALLY LATENCY REDUCED WITH STATS and PLOT Thursday, 16.05.2024 reorganize, papers and configs Friday, 17.05.2024 real-time-kernel-tuning websites Monday, 20.05.2024 Feiertag Tuesday, 21.05.2024 read 3 papers, compare_2_files.py Wednesday, 22.05.2024 Configure like Intels RT_Performance_Tuning_Best_Practice_KVM_VM.pdf, results in xenomai_compare_latmax.md Thursday, 23.05.2024 reorganize, test Salamander 4 Friday, 24.05.2024 QEMU with 2 CPUs Monday, 27.05.2024 Write thesis Tuesday, 28.05.2024 Write thesis Wednesday, 29.05.2024 Write thesis Thursday, 30.05.2024 Feiertag Friday, 31.05.2024 Write thesis Monday, 03.06.2024 change latency from 300 to 10000 Tuesday, 04.06.2024 Write thesis, [DRAFT] chapter 4 and BIOS configuration finished Wednesday, 05.06.2024 Write thesis, [DRAFT] Kernel Configurations 10/19 finished Thursday, 06.06.2024 Write thesis, [DRAFT] Kernel Configurations 16/19 finished Friday, 07.06.2024 [DRAFT] Host Configurations 5/10 finished Monday, 10.06.2024 15 hours latency test Tuesday, 11.06.2024 Lasal Class 2 test Wednesday, 12.06.2024 Lasal Class 2 etxra test Thursday, 13.06.2024 Lasal Class 2 more extra Friday, 14.06.2024 Lasal Class 2 more extra Monday, 17.06.2024 Dirk Geschwindner, Motoren angesteuert Tuesday, 18.06.2024 reorganize Wednesday, 19.06.2024 6 dof robot, arduino Thursday, 20.06.2024 i/o modules lasal class 2, pwm, osci Friday, 21.06.2024 FINALLY moved 2 motors of mini robot with lasal class 2 with voltage divider Monday, 24.06.2024 Graz Tuesday, 25.06.2024 Lasal Class 2 with robot Wednesday, 26.06.2024 Lasal Class 2 with robot Thursday, 27.06.2024 Richard meeting Friday, 28.06.2024 reorganize Monday, 01.07.2024 New PC setup, yocto build, QEMU test Tuesday, 02.07.2024 FINALLY virtualized hardware setup Wednesday, 03.07.2024 Frei Thursday, 04.07.2024 Frei Friday, 05.07.2024 Frei Monday, 08.07.2024 Frei Tuesday, 09.07.2024 Frei Wednesday, 10.07.2024 Frei Thursday, 11.07.2024 Frei Friday, 12.07.2024 Frei Monday, 15.07.2024 FINALLY resolved Varan Manager Error, DMA Error and moved robot with Salamander Virtualization Monday, 16-19.07.2024 Sigmatek Work - ixagent Monday, 22.07.2024 Krankenstand Tuesday, 23.07.2024 Krankenstand Wednesday, 24.07.2024 Krankenstand Thursday, 25.07.2024 Krankenstand Friday, 26.07.2024 Krankenstand Tuesday, 29.07.2024 Sigmatek Work - ip_fallback and start third ticket"},{"location":"sigmatek/salamander4/latency_reduction/IRQaffinity/table_CPU_IRQ/","title":"table CPU IRQ","text":"0 1 2 3 4 5 6 7 8 9 10 11 0 x x x x x x x x x x x x 1 x x x x x x x x x x x x 2 x x x x x x x x x x x x 3 x x x x x x x x x x x x 4 x x x x x x x x x x x x 5 x x x x x x x x x x x x 6 x x x x x x x x x x x x 7 x x x x x x x x x x x x 8 x x x x x x x x x x x x 9 x x x x x x x x x x x x 10 x x x x x x x x x x x x 11 x x x x x x x x x x x x 12 x x x x x x x x x x x x 13 x x x x x x x x x x x x 14 x x x x x x x x x x x x 15 x x x x x x x x x x x x 16 x x 17 x x x x x x x x x x x x 21 x x 120 x x x x x x x x x x x x 121 x x x x x x x x x x x x 122 x x 123 x x 124 x 125 x x 126 x 127 x 128 x x 129 x x 130 x x 131 x x 132 x 133 x 134 x 135 x 136 x x x x x x x x x x x x 137 x 138 x x x x x x x x x x x x"},{"location":"workflow/useful/","title":"Useful Stuff","text":""},{"location":"workflow/useful/#symbolic-link-to-windows-folder","title":"Symbolic Link to Windows Folder","text":"<p><code>ln -s /media/sigma_ibo/Windows/Dokumente\\ und\\ Einstellungen/Pamibr/Desktop/Masterarbeit/ /home/sigma_ibo/Desktop/</code> Symbolic Link to Windows Folder</p>"},{"location":"workflow/useful/#mount-windows-partition-desktop","title":"Mount Windows partition Desktop","text":"<ul> <li><code>sudo nano /etc/fstab</code> </li> <li>At the end of the file, add: UUID=0E58A36658A34B73 /home/sigma_ibo/Desktop ntfs defaults 0 0, it looks like  this </li> <li>reboot</li> </ul>"},{"location":"workflow/useful/#how-to-extract-unzip-tarxz-file","title":"How to Extract (Unzip) tar.xz File","text":"<p>How to Extract (Unzip) tar.xz File</p>"},{"location":"workflow/useful/#launch-programs-after-startup","title":"Launch programs after startup","text":"<ul> <li><code>nano /home/sigma_ibo/startup.sh</code></li> <li><code>chmod +x /home/sigma_ibo/startup.sh</code></li> <li>File: startup.sh </li> <li>Configure Startup Apps</li> </ul>"},{"location":"workflow/useful/#install-gnome","title":"Install gnome","text":"<p><code>sudo apt install gnome-shell-extension-ubuntu-dock</code></p>"},{"location":"workflow/useful/#desktop-folders-not-visible","title":"Desktop folders not visible","text":"<p><code>sudo apt install ubuntu-desktop</code></p>"},{"location":"workflow/useful/#windows-11-on-qemu-and-display-settings","title":"Windows 11 on QEMU and display settings","text":"<p>Install Windows 11 in KVM on Ubuntu 22.04 Execute virtio-win-guest-tools in VM Windows 10 VM shows 100% CPU QEMU settings: QEMU, XML win11 Windows 10 VM Settings</p>"},{"location":"workflow/useful/#remove-keyring-from-edge","title":"Remove keyring from Edge","text":"<p>To stop being prompted to unlock the \u2018default\u2019 keyring on boot, set a blank password for the keyring. - Open the utility \u201cPasswords &amp; Keys\u201d. If not installed: <code>sudo apt-get install seahorse</code> - Right-click the \u201cLogin\u201d folder and select \u201cChange Password\u201d. - Enter your old password and leave the new password blank.</p>"},{"location":"workflow/useful/#see-how-many-cores-you-have","title":"See how many cores you have","text":"<p><code>nproc</code> or <code>cat /proc/cpuinfo | grep processor | wc -l</code> or <code>cat /proc/cpuinfo | grep 'core id'</code> or <code>lscpu</code></p>"},{"location":"workflow/useful/#start_qemush-from-everywhere","title":"start_qemu.sh from everywhere","text":"<p>Script start_qemu.sh needs to be in <code>/home/sigma_ibo/Desktop/Masterarbeit/masterthesis-documentation/QEMU/</code>.  <pre><code>sudo nano ~/.bashrc\nexport PATH=$PATH:/home/sigma_ibo/Desktop/Masterarbeit/documentation/resources/QEMU/\n</code></pre></p>"},{"location":"workflow/useful/#add-konsole-to-replace-console","title":"Add konsole to replace console","text":"<p>nautilus-open-any-terminal <pre><code>sudo apt install python3-nautilus python3-pip gir1.2-gtk-4.0\npip install nautilus-open-any-terminal\nnautilus -q\nsudo apt remove nautilus-extension-gnome-terminal\ngsettings set com.github.stunkymonkey.nautilus-open-any-terminal terminal konsole\ngsettings set com.github.stunkymonkey.nautilus-open-any-terminal keybindings '&lt;Ctrl&gt;&lt;Alt&gt;t'\ngsettings set com.github.stunkymonkey.nautilus-open-any-terminal new-tab true\ngsettings set com.github.stunkymonkey.nautilus-open-any-terminal flatpak system\n</code></pre> Change default terminal with right-click option \"Open in Terminal\" in file manager</p>"},{"location":"workflow/useful/#ssh-ohne-passwort","title":"SSH ohne Passwort","text":"<p>Um eine SSH-Verbindung von Ihrem Host-Computer zu Ihrem Gast-Computer (oder Server) herzustellen, k\u00f6nnen Sie die folgenden Schritte ausf\u00fchren:</p> <ol> <li>Generieren Sie ein SSH-Schl\u00fcsselpaar auf Ihrem Host-Computer. Sie k\u00f6nnen dies mit dem Befehl <code>ssh-keygen</code> tun. Sie werden aufgefordert, ein Passwort einzugeben, aber Sie k\u00f6nnen einfach Enter dr\u00fccken, um kein Passwort zu setzen (obwohl dies aus Sicherheitsgr\u00fcnden nicht empfohlen wird).</li> </ol> <pre><code>ssh-keygen\n</code></pre> <ol> <li>Kopieren Sie Ihren \u00f6ffentlichen Schl\u00fcssel auf den Gast-Computer. Sie k\u00f6nnen dies mit dem Befehl <code>ssh-copy-id</code> tun. Ersetzen Sie <code>benutzername</code> durch Ihren Benutzernamen auf dem Gast-Computer und <code>ip_address</code> durch die IP-Adresse des Gast-Computers.</li> </ol> <pre><code>ssh-copy-id root@192.168.1.51\n</code></pre> <ol> <li>Stellen Sie eine SSH-Verbindung zum Gast-Computer her. Sie k\u00f6nnen dies mit dem Befehl <code>ssh</code> tun. Ersetzen Sie wieder <code>benutzername</code> und <code>ip_address</code> durch Ihren Benutzernamen und die IP-Adresse des Gast-Computers.</li> </ol> <pre><code>ssh root@192.168.1.51\n</code></pre> <p>Nachdem Sie diese Schritte ausgef\u00fchrt haben, sollten Sie in der Lage sein, sich ohne Passwort bei Ihrem Gast-Computer anzumelden. </p> <p>Wenn Sie den ssh-copy-id Befehl verwenden, wird Ihr \u00f6ffentlicher SSH-Schl\u00fcssel in der Datei <code>~/.ssh/authorized_keys</code> auf dem Gast-Computer (dem Computer, zu dem Sie eine SSH-Verbindung herstellen) gespeichert.</p> <p>Jede Zeile in dieser Datei repr\u00e4sentiert einen \u00f6ffentlichen Schl\u00fcssel, der f\u00fcr die Authentifizierung zugelassen ist. Wenn Sie also mehrere Schl\u00fcssel haben, die Sie verwenden, um sich bei diesem Computer anzumelden, wird jeder Schl\u00fcssel als separate Zeile in dieser Datei angezeigt</p>"},{"location":"workflow/useful/#check-on-which-cpu-a-task-is-running","title":"Check on which CPU a task is running","text":"<p><code>ps -eo pid,psr,comm | grep &lt;name&gt;</code></p>"},{"location":"workflow/useful/#limit-wsl2-resources","title":"Limit WSL2 resources","text":"<p>Edit the WSL config to limit the memory usage as mentioned here. <pre><code>#turn off all wsl instances such as docker-desktop\nwsl --shutdown\nnotepad \"$env:USERPROFILE/.wslconfig\"\n</code></pre> Set the values you want for CPU core and Memory:</p> <pre><code>[wsl2]\nmemory=3GB   # Limits VM memory in WSL 2 up to 3GB\nprocessors=2 # Makes the WSL 2 VM use two virtual processors\n</code></pre>"},{"location":"workflow/useful/#connect-to-hardware-salamander-4","title":"Connect to hardware Salamander 4","text":"<p>ssh root@192.168.1.244</p>"},{"location":"workflow/useful/#boot-parameters","title":"Boot parameters","text":"<p>cat /proc/cmdline</p>"},{"location":"workflow/useful/#stress-the-cpus","title":"Stress the CPUs","text":"<p>stress -c $(nproc)</p>"},{"location":"workflow/useful/#check-cpu-maxmhz-minmhz-current-mhz","title":"Check cpu MAXMHZ, MINMHZ, CURRENT MHZ","text":"<pre><code>$ lscpu --all --extended\nCPU NODE SOCKET CORE L1d:L1i:L2:L3 ONLINE    MAXMHZ   MINMHZ      MHZ\n  0    0      0    0 0:0:0:0          yes 5000,0000 400,0000 2900.000\n  1    0      0    1 4:4:1:0          yes 5000,0000 400,0000 2900.000\n  2    0      0    2 8:8:2:0          yes 5200,0000 400,0000 2900.000\n  3    0      0    3 12:12:3:0        yes 5200,0000 400,0000 4174.117\n  4    0      0    4 16:16:4:0        yes 5000,0000 400,0000 2900.000\n  5    0      0    5 20:20:5:0        yes 5000,0000 400,0000 2900.000\n  6    0      0    6 24:24:6:0        yes 4000,0000 400,0000 2926.742\n  7    0      0    7 25:25:6:0        yes 4000,0000 400,0000 2900.000\n  8    0      0    8 26:26:6:0        yes 4000,0000 400,0000 2900.000\n  9    0      0    9 27:27:6:0        yes 4000,0000 400,0000 2900.000\n 10    0      0   10 28:28:7:0        yes 4000,0000 400,0000 3332.776\n 11    0      0   11 29:29:7:0        yes 4000,0000 400,0000 2900.000\n 12    0      0   12 30:30:7:0        yes 4000,0000 400,0000 2900.000\n 13    0      0   13 31:31:7:0        yes 4000,0000 400,0000 3218.336\n</code></pre>"},{"location":"workflow/useful/#see-threads-of-a-task","title":"See threads of a task","text":"<pre><code>sigma_ibo@sigma-ibo:~$ ls /proc/464458/task | wc -l\n6\nsigma_ibo@sigma-ibo:~$ htop -H -p 464458\n</code></pre>"},{"location":"workflow/useful/#thread-priorities","title":"Thread priorities","text":"<p>Set / Manipulate Real Time Attributes of a Linux Process Full list of all threads on the system with process id, thread id, short name, scheduling policy, nice value and realtime-priority. ps reports SCHED_DEADLINE as DLN, SCHED_OTHER as TS, SCHED_BATCH as B, SCHED_IDLE as IDL, SCHED_FIFO as FF and SCHED_RR as RR. <pre><code>ps axHo psr,pid,lwp,args,policy,nice,rtprio\n</code></pre> All the tasks on CPU 13 <pre><code>ps axHo psr,pid,lwp,args,policy,nice,rtprio | awk '$1 == 13'\n</code></pre> All rt processes <pre><code>ps axHo psr,pid,lwp,args,policy,nice,rtprio | grep -P '\\s[0-9]+\\s*$'\nps axHo psr,pid,lwp,args,policy,nice,rtprio | awk '$NF ~ /^[0-9]+$/' | sort -k4,4 -V &gt; rt_processes.txt\n</code></pre> Set all threads of a process to a real-time priority <pre><code>ps -T -p $(pgrep -f \"qemu-system-x86_64 -M pc,ac\") | awk '{print $2}' | tail -n +2 | xargs -I {} sudo chrt -f -p 10 {}\n</code></pre> Watch it <pre><code>watch -d -c -n 1 \"ps axHo psr,pid,lwp,args,policy,nice,rtprio | awk '\\$1 == 4'\"\n</code></pre></p>"},{"location":"workflow/useful/#test-suite-rt-tests","title":"Test suite: rt-tests","text":"<p>An Analysis of the Real-Time Performance of Linux Kernels The rt-tests test suite contains programs to test various real-time Linux features; more details are available here. The step-by-step procedure to install the rt-tests suite from the source is given below.</p> <p>First, you need to install the libraries: <pre><code>sudo apt-get install build-essential libnuma-dev\n</code></pre></p> <p>Next, clone the code and build from the source: <pre><code>git clone git://git.kernel.org/pub/scm/utils/rt-tests/rt-tests.git\ncd rt-tests\ngit checkout stable/v1.0\nmake all\nmake install\n</code></pre></p>"},{"location":"workflow/useful/#useful-not-needed","title":"Useful Not needed","text":""},{"location":"workflow/useful/#add-more-cpus-to-qemu-virtual-machine-with-smp-option","title":"Add more CPUs to QEMU virtual machine with -smp option","text":"<p>The -smp option specifies the number of CPUs</p> <p>Replace n with the number of CPUs you want to add. For example, if you want to add 4 CPUs, you would use -smp cpus=4.</p> <p>After making these changes, the specified number of CPUs will be available when you boot your Yocto image with this script.  <pre><code>exec qemu-system-x86_64 -M pc,accel=kvm -kernel ./bzImage \\\n-m 2048 -drive file=salamander-image-sigmatek-core2.ext4,format=raw,media=disk \\\n-append \"console=ttyS0 console=tty1 root=/dev/sda rw panic=1 sigmatek_lrt.QEMU=1 ip=dhcp rootfstype=ext4 \\\n-net nic,model=e1000,netdev=e1000 -netdev bridge,id=e1000,br=nm-bridge \\\n-fsdev local,security_model=none,id=fsdev0,path=drive-c -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_&gt;\n-drive if=pflash,format=qcow2,file=ovmf.code.qcow2 \\\n-smp cpus=n \\\n-no-reboot -nographic\n</code></pre> Check with: <code>cat /sys/devices/system/cpu/online</code> <pre><code>root@sigmatek-core2:~# cat /sys/devices/system/cpu/online\n0-9\n</code></pre></p>"},{"location":"workflow/useful/#isolate-cpus-in-qemu-with-isolcpus","title":"Isolate CPUs in QEMU with isolcpus","text":"<p>To use isolcpus in a Yocto image, you need to add it to the kernel command line parameters. In your case, these parameters are specified in the -append option in your QEMU command. Add isolcpus=x,y,z. Replace x,y,z with the CPU cores you want to isolate. For example, if you want to isolate cores 0, 1 and 2, you would use isolcpus=0,1,2. <pre><code>exec qemu-system-x86_64 -M pc,accel=kvm -kernel ./bzImage \\\n-m 2048 -drive file=salamander-image-sigmatek-core2.ext4,format=raw,media=disk \\\n-append \"console=ttyS0 console=tty1 root=/dev/sda rw panic=1 sigmatek_lrt.QEMU=1 ip=dhcp rootfstype=ext4 isolcpus=0,1,2\" \\\n-net nic,model=e1000,netdev=e1000 -netdev bridge,id=e1000,br=nm-bridge \\\n-fsdev local,security_model=none,id=fsdev0,path=drive-c -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_&gt;\n-drive if=pflash,format=qcow2,file=ovmf.code.qcow2 \\\n-smp cpus=n \\\n-no-reboot -nographic\n</code></pre> Check with: <code>cat /sys/devices/system/cpu/isolated</code> <pre><code>root@sigmatek-core2:~# cat /sys/devices/system/cpu/isolated\n0-2\n</code></pre></p>"},{"location":"workflow/useful/#gid-pid-of-processes","title":"Gid PID Of processes","text":"<p>Start latency and write output to latency_output.txt: <code>latency -T 60 &gt; latency_output.txt 2&gt;&amp;1 &amp;</code> Get ID of xenomai task: <code>ps aux | grep latency</code> <pre><code>root@sigmatek-core2:~# latency -T 60 &gt; latency_output.txt 2&gt;&amp;1 &amp;\n[1] 557\nroot@sigmatek-core2:~# ps aux | grep latency\nroot       557  0.0  0.6  14040 12852 ttyS0    SLl  11:34   0:00 latency -T 60\nroot       563  0.0  0.0   3256  1148 ttyS0    S+   11:34   0:00 grep latency\n</code></pre></p>"},{"location":"workflow/useful/#assign-tasks-to-the-isolated-cpus","title":"Assign tasks to the isolated CPUs","text":"<p>To assign these latency tasks to the isolated CPUs, you can use the taskset command with the process ID (PID) of each latency task. For example, if you want to assign the latency task with PID 536 to CPU 1, you would use:</p> <p><code>taskset -pc x abc</code></p> <p>Remember to replace abc with the actual PID of the latency task. You can repeat this process for each latency task and each isolated CPU.</p>"},{"location":"workflow/useful/#kill-processes","title":"Kill processes","text":"<p>Kill processes with <code>kill x</code></p>"},{"location":"workflow/useful/#m-error-message","title":"^M error message","text":"<p>The error message you're seeing is typically caused by a mismatch in line endings. Scripts that have been edited or created on Windows use a different line ending (<code>\\r\\n</code>) than Unix/Linux (<code>\\n</code>). The <code>^M</code> in the error message is a visual representation of <code>\\r</code> (carriage return), which is not expected or understood by the Linux shell.</p> <p>You can convert the line endings of your script to the Unix format using a tool like <code>dos2unix</code>. Here's how you can do it:</p> <pre><code>sudo apt-get install dos2unix  # Install dos2unix tool\ndos2unix &lt;file&gt;\n</code></pre>"},{"location":"workflow/useful/#split-too-long-prompt","title":"Split too long Prompt","text":"<p>ChatGPT PROMPTs Splitter</p>"},{"location":"workflow/useful/#configure-ip-addresses","title":"Configure ip addresses","text":"<p>Configure PC to <code>10.10.1.1</code>.  Salamander Gateway set to <code>10.10.1.229</code></p>"},{"location":"workflow/useful/#ubuntu-vm-on-virtual-machine-manager","title":"Ubuntu VM on virtual machine manager","text":"<p>After giving the VM access to the vsocket, and installing trace-cmd along with dependancies, run <code>trace-cmd agent</code>. Now, the guest is able to negotiate with host about timestamp synchronization. After running <code>./start_kernelshark.sh</code>, we can view KVM Combo plots</p>"}]}