@misc{XenomaiXenomai,
  title = {Xenomai :: {{Xenomai}}},
  url = {https://xenomai.org/},
  urldate = {2024-03-21}
}

@article{guStateoftheArtSurveyRealTime2012,
  title = {A {{State-of-the-Art Survey}} on {{Real-Time Issues}} in {{Embedded Systems Virtualization}}},
  author = {Gu, Zonghua and Zhao, Qingling},
  year = {2012},
  journal = {Journal of Software Engineering and Applications},
  volume = {05},
  number = {04},
  pages = {277--290},
  issn = {1945-3116, 1945-3124},
  doi = {10.4236/jsea.2012.54033},
  urldate = {2024-03-25},
  abstract = {Virtualization has gained great acceptance in the server and cloud computing arena. In recent years, it has also been widely applied to real-time embedded systems with stringent timing constraints. We present a comprehensive survey on real-time issues in virtualization for embedded systems, covering popular virtualization systems including KVM, Xen, L4 and others.},
  langid = {english}
}

@article{garcia-vallsChallengesRealtimeVirtualization2014,
  title = {Challenges in Real-Time Virtualization and Predictable Cloud Computing},
  author = {{Garc{\'i}a-Valls}, Marisol and Cucinotta, Tommaso and Lu, Chenyang},
  year = {2014},
  month = oct,
  journal = {Journal of Systems Architecture},
  volume = {60},
  number = {9},
  pages = {726--740},
  issn = {13837621},
  doi = {10.1016/j.sysarc.2014.07.004},
  urldate = {2024-03-25},
  abstract = {Cloud computing and virtualization technology have revolutionized general-purpose computing applications in the past decade. The cloud paradigm offers advantages through reduction of operation costs, server consolidation, flexible system configuration and elastic resource provisioning. However, despite the success of cloud computing for general-purpose computing, existing cloud computing and virtualization technology face tremendous challenges in supporting emerging soft real-time applications such as online video streaming, cloud-based gaming, and telecommunication management. These applications demand real-time performance in open, shared and virtualized computing environments. This paper identifies the technical challenges in supporting real-time applications in the cloud, surveys recent advancement in real-time virtualization and cloud computing technology, and offers research directions to enable cloud-based real-time applications in the future.},
  langid = {english}
}

@inproceedings{javierperezHowRealTime2022,
  title = {How {{Real}} ({{Time}}) {{Are Virtual PLCs}}?},
  booktitle = {2022 {{IEEE}} 27th {{International Conference}} on {{Emerging Technologies}} and {{Factory Automation}} ({{ETFA}})},
  author = {Javier Perez, Diogenes and Waltl, Josef and Prenzel, Laurin and Steinhorst, Sebastian},
  year = {2022},
  month = sep,
  pages = {1--8},
  publisher = {IEEE},
  address = {Stuttgart, Germany},
  doi = {10.1109/ETFA52439.2022.9921545},
  urldate = {2024-03-25},
  abstract = {Production systems continuously need to become more cost-efficient and flexible. Hardware-based programmable logic controllers, while widely used in the industry, do not offer the level of flexibility and scalability required for future applications. Each hardware-based PLC entails costs for maintenance and they cannot keep up with resource-intensive loads, such as artificial intelligence. The virtualization of PLCs promises to solve these issues. A Virtual PLC at the local edge level between cloud and industrial assets provides the flexibility and resource capacity needed for modern control applications. In this paper, the concept of virtual PLCs in a COTS server is outlined as a SoftPLC that is running within a virtual machine managed by a hypervisor. In addition, the virtual PLC is implemented and evaluated to determine whether virtual PLCs can satisfy the requirements for specific domains of industrial automation. We compare multiple virtual PLC configurations to a SoftPLC without a hypervisor. Our results indicate that the virtual PLC implementation is on par in terms of switching and response time for applications requiring response times below 10 ms and deterministic behavior is achievable. While further work is necessary, virtual PLCs may offer tremendous advantages for future industrial systems.},
  isbn = {978-1-66549-996-5},
  langid = {english}
}

@article{kirovaImpactModernVirtualization2019,
  title = {Impact of {{Modern Virtualization Methods}} on {{Timing Precision}} and {{Performance}} of {{High-Speed Applications}}},
  author = {Kirova, Veronika and Karpov, Kirill and Siemens, Eduard and Zander, Irina and Vasylenko, Oksana and Kachan, Dmitry and Maksymov, Sergii},
  year = {2019},
  month = aug,
  journal = {Future Internet},
  volume = {11},
  number = {8},
  pages = {179},
  issn = {1999-5903},
  doi = {10.3390/fi11080179},
  urldate = {2024-03-25},
  abstract = {The presented work is a result of extended research and analysis on timing methods precision, their efficiency in different virtual environments and the impact of timing precision on the performance of high-speed networks applications. We investigated how timer hardware is shared among heavily CPU- and I/O-bound tasks on a virtualized OS as well as on bare OS. By replacing the invoked timing methods within a well-known application for estimation of available path bandwidth, we provide the analysis of their impact on estimation accuracy. We show that timer overhead and precision are crucial for high-performance network applications, and low-precision timing methods usage, e.g., the delays and overheads issued by virtualization result in the degradation of the virtual environment. Furthermore, in this paper, we provide confirmation that, by using the methods we intentionally developed for both precise timing operations and AvB estimation, it is possible to overcome the inefficiency of standard time-related operations and overhead that comes with the virtualization. The impacts of negative virtualization factors were investigated in five different environments to define the most optimal virtual environment for high-speed network applications.},
  langid = {english}
}

@article{queirozTestingLimitsGeneralpurpose2023,
  title = {Testing the Limits of General-Purpose Hypervisors for Real-Time Control Systems},
  author = {Queiroz, Rui and Cruz, Tiago and Sim{\~o}es, Paulo},
  year = {2023},
  month = jun,
  journal = {Microprocessors and Microsystems},
  volume = {99},
  pages = {104848},
  issn = {01419331},
  doi = {10.1016/j.micpro.2023.104848},
  urldate = {2024-03-25},
  abstract = {With the emergence of the Industry 4.0 paradigm, there is a need to introduce a significant degree of flexibility, security and resilience in automation infrastructures, while keeping up with real-time requirements that are characteristic of such domains. Interestingly, many of these driving principles are the same that encouraged the adoption of virtualization technologies on the IT domain, somehow suggesting that the same benefits could be realisable for Industrial and Automation Control Systems, allowing to virtualise servers and cyber--physical system control devices. However, the suitability of using off-the-shelf hypervisor technologies to address the specific real-time requirements of automation infrastructures remains unclear, due to their focus on maximising systems throughput and capacity, often at the expense of determinism and increased latency.},
  langid = {english}
}

@article{reghenzaniRealTimeLinuxKernel2020,
  title = {The {{Real-Time Linux Kernel}}: {{A Survey}} on {{PREEMPT}}\_{{RT}}},
  shorttitle = {The {{Real-Time Linux Kernel}}},
  author = {Reghenzani, Federico and Massari, Giuseppe and Fornaciari, William},
  year = {2020},
  month = jan,
  journal = {ACM Computing Surveys},
  volume = {52},
  number = {1},
  pages = {1--36},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/3297714},
  urldate = {2024-03-25},
  abstract = {The increasing functional and nonfunctional requirements of real-time applications, the advent of mixed criticality computing, and the necessity of reducing costs are leading to an increase in the interest for employing COTS hardware in real-time domains. In this scenario, the Linux kernel is emerging as a valuable solution on the software side, thanks to the rich support for hardware devices and peripherals, along with a well-established programming environment. However, Linux has been developed as a general-purpose operating system, followed by several approaches to introduce actual real-time capabilities in the kernel. Among these, the PREEMPT\_RT patch, developed by the kernel maintainers, has the goal to increase the predictability and reduce the latencies of the kernel directly modifying the existent kernel code. This article aims at providing a survey of the state-of-the-art approaches for building real-time Linux-based systems, with a focus on PREEMPT\_RT, its evolution, and the challenges that should be addressed in order to move PREEMPT\_RT one step ahead. Finally, we present some applications and use cases that have already benefited from the introduction of this patch.},
  langid = {english}
}

@article{cinqueVirtualizingMixedCriticalitySystems2022,
  title = {Virtualizing {{Mixed-Criticality Systems}}: {{A Survey}} on {{Industrial Trends}} and {{Issues}}},
  shorttitle = {Virtualizing {{Mixed-Criticality Systems}}},
  author = {Cinque, Marcello and Cotroneo, Domenico and De Simone, Luigi and Rosiello, Stefano},
  year = {2022},
  month = apr,
  journal = {Future Generation Computer Systems},
  volume = {129},
  eprint = {2112.06875},
  primaryclass = {cs},
  pages = {315--330},
  issn = {0167739X},
  doi = {10.1016/j.future.2021.12.002},
  urldate = {2024-03-25},
  abstract = {Virtualization is gaining attraction in the industry as it promises a flexible way to integrate, manage, and re-use heterogeneous software components with mixed-criticality levels, on a shared hardware platform, while obtaining isolation guarantees. This work surveys the state-of-the-practice of real-time virtualization technologies by discussing common issues in the industry. In particular, we analyze how different virtualization approaches and solutions can impact isolation guarantees and testing/certification activities, and how they deal with dependability challenges. The aim is to highlight current industry trends and support industrial practitioners to choose the most suitable solution according to their application domains.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Computer Science - Operating Systems,Computer Science - Software Engineering}
}

@article{malallahComprehensiveStudyKernel2021,
  title = {A {{Comprehensive Study}} of {{Kernel}} ({{Issues}} and {{Concepts}}) in {{Different Operating Systems}}},
  author = {Malallah, HayfaaSubhi and Zeebaree, Subhi R. M. and Zebari, Rizgar R. and Sadeeq, Mohammed A. M. and Ageed, Zainab Salih and Ibrahim, Ibrahim Mahmood and Yasin, Hajar Maseeh and Merceedi, Karwan Jameel},
  year = {2021},
  month = may,
  journal = {Asian Journal of Research in Computer Science},
  pages = {16--31},
  issn = {2581-8260},
  doi = {10.9734/ajrcos/2021/v8i330201},
  urldate = {2024-03-25},
  abstract = {Various operating systems (OS) with numerous functions and features have appeared over time. As a result, they know how each OS has been implemented guides users' decisions on configuring the OS on their machines. Consequently, a comparative study of different operating systems is needed to provide specifics on the same and variance in novel types of OS to address their flaws. This paper's center of attention is the visual operating system based on the OS features and their limitations and strengths by contrasting iOS, Android, Mac, Windows, and Linux operating systems. Linux, Android, and Windows 10 are more stable, more compatible, and more reliable operating systems. Linux, Android, and Windows are popular enough to become user-friendly, unlike other OSs, and make more application programs. The firewalls in Mac OS X and Windows 10 are built-in. The most popular platforms are Android and Windows, specifically the novelist versions. It is because they are low-cost, dependable, compatible, safe, and easy to use. Furthermore, modern developments in issues resulting from the advent of emerging technology and the growth of the cell phone introduced many features such as high-speed processors, massive memory, multitasking, high-resolution displays, functional telecommunication hardware, and so on.},
  langid = {english}
}

@misc{Tracecmd,
  title = {Trace-Cmd},
  url = {https://trace-cmd.org/},
  urldate = {2024-03-25}
}

@misc{KernelShark,
  title = {{{KernelShark}}},
  url = {https://kernelshark.org/},
  urldate = {2024-03-25}
}

@misc{WelcomeYoctoProject,
  title = {Welcome to the {{Yocto Project Documentation}} --- {{The Yocto Project}} {\textregistered} 4.3.999 Documentation},
  url = {https://docs.yoctoproject.org/},
  urldate = {2024-03-27}
}

@misc{QEMU,
  title = {{{QEMU}}},
  url = {https://www.qemu.org/},
  urldate = {2024-03-27}
}

@misc{pixelartSIGMATEKKompletteAutomatisierungssysteme,
  title = {{SIGMATEK - Komplette Automatisierungssysteme}},
  author = {{pixelart}},
  url = {https://www.sigmatek-automation.com/de/},
  urldate = {2024-03-27},
  abstract = {Sigmatek ist Ihr Partner f{\"u}r Industrie Automatisierung und Steuerungen wie SPS Automation oder HMI zur Visualisierung und Steuerung, sowie I/O Systeme.},
  langid = {ngerman}
}

@book{lutsykPipelinedMulticoreMachine2020,
  title = {A Pipelined Multi-Core Machine with Operating System Support: Hardware Implementation and Correctness Proof},
  shorttitle = {A Pipelined Multi-Core Machine with Operating System Support},
  author = {Lutsyk, Petro and Oberhauser, Jonas and Paul, Wolfgang J.},
  year = {2020},
  series = {Lecture Notes in Computer Science {{Theoretical Computer Science}} and {{General Issues}}},
  number = {9999},
  publisher = {Springer},
  address = {Cham},
  isbn = {978-3-030-43242-3},
  langid = {english}
}

@techreport{amarpreetHardRealTime2009,
  title = {Hard {{Real}} Time {{Linux}}* {{Using Xenomai}}* on {{Intel}}{\textregistered} {{Multi-Core Processors}}},
  author = {Amarpreet, Singh Ugal},
  year = {2009},
  month = oct,
  institution = {Intel},
  langid = {english}
}

@article{yoonRealTimePerformanceAnalysis2009,
  title = {Real-{{Time Performance Analysis}} in {{Linux-Based Robotic Systems}}},
  author = {Yoon, Hobin and Song, Jungmoo and Lee, Jamee},
  year = {2009},
  month = jan,
  abstract = {Mobile or humanoid robots collect environmental data and reflect back as robotic behaviors via various sensors and actuators. It is crucial this occurs within a specified time. Although real-time flavored Linux has been used to control robot arms and legs for quite a while, it has not been reported much whether the current real-time features in Linux could still meet this requirement for a much more complicated system - a humanoid with about 60 servo motors and sensors with multiple algorithms such as recognition, decision, and navigation running simultaneously. In this paper, in order to meet such requirement, adopting EtherCAT technology is introduced and its Linux implementation is illustrated. In addition, results of real-time experiments and timing analysis on a multi-core processor are presented showing Linux is a viable solution to be successfully deployed in various robotic systems.},
  langid = {english}
}

@article{mckenneyRealTimeVs2008,
  title = {`{{Real Time}}' vs. `{{Real Fast}}': {{How}} to {{Choose}}?},
  author = {McKenney, Paul E},
  year = {2008},
  langid = {english}
}

@article{kiszkaLinuxRealTimeHypervisor2009,
  title = {Towards {{Linux}} as a {{Real-Time Hypervisor}}},
  author = {Kiszka, Jan},
  year = {2009},
  month = jan,
  abstract = {Combining virtualization and real-time is important for an increasing amount of use cases, from embedded system to enterprise computing. In this paper, we will analyze the real-time capabilities of Linux as a hypervisor when using KVM and QEMU. We will furthermore introduce and evaluate a paravirtual scheduling interface that helps resolving priority inversion problems in embedded virtualization scenarios.},
  langid = {english}
}

@inproceedings{broskyShieldedProcessorsGuaranteeing2003,
  title = {Shielded Processors: Guaranteeing Sub-Millisecond Response in Standard {{Linux}}},
  shorttitle = {Shielded Processors},
  booktitle = {Proceedings {{International Parallel}} and {{Distributed Processing Symposium}}},
  author = {Brosky, S. and Rotolo, S.},
  year = {2003},
  pages = {9},
  publisher = {IEEE Comput. Soc},
  address = {Nice, France},
  doi = {10.1109/IPDPS.2003.1213237},
  urldate = {2024-04-18},
  abstract = {The low latency and preemption patches provide significant progress making standard Linux into a more responsive system for real-time applications. These patches allow guarantees on worst case interrupt response time at slightly above a millisecond. However, these guarantees can only be met when there is no networking or graphics activity in the system. This paper will describe the implementation of shielded processors in RedHawk Linux and their benefits. It will also present the results of realtime performance benchmarks. Interrupt response time guarantees are significantly below one millisecond and can be guaranteed even in the presence of networking and graphics activity.},
  isbn = {978-0-7695-1926-5},
  langid = {english}
}

@article{adamPerformanceAssessmentLinux2021,
  title = {Performance {{Assessment}} of {{Linux Kernels}} with {{PREEMPT}}\_{{RT}} on {{ARM-Based Embedded Devices}}},
  author = {Adam, George K. and Petrellis, Nikos and Doulos, Lambros T.},
  year = {2021},
  month = jun,
  journal = {Electronics},
  volume = {10},
  number = {11},
  pages = {1331},
  issn = {2079-9292},
  doi = {10.3390/electronics10111331},
  urldate = {2024-05-08},
  abstract = {This work investigates the real-time performance of Linux kernels and distributions with a PREEMPT\_RT real-time patch on ARM-based embedded devices. Experimental measurements, which are mainly based on heuristic methods, provide novel insights into Linux real-time performance on ARM-based embedded devices (e.g., BeagleBoard and RaspberryPi). Evaluations of the Linux real-time performance are based on specific real-time software measurement modules, developed for this purpose, and the use of a standard benchmark tool, cyclictest. Software modules were designed upon the introduction of a new response task model, an innovative aspect of this work. Measurements include the latency of response tasks at user and kernel space, the response on the execution of periodic tasks, the maximum sustained frequency and general latency performance metrics. The results show that in such systems the PREEMPT\_RT patch provides more improved real-time performance than the default Linux kernels. The latencies and particularly the worst-case latencies are reduced with real-time support, thus making such devices running Linux with PREEMPT\_RT more appropriate for use in time-sensitive embedded control systems and applications. Furthermore, the proposed performance measurements approach and evaluation methodology could be applied and deployed on other Linux-based real-time platforms.},
  copyright = {https://creativecommons.org/licenses/by/4.0/},
  langid = {english}
}

@article{adamRealTimePerformanceResponse2021,
  title = {Real-{{Time Performance}} and {{Response Latency Measurements}} of {{Linux Kernels}} on {{Single-Board Computers}}},
  author = {Adam, George K.},
  year = {2021},
  month = may,
  journal = {Computers},
  volume = {10},
  number = {5},
  pages = {64},
  issn = {2073-431X},
  doi = {10.3390/computers10050064},
  urldate = {2024-05-16},
  abstract = {This research performs real-time measurements of Linux kernels with real-time support provided by the PREEMPT\_RT patch on embedded development devices such as BeagleBoard and Raspberry Pi. The experimental measurements of the Linux real-time performance on these devices are based on real-time software modules developed specifically for the purposes of this research. Taking in consideration the constraints of the specific hardware platforms under investigation, new measurements software was developed. The measurement algorithms are designed upon response and periodic task models. Measurements investigate latencies of real-time applications at user and kernel space. An outcome of this research is that the proposed performance measurements approach and evaluation methodology could be applied and deployed on other Linux-based boards and platforms. Furthermore, the results demonstrate that the PREEMPT\_RT patch overall improves the Linux kernel real-time performance compared to the standard one. The reduced worst-case latencies on such devices running Linux with real-time support could make them potentially more suitable for real-time applications as long as a latency value of about 160 {\textmu}s, as an upper bound, is an acceptable safety margin.},
  copyright = {https://creativecommons.org/licenses/by/4.0/},
  langid = {english}
}

@techreport{RealTimePerformanceTuning2022,
  title = {Real-{{Time Performance Tuning Best Practice Guidelines}} for {{KVM-Based Virtual Machines}}},
  year = {2022},
  month = jan,
  institution = {Intel},
  langid = {english}
}

@misc{EngineeringToolLASAL,
  title = {{Engineering Tool LASAL - SIGMATEK}},
  url = {https://www.sigmatek-automation.com/de/produkte/engineering-tool-lasal/lasal-class/},
  urldate = {2024-05-27},
  abstract = {LASAL CLASS},
  langid = {ngerman}
}

@article{maPerformanceTuningKVMbased2013,
  title = {Performance {{Tuning Towards}} a {{KVM-based Embedded Real-Time Virtualization System}}},
  author = {Ma, Ruhui and Zhou, Fanfu and Zhu, Erzhou and Guan, Haibing},
  year = {2013},
  month = sep,
  journal = {Journal of Information Science and Engineering},
  doi = {10.6688/JISE.2013.29.5.13},
  abstract = {Virtualization is a fundamental component in cloud computing because it provides numerous guest VM transparent services, such as live migration, high availability, rapid checkpoint, etc. Utilizing virtualization technology to combine real-time operating system (RTOS) and off-the-shelf time-sharing general purpose operating system (GPOS) is attracting much more interest recently. Such combination has the potential to provide a large application base, and to guarantee timely deterministic response to real-time applications, yet there remain some issues, such as responsiveness of RTOS running on top of a virtual machine (VM), system performance and CPU resource utilization rate, etc. In this paper we propose an embedded real-time virtualization architecture based on Kernel-Based Virtual Machine (KVM), in which VxWorks and Linux are combined together. We then analyze and evaluate how KVM influences the interrupt-response times of VxWorks as a guest operating system. By applying several real-time performance tuning methods on the host Linux, we will show that sub-millisecond interrupt response latency can be achieved on the guest VxWorks. Furthermore, we also find out that prioritization tuning results in waste of CPU resources when RTOS is not executing real-time tasks, so we design a dynamic scheduling mechanism  co-scheduling to improve system performance. Experimental results with SPEC2000 and bonnie 1.4 load, show that this new architecture tuned by CPU shielding, prioritization and co-scheduling, can achieve better real-time responsiveness and system performance.},
  langid = {english}
}

@misc{thelinuxfoundationChecklistWritingLinux2020,
  title = {A {{Checklist}} for {{Writing Linux Real-Time Applications}} - {{John Ogness}}, {{Linutronix GmbH}}},
  author = {{The Linux Foundation}},
  year = {2020},
  month = nov,
  url = {https://www.youtube.com/watch?v=NrjXEaTSyrw},
  urldate = {2024-06-11},
  abstract = {Creative Commons-Lizenz mit Quellenangabe (Wiederverwendung erlaubt)}
}

@misc{kernelrecipesKernelRecipes20162016,
  title = {Kernel {{Recipes}} 2016 - {{Understanding}} a {{Real-Time System}} (More than Just a Kernel) - {{Steven Rostedt}}},
  author = {{Kernel Recipes}},
  year = {2016},
  month = oct,
  url = {https://www.youtube.com/watch?v=w3yT8zJe0Uw},
  urldate = {2024-06-11},
  abstract = {Creative Commons-Lizenz mit Quellenangabe (Wiederverwendung erlaubt)}
}

@misc{thelinuxfoundationFindingSourcesLatency2020,
  title = {Finding {{Sources}} of {{Latency}} on Your {{Linux System}} - {{Steven Rostedt}}, {{VMware}}},
  author = {{The Linux Foundation}},
  year = {2020},
  month = sep,
  url = {https://www.youtube.com/watch?v=Tkra8g0gXAU},
  urldate = {2024-06-11},
  abstract = {Creative Commons-Lizenz mit Quellenangabe (Wiederverwendung erlaubt)}
}

@misc{KVMQemuVirtualization,
  title = {{{KVM}}/{{Qemu Virtualization Tuning Guide}} on {{Intel}}{\textregistered} {{Xeon}}{\textregistered} {{Based Systems}}},
  journal = {Intel},
  url = {https://www.intel.com/content/www/us/en/developer/articles/guide/kvm-tuning-guide-on-xeon-based-systems.html},
  urldate = {2024-06-11},
  abstract = {KVM/Qemu Virtualization Tuning Guide on 3rd Generation Intel{\textregistered} Xeon{\textregistered} Scalable   Processor Based Platforms},
  langid = {english}
}

@misc{RealtimeProgrammingLinux,
  title = {Real-Time Programming with {{Linux}}, Part 2: Configuring {{Linux}} for Real-Time - {{Shuhao}}'s {{Blog}}},
  url = {https://shuhaowu.com/blog/2022/02-linux-rt-appdev-part2.html#f4},
  urldate = {2024-06-11}
}

@misc{HOWTOBuildRTapplication,
  title = {{{HOWTO}}: {{Build}} an {{RT-application}} - {{RTwiki}}},
  url = {https://archive.kernel.org/oldwiki/rt.wiki.kernel.org/index.php/HOWTO:_Build_an_RT-application.html},
  urldate = {2024-06-11}
}

@misc{LinuxProcessPriorities,
  title = {Linux Process Priorities Demystified},
  journal = {sigma star gmbh},
  url = {https://sigma-star.at/blog/2022/02/linux-proc-prios/},
  urldate = {2024-06-11},
  abstract = {Simple questions often have not so simple answers. One example is the question is, what priority does this process have?},
  langid = {english}
}

@inproceedings{huang2015performance,
  title = {Performance Evaluation of Xenomai 3},
  booktitle = {Proceedings of the 17th Real-Time Linux Workshop ({{RTLWS}})},
  author = {Huang, {\relax CC} and Lin, Chan-Hsiang and Wu, Che-Kang},
  year = {2015},
  pages = {21--22}
}

@misc{DigitalOutputSIGMATEK,
  title = {Digital {{Output}} - {{SIGMATEK}}},
  url = {https://www.sigmatek-automation.com/en/products/io-systems/s-dias/digital-output/pw-022/},
  urldate = {2024-07-30},
  abstract = {PW 022},
  langid = {english}
}

@misc{InterfacesSplittersSIGMATEK,
  title = {Interfaces \& {{Splitters}} - {{SIGMATEK}}},
  url = {https://www.sigmatek-automation.com/en/products/real-time-ethernet-varan/interfaces-splitters/vi-021/},
  urldate = {2024-07-30},
  abstract = {VI 021},
  langid = {english}
}

@misc{CPUUnitsSIGMATEK,
  title = {{{CPU Units}} - {{SIGMATEK}}},
  url = {https://www.sigmatek-automation.com/en/products/control-systems/cpu-units/cp-841/},
  urldate = {2024-07-30},
  abstract = {CP 841},
  langid = {english}
}

@misc{ControlsHMIsSIGMATEK,
  title = {Controls \& {{HMIs}} - {{SIGMATEK}}},
  url = {https://www.sigmatek-automation.com/en/products/accessories/controls-hmis/pcv-522/},
  urldate = {2024-07-30},
  abstract = {PCV 522},
  langid = {english}
}

@misc{SDIASSIGMATEK,
  title = {S-{{DIAS}} - {{SIGMATEK}}},
  url = {https://www.sigmatek-automation.com/en/products/io-systems/s-dias/},
  urldate = {2024-07-30},
  langid = {english}
}

@misc{MG996RServoMotor,
  title = {{{MG996R Servo Motor}}},
  journal = {Components101},
  url = {https://components101.com/motors/mg996r-servo-motor-datasheet},
  urldate = {2024-07-30},
  abstract = {MG996R Servo Motor},
  langid = {english}
}

@misc{MG996RDigitalServo,
  title = {{MG996R Digital Servo Motor mit Metall Getriebe}},
  journal = {Roboter-Bausatz.de},
  url = {https://www.roboter-bausatz.de/p/mg996r-digital-servo-motor-mit-metall-getriebe},
  urldate = {2024-07-31},
  abstract = {Der MG996R ist eine verbesserte version der beliebten MG995 Serie. Durch ein neues PCB-Design und IC Steuersystem ist es wesentlich genauer als sein Vorg{\"a}nger und{\dots}},
  langid = {ngerman}
}

@misc{RealtimePreempt_rt_versionsWiki,
  title = {Realtime:Preempt\_rt\_versions [{{Wiki}}]},
  url = {https://wiki.linuxfoundation.org/realtime/preempt_rt_versions},
  urldate = {2024-08-05}
}

@misc{WhatRealtimeLinuxa,
  title = {What Is Real-Time {{Linux}}? {{Part I}}},
  shorttitle = {What Is Real-Time {{Linux}}?},
  journal = {Ubuntu},
  url = {https://ubuntu.com/blog/what-is-real-time-linux-i},
  urldate = {2024-08-05},
  abstract = {Welcome to this three-part blog series on real-time Linux.~ Throughout the series, we will assess the key features of a real-time system. We will understand how a real-time capable Linux kernel differs from mainline, and touch upon the performance trade-offs you should consider when choosing real-time versus a low-latency kernel, for inst [{\dots}]},
  langid = {english}
}

@misc{RealtimeKernelPatchset,
  title = {Realtime Kernel Patchset - {{ArchWiki}}},
  url = {https://wiki.archlinux.org/title/Realtime_kernel_patchset},
  urldate = {2024-08-05}
}

@article{rostedtInternalsRTPatch2007,
  title = {Internals of the {{RT Patch}}},
  author = {Rostedt, Steven and Hart, Darren V},
  year = {2007},
  month = jan,
  langid = {english}
}

@book{buttazzoHardRealtimeComputing2024,
  title = {Hard Real-Time Computing Systems: Predictable Scheduling Algorithms and Applications},
  shorttitle = {Hard Real-Time Computing Systems},
  author = {Buttazzo, Giorgio C.},
  year = {2024},
  edition = {Fourth edition},
  publisher = {Springer},
  address = {Cham, Switzerland},
  doi = {10.1007/978-3-031-45410-3},
  isbn = {978-3-031-45409-7},
  langid = {english}
}

@book{wangRealtimeEmbeddedSystems2017,
  title = {Real-Time Embedded Systems},
  author = {Wang, Jiacun},
  year = {2017},
  publisher = {Wiley},
  address = {Hoboken, NJ, USA},
  abstract = {"Offering comprehensive coverage of the convergence of real-time embedded systems scheduling, resource access control, software design and development, and high-level system modeling, analysis and verification; Following an introductory overview, Dr. Wang delves into the specifics of hardware components, including processors, memory, I/O devices and architectures, communication structures, peripherals, and characteristics of real-time operating systems. Later chapters are dedicated to real-time task scheduling algorithms and resource access control policies, as well as priority-inversion control and deadlock avoidance. Concurrent system programming and POSIX programming for real-time systems are covered, as are finite state machines and Time Petri nets. Of special interest to software engineers will be the chapter devoted to model checking, in which the author discusses temporal logic and the NuSMV model checking tool, as well as a chapter treating real-time software design with UML. The final portion of the book explores practical issues of software reliability, aging, rejuvenation, security, safety, and power management. In addition, the book: Explains real-time embedded software modeling and design with finite state machines, Petri nets, and UML, and real-time constraints verification with the model checking tool, NuSMV Features real-world examples in finite state machines, model checking, real-time system design with UML, and more Covers embedded computer programing, designing for reliability, and designing for safety Explains how to make engineering trade-offs of power use and performance Investigates practical issues concerning software reliability, aging, rejuvenation, security, and power management Real-Time Embedded Systems is a valuable resource for those responsible for real-time and embedded software design, development, and management. It is also an excellent textbook for graduate courses in computer engineering, computer science, information technology, and software engineering on embedded and real-time software systems, and for undergraduate computer and software engineering courses"-- Provided by publisher},
  isbn = {978-1-119-42070-5},
  langid = {english},
  annotation = {OCLC: 992437550}
}

@article{canbazPerformanceAnalysisRealtime2022,
  title = {Performance Analysis of Real-Time and General-Purpose Operating Systems for Path Planning of the Multi-Robot Systems},
  author = {Canbaz, Se{\c c}kin and Erdemir, G{\"o}khan},
  year = {2022},
  month = feb,
  journal = {International Journal of Electrical and Computer Engineering (IJECE)},
  volume = {12},
  number = {1},
  pages = {285},
  issn = {2722-2578, 2088-8708},
  doi = {10.11591/ijece.v12i1.pp285-292},
  urldate = {2024-08-11},
  abstract = {In general, modern operating systems can be divided into two essential parts, real-time operating systems (RTOS) and general-purpose operating systems (GPOS). The main difference between GPOS and RTOS is the system istime-critical or not. It means that; in GPOS, a high-priority thread cannot preempt a kernel call. But, in RTOS, a low-priority task is preempted by a high-priority task if necessary, even if it's executing a kernel call. Most Linux distributions can be used as both GPOS and RTOS with kernel modifications. In this study, two Linux distributions, Ubuntu and Pardus, were analyzed and their performances were compared both as GPOS and RTOS for path planning of the multi-robot systems. Robot groups with different numbers of members were used to perform the path tracking tasks using both Ubuntu and Pardus as GPOS and RTOS. In this way, both the performance of two different Linux distributions in robotic applications were observed and compared in two forms, GPOS, and RTOS.},
  copyright = {http://creativecommons.org/licenses/by-sa/4.0}
}

@misc{WhatRealtimeLinux,
  title = {What Is Real-Time {{Linux}}? {{Part II}}},
  shorttitle = {What Is Real-Time {{Linux}}?},
  journal = {Ubuntu},
  url = {https://ubuntu.com/blog/what-is-real-time-linux-ii},
  urldate = {2024-08-12},
  abstract = {Welcome to this three-part mini-series on real-time Linux. In Part I, we set the stage for the remainder of the series by defining a real-time system, and went through common misconceptions.~ We also covered the broad market applications of a real-time Linux kernel.~ Several applications across a wide range of use cases and verticals requ [{\dots}]},
  langid = {english}
}

@article{perneelRealtimeCapabilitiesStandard2015,
  title = {Real-Time Capabilities in the Standard {{Linux Kernel}}: {{How}} to Enable and Use Them?},
  shorttitle = {Real-Time Capabilities in the Standard {{Linux Kernel}}},
  author = {Perneel, Luc and {Auricle Technologies Pvt. Ltd.}},
  year = {2015},
  journal = {International Journal on Recent and Innovation Trends in Computing and Communication},
  volume = {3},
  number = {1},
  pages = {131--135},
  issn = {2321-8169},
  doi = {10.17762/ijritcc2321-8169.150127},
  urldate = {2024-08-13},
  abstract = {Linux was originally designed as a general purpose operating system without consideration for real-time applications. Recently, it has become more attractive to the real-time community due to its low cost and open source approach. In order to help the real-time community, we will present in this paper the practical steps required to achieve a real-time Linux by applying the PREEMPT-RT patches which will provide Linux with these capabilities. We will also focus on some of the kernel configuration that should get attention while building the kernel in order to maintain the real-time behavior of the system during runtime.},
  langid = {english}
}

@inproceedings{scordinoRealTimeVirtualizationIndustrial2020,
  title = {Real-{{Time Virtualization For Industrial Automation}}},
  booktitle = {2020 25th {{IEEE International Conference}} on {{Emerging Technologies}} and {{Factory Automation}} ({{ETFA}})},
  author = {Scordino, Claudio and Savino, Ida Maria and Cuomo, Luca and Miccio, Luca and Tagliavini, Andrea and Bertogna, Marko and Solieri, Marco},
  year = {2020},
  month = sep,
  pages = {353--360},
  publisher = {IEEE},
  address = {Vienna, Austria},
  doi = {10.1109/ETFA46521.2020.9211890},
  urldate = {2024-08-13},
  abstract = {The industry has recently shown a growing interest in running non-critical activities (e.g., design tools) together with real-time control tasks on open-source COTS platforms.},
  copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
  isbn = {978-1-72818-956-7},
  langid = {english}
}

@inproceedings{junzhangPerformanceAnalysisKVMBased2010,
  title = {Performance Analysis towards a {{KVM-Based}} Embedded Real-Time Virtualization Architecture},
  booktitle = {5th {{International Conference}} on {{Computer Sciences}} and {{Convergence Information Technology}}},
  author = {{Jun Zhang} and {Kai Chen} and {Baojing Zuo} and {Ruhui Ma} and {Yaozu Dong} and {Haibing Guan}},
  year = {2010},
  month = nov,
  pages = {421--426},
  publisher = {IEEE},
  address = {Seoul, Korea (South)},
  doi = {10.1109/ICCIT.2010.5711095},
  urldate = {2024-08-13},
  abstract = {In Recent years embedded world has been undergoing a shift from traditional single-core processors to processors with multiple cores. However, this shift poses a challenge of adapting legacy uniprocessor-oriented real-time operating system (RTOS) to exploit the capability of multi-core processor. In addition, some embedded systems are inevitably going towards the direction of integrating real-time with off-the-shelf time-sharing system, as the combination of the two has the potential to provide not only timely and deterministic response but also a large application base. Virtualization technology, which ensures strong isolation between virtual machines, is therefore a promising solution to above mentioned issues. However, there remains a concern regarding the responsiveness of the RTOS running on top of a virtual machine. In this paper we propose an embedded real-time virtualization architecture based on Kernel-Based Virtual Machine (KVM), in which VxWorks and Linux are combined together. We then analyze and evaluate how KVM influences the interrupt-response times of VxWorks as a guest operating system. By applying several real-time performance tuning methods on the host Linux, we will show that sub-millisecond interrupt response latency can be achieved on the guest VxWorks.},
  isbn = {978-1-4244-8567-3},
  langid = {english}
}

@inproceedings{sandstromVirtualizationTechnologiesEmbedded2013,
  title = {Virtualization Technologies in Embedded Real-Time Systems},
  booktitle = {2013 {{IEEE}} 18th {{Conference}} on {{Emerging Technologies}} \& {{Factory Automation}} ({{ETFA}})},
  author = {Sandstrom, Kristian and Vulgarakis, Aneta and Lindgren, Markus and Nolte, Thomas},
  year = {2013},
  month = sep,
  pages = {1--8},
  publisher = {IEEE},
  address = {Cagliari, Italy},
  doi = {10.1109/ETFA.2013.6648012},
  urldate = {2024-08-15},
  isbn = {978-1-4799-0864-6 978-1-4799-0862-2}
}

@inproceedings{taccariEmbeddedRealTimeVirtualization2014,
  title = {Embedded {{Real-Time Virtualization}}: {{State}} of the {{Art}} and {{Research Challenges}}},
  shorttitle = {Embedded {{Real-Time Virtualization}}},
  author = {Taccari, Gilberto and Taccari, Leonardo and Fioravanti, Agostina and Spalazzi, Luca and Claudi, Andrea},
  year = {2014},
  month = oct,
  abstract = {Industrial real-time systems are widely used in various application domains. In these fields, flexibility and cost are the two most important metrics to measure, from the non-functional point of view, the quality of a real-time system. To meet the expectations of the industry, research on real-time systems is focusing on two main directions: virtualization and multicore real-time scheduling. Virtualization technologies allow to deploy multiple real-time systems on common computing plat-forms, instead to use a single host for each of them. This is a huge benefit in terms of flexibility: for example, it allows to stop a platform (and thus save power) when it is not needed, migrating real-time virtual machines (VMs) to other platforms. Integrating virtualization technologies in embedded platforms while meeting the real-time requirements is not easy, and poses significant research challenges. The use of virtualization on embedded systems dates back to recent years. Indeed, embedded systems are getting more and more powerful and recently ARM processors implemented hardware-supported virtu-alization. Various open-source and high-performance hypervisors, KVM and Xen in particular, are being ported to the ARM processors equipped with virtualization extensions and official support is also present in mainline Linux kernel. In this paper we will discuss the present status of virtualization technologies on embedded platforms, focusing the analysis on the ARM architecture. After a brief introduction to virtualization and virtual machines architecture, we will introduce ARM hardware-supported virtualiza-tion extensions. Then we will compare the current status of Xen and KVM hypervisors for ARM CPUs, taking into accounts metrics from the real-time and Internet of Things communities.}
}

@incollection{abbasiExploringOpenStackScalable2023,
  title = {Exploring {{OpenStack}} for {{Scalable}} and {{Cost-Effective Virtualization}} in {{Education}}},
  booktitle = {New {{Trends}} in {{Disruptive Technologies}}, {{Tech Ethics}} and {{Artificial Intelligence}}},
  author = {Abbasi, Maryam and Cardoso, Filipe and Silva, Jos{\'e} and Martins, Pedro},
  editor = {De La Iglesia, Daniel H. and De Paz Santana, Juan F. and L{\'o}pez Rivero, Alfonso J.},
  year = {2023},
  volume = {1452},
  pages = {135--146},
  publisher = {Springer Nature Switzerland},
  address = {Cham},
  doi = {10.1007/978-3-031-38344-1_13},
  urldate = {2024-08-17},
  isbn = {978-3-031-38343-4 978-3-031-38344-1},
  langid = {english}
}

@article{bhardwajVirtualizationCloudComputing2021,
  title = {Virtualization in {{Cloud Computing}}: {{Moving}} from {{Hypervisor}} to {{Containerization}}---{{A Survey}}},
  shorttitle = {Virtualization in {{Cloud Computing}}},
  author = {Bhardwaj, Aditya and Krishna, C. Rama},
  year = {2021},
  month = sep,
  journal = {Arabian Journal for Science and Engineering},
  volume = {46},
  number = {9},
  pages = {8585--8601},
  issn = {2193-567X, 2191-4281},
  doi = {10.1007/s13369-021-05553-3},
  urldate = {2024-08-17},
  langid = {english}
}

@incollection{gabrielResourceAwareParameterTuning2019,
  title = {Resource-{{Aware Parameter Tuning}} for {{Real-Time Applications}}},
  booktitle = {Architecture of {{Computing Systems}} -- {{ARCS}} 2019},
  author = {Gabriel, Dirk and Stechele, Walter and Wildermann, Stefan},
  editor = {Schoeberl, Martin and Hochberger, Christian and Uhrig, Sascha and Brehm, J{\"u}rgen and Pionteck, Thilo},
  year = {2019},
  volume = {11479},
  pages = {45--55},
  publisher = {Springer International Publishing},
  address = {Cham},
  doi = {10.1007/978-3-030-18656-2_4},
  urldate = {2024-08-17},
  isbn = {978-3-030-18655-5 978-3-030-18656-2},
  langid = {english}
}

@incollection{mahfoudRealTimePredictiveMaintenanceBased2024,
  title = {Real-{{Time Predictive Maintenance-Based Process Parameters}}: {{Towards}} an {{Industrial Sustainability Improvement}}},
  shorttitle = {Real-{{Time Predictive Maintenance-Based Process Parameters}}},
  booktitle = {International {{Conference}} on {{Advanced Intelligent Systems}} for {{Sustainable Development}} ({{AI2SD}}'2023)},
  author = {Mahfoud, Hassana and Moutaoukil, Oussama and Toum Benchekroun, Mohammed and Latif, Adnane},
  editor = {Ezziyyani, Mostafa and Kacprzyk, Janusz and Balas, Valentina Emilia},
  year = {2024},
  volume = {931},
  pages = {18--34},
  publisher = {Springer Nature Switzerland},
  address = {Cham},
  doi = {10.1007/978-3-031-54288-6_3},
  urldate = {2024-08-17},
  isbn = {978-3-031-54287-9 978-3-031-54288-6},
  langid = {english}
}

@article{queirozContainerbasedVirtualizationRealtime2024,
  title = {Container-Based {{Virtualization}} for {{Real-time Industrial Systems}}---{{A Systematic Review}}},
  author = {Queiroz, Rui and Cruz, Tiago and Mendes, J{\'e}r{\^o}me and Sousa, Pedro and Sim{\~o}es, Paulo},
  year = {2024},
  month = mar,
  journal = {ACM Computing Surveys},
  volume = {56},
  number = {3},
  pages = {1--38},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/3617591},
  urldate = {2024-08-17},
  abstract = {Industrial Automation and Control systems have matured into a stable infrastructure model that has been kept fundamentally unchanged, using discrete embedded systems (such as Programmable Logic Controllers) to implement the first line of sensorization, actuation, and process control and stations and servers providing monitoring, supervision, logging/database and data-sharing capabilities, among others. More recently, with the emergence of the Industry 4.0 paradigm and the need for more flexibility, there has been a steady trend towards virtualizing some of the automation station/server components, first by using virtual machines and, more recently, by using container technology. This trend is pushing for better support for real-time requirements on enabling virtualization technologies such as virtual machines and containers.             This article provides a systematic review on the use of container virtualization in real-time environments such as cyber-physical systems, assessing how existing and emerging technologies can fulfill the associated requirements. Starting by reviewing fundamental concepts related to container technology and real-time requirements, it goes on to present the methodology and results of a systematic study of 37 selected papers covering aspects related to the enforcement of real-time constrains within container hosts and the expected task latency on such environments, as well as an overview of container platforms and orchestration mechanisms for RT systems.},
  langid = {english}
}

@article{cinqueEvaluatingVirtualizationFog2023,
  title = {Evaluating Virtualization for Fog Monitoring of Real-Time Applications in Mixed-Criticality Systems},
  author = {Cinque, Marcello and De Simone, Luigi and Mazzocca, Nicola and Ottaviano, Daniele and Vitale, Francesco},
  year = {2023},
  month = dec,
  journal = {Real-Time Systems},
  volume = {59},
  number = {4},
  pages = {534--567},
  issn = {0922-6443, 1573-1383},
  doi = {10.1007/s11241-023-09410-4},
  urldate = {2024-08-17},
  abstract = {Abstract             Technological advances in embedded systems and the advent of fog computing led to improved quality of service of applications of cyber-physical systems. In fact, the deployment of such applications on powerful and heterogeneous embedded systems, such as multiprocessors system-on-chips (MPSoCs), allows them to meet latency requirements and real-time operation. Highly relevant to the industry and our reference case-study, the challenging field of nuclear fusion deploys the aforementioned applications, involving high-frequency control with hard real-time and safety constraints. The use of fog computing and MPSoCs is promising to achieve safety, low latency, and timeliness of such control. Indeed, on one hand, applications designed according to fog computing distribute computation across hierarchically organized and geographically distributed edge devices, enabling timely anomaly detection during high-frequency sampling of time series, and, on the other hand, MPSoCs allow leveraging fog computing and integrating monitoring by deploying tasks on a flexible platform suited for mixed-criticality software, leading to so-called mixed criticality systems (MCSs). However, the integration of such software on the same MPSoC opens challenges related to predictability and reliability guarantees, as tasks interfering with each other when accessing the same shared MPSoC resources may introduce non-deterministic latency, possibly leading to failures on account of deadline overruns. Addressing the design, deployment, and evaluation of MCSs on MPSoCs, we propose a model-based system development process that facilitates the integration of real-time and monitoring software on the same platform by means of a formal notation for modeling the design and deployment of MPSoCs. The proposed notation allows developers to leverage embedded hypervisors for monitoring real-time applications and guaranteeing predictability by isolation of hardware resources. Providing evidence of the feasibility of our system development process and evaluating the industry-relevant class of nuclear fusion applications, we experiment with a safety-critical case-study in the context of the ITER nuclear fusion reactor. Our experimentation involves the design and evaluation of several prototypes deployed as MCSs on a virtualized MPSoC, showing that deployment choices linked to the monitor placement and virtualization configurations (e.g., resource allocation, partitioning, and scheduling policies) can significantly impact the predictability of MCSs in terms of Worst-Case Execution Times and other related metrics.},
  langid = {english}
}

@inproceedings{casiniLatencyAnalysisVirtualization2021,
  title = {Latency {{Analysis}} of {{I}}/{{O Virtualization Techniques}} in {{Hypervisor-Based Real-Time Systems}}},
  booktitle = {2021 {{IEEE}} 27th {{Real-Time}} and {{Embedded Technology}} and {{Applications Symposium}} ({{RTAS}})},
  author = {Casini, Daniel and Biondi, Alessandro and Cicero, Giorgiomaria and Buttazzo, Giorgio},
  year = {2021},
  month = may,
  pages = {306--319},
  publisher = {IEEE},
  address = {Nashville, TN, USA},
  doi = {10.1109/RTAS52030.2021.00032},
  urldate = {2024-08-17},
  abstract = {Nowadays, hypervisors are the standard solution to integrate different domains into a shared hardware platform, while providing safety, security, and predictability. To this end, a hypervisor virtualizes the physical platform and orchestrates the access to each component. When the system needs to comply with certification requirements for safety-critical systems, virtualization latencies need to be analytically bounded for providing off-line guarantees. This paper presents a detailed modeling of three I/O virtualization techniques, providing analytical bounds for each of them under different metrics. Experimental results compare the bounds for a case study and quantify the contribution due to different sources of delay.},
  copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
  isbn = {978-1-66540-386-3},
  langid = {english}
}

@incollection{zhangEvaluatingOptimizingVirtualization2010,
  title = {Evaluating and {{Optimizing I}}/{{O Virtualization}} in {{Kernel-based Virtual Machine}} ({{KVM}})},
  booktitle = {Network and {{Parallel Computing}}},
  author = {Zhang, Binbin and Wang, Xiaolin and Lai, Rongfeng and Yang, Liang and Wang, Zhenlin and Luo, Yingwei and Li, Xiaoming},
  editor = {Ding, Chen and Shao, Zhiyuan and Zheng, Ran},
  year = {2010},
  volume = {6289},
  pages = {220--231},
  publisher = {Springer Berlin Heidelberg},
  address = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-15672-4_20},
  urldate = {2024-08-17},
  abstract = {I/O virtualization performance is an important problem in KVM. In this paper, we evaluate KVM I/O performance and propose several optimizations for improvement. First, we reduce VM Exits by merging successive I/O instructions and decreasing the frequency of timer interrupt. Second, we simplify the Guest OS by removing redundant operations when the guest OS operates in a virtual environment. We eliminate the operations that are useless in the virtual environment and bypass the I/O scheduling in the Guest OS whose results will be rescheduled in the Host OS. We also change NIC driver's configuration in Guest OS to adapt the virtual environment for better performance.},
  isbn = {978-3-642-15671-7 978-3-642-15672-4},
  langid = {english}
}

@misc{LATENCY,
  title = {{{LATENCY}}(1)},
  url = {https://doc.xenomai.org/v3/html/man1/latency/index.html},
  urldate = {2024-08-19}
}

@misc{rostedtTracecmdHostGuest,
  title = {Trace-Cmd Host Guest Tracing Howto},
  author = {Rostedt, Steven},
  url = {https://rostedt.org/host-guest-tutorial/},
  urldate = {2024-08-20}
}

@misc{PackMg996rMetal,
  title = {6 {{Pack Mg996r Metal Gear Digital Servo Motor}} - {{Compatible With Ardu}}...},
  journal = {Fruugo},
  url = {https://www.fruugo.co.il/6-pack-mg996r-metal-gear-digital-servo-motor-compatible-with-arduino-rc-models-horn-arm/p-163197201-346945567?language=en},
  urldate = {2024-08-23},
  abstract = {Shop 6 Pack Mg996r Metal Gear Digital Servo Motor - Compatible With Arduino - Rc Models - Horn Arm. One of many items available from our Vacuum Accessories department here at Fruugo!},
  langid = {english}
}

@misc{6DFRoboticArm,
  title = {{{6DF}} Robotic Arm},
  journal = {yfrobot},
  url = {https://yfrobot.com/products/yfrobot-4wd-chassis-steered-by-a-servo-motor-%e7%9a%84%e5%89%af%e6%9c%ac},
  urldate = {2024-08-23},
  abstract = {Overview: Six-degree-of-freedom machinery is widely used in the field of college teaching, personal IDY production and maker education, it can be regarded as a simple multi-degree-of-freedom demonstration platform, its power system is composed of 6 servo motors, can realize the demonstration of manipulator front and ba},
  langid = {english}
}

@misc{twierengEmilyQuadrupedDog,
  title = {Emily, a {{Quadruped Dog Robot}}},
  author = {{twiereng}},
  journal = {Instructables},
  url = {https://www.instructables.com/Emily-a-Quadruped-Dog-Robot/},
  urldate = {2024-08-23},
  abstract = {Emily, a Quadruped Dog Robot: My motivation for this project was to build a quadruped robot about the size of Emily, my yellow Labrador Retriever. It began with a search of the Internet for examples of a dog robot I could model. While many dog robot examples can be found, the ma{\dots}},
  langid = {english}
}

@misc{LASALOSSIGMATEK,
  title = {{LASAL OS - SIGMATEK}},
  publisher = {SIGMATEK},
  urldate = {2024-07-30},
  langid = {ngerman}
}

@misc{OverviewXenomai,
  title = {Overview :: {{Xenomai}} 3},
  url = {https://v3.xenomai.org/overview/},
  urldate = {2024-08-28}
}

@article{deoliveiraDemystifyingRealTimeLinux2020,
  title = {Demystifying the {{Real-Time Linux Scheduling Latency}}},
  author = {{de Oliveira}, Daniel Bristot and Casini, Daniel and {de Oliveira}, R{\^o}mulo Silva and Cucinotta, Tommaso},
  year = {2020},
  journal = {LIPIcs, Volume 165, ECRTS 2020},
  volume = {165},
  pages = {9:1-9:23},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  issn = {1868-8969},
  doi = {10.4230/LIPICS.ECRTS.2020.9},
  urldate = {2024-08-28},
  abstract = {Linux has become a viable operating system for many real-time workloads. However, the black-box approach adopted by cyclictest, the tool used to evaluate the main real-time metric of the kernel, the scheduling latency, along with the absence of a theoretically-sound description of the in-kernel behavior, sheds some doubts about Linux meriting the real-time adjective. Aiming at clarifying the PREEMPT\_RT Linux scheduling latency, this paper leverages the Thread Synchronization Model of Linux to derive a set of properties and rules defining the Linux kernel behavior from a scheduling perspective. These rules are then leveraged to derive a sound bound to the scheduling latency, considering all the sources of delays occurring in all possible sequences of synchronization events in the kernel. This paper also presents a tracing method, efficient in time and memory overheads, to observe the kernel events needed to define the variables used in the analysis. This results in an easy-to-use tool for deriving reliable scheduling latency bounds that can be used in practice. Finally, an experimental analysis compares the cyclictest and the proposed tool, showing that the proposed method can find sound bounds faster with acceptable overheads.},
  collaborator = {V{\"o}lp, Marcus},
  copyright = {Creative Commons Attribution 3.0 Unported license, info:eu-repo/semantics/openAccess},
  isbn = {9783959771528},
  langid = {english},
  keywords = {Computer systems organization  Real-time operating systems,Linux kernel,PREEMPT_RT,Real-time operating systems,Scheduling latency}
}

@misc{lipariRealTimeSchedulingHard2015,
  title = {Real-{{Time}} Scheduling: From Hard to Soft Real-Time Systems},
  shorttitle = {Real-{{Time}} Scheduling},
  author = {Lipari, Giuseppe and Palopoli, Luigi},
  year = {2015},
  publisher = {arXiv},
  doi = {10.48550/ARXIV.1512.01978},
  urldate = {2024-08-28},
  abstract = {Real-time systems are traditionally classified into hard real-time and soft real-time: in the first category we have safety critical real-time systems where missing a deadline can have catastrophic consequences, whereas in the second class we find systems or which we need to optimise the Quality of service provided to the user. However, the frontier between these two classes is thinner than one may think, and many systems that were considered as hard real-time in the past should now be reconsidered under a different light. In this paper we shall first recall the fundamental notion of time-predictability and criticality, in order to understand where the real-time deadlines that we use in our theoretical models come from. We shall then introduce the model of a soft real-time system and present one popular method for scheduling hard and soft real-time tasks, the resource reservation framework. Finally, we shall show how resource reservation techniques can be successfully applied to the design of classical control systems, thus adding robustness to the system and increasing resource utilisation and performance.},
  copyright = {Creative Commons Attribution 4.0 International},
  keywords = {FOS: Computer and information sciences,Operating Systems (cs.OS)}
}
